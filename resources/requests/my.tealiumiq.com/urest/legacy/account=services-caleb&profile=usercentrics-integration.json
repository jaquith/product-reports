{"title":"Initial Publish","privacy_management":{},"publish_history":{"202008050854":{"title":"Initial publish","202008050854":{"lastcustomizeid":"","history":"","title":"Initial publish","datacloudLinkedProfiles":"{}","linkedProfiles":"{ }","publishedExtensions":"[ \"5\" , \"7\" , \"8\" , \"24\" , \"25\"]","publishedConsent":"","notes":"Initial publish on profile creation","versionorigin":"","action":"Published to dev","lastmanageid":"","status":"prod,qa,dev","operator":"caleb.jaquith@tealium.com","publishedTags":"[ \"4\" , \"5\" , \"6\" , \"7\" , \"8\" , \"9\" , \"10\" , \"13\" , \"14\" , \"26\" , \"27\"]"},"size":"145","status":"prod,qa,dev"}},"customizations":{"3":{"id":"100003","156656441877100072_setoption":"text","title":"Set data source for Unit collect tag","advExecOption":"alr","status":"active","156656441877100072_settotext":"test123","scope":"2","constructor":"","initialize":"","labels":"","156656441877100072_set":"js.tealium_datasource","156656441877100072_settovar":"","publishedTargets":"dev","type":"new","_id":"3","extType":"Set Data Values","selectedTargets":{"prod":"true","dev":"true","qa":"true"},"notes":".","sort":"2"},"4":{"status":"inactive","constructor":"","scope":"preload","advExecOption":"alr","code":"/**\n *  Scope       : Pre Loader\n *  Execution   : n/a\n *  Condition   : n/a\n *  Description : Stop TiQ from loading unless the consent cookie is found and valid.  \n *                After setting the cookie, the page should be reloaded so this logic runs again. otherwise\n *                tracking will start on the next page load.\n */\n\n\n(function avoidGlobalScopeUnlessExplicit() {\n    var cookieName = &quot;exampleConsentCookie&quot;;\n    var consentCookieInvalid = readCookie(cookieName) !== &quot;true&quot;;\n    \n\n    // don't load TiQ at all if the cookie is missing.  \n    // https://docs.tealium.com/platforms/javascript/settings/\n    if (consentCookieInvalid) {\n        window.utag_cfg_ovrd = window.utag_cfg_ovrd || {};\n        window.utag_cfg_ovrd.noload = true;\n    }\n    \n    // since it's Pre Loader, we need to bring our own logic\n    function readCookie(name) {\n      var reString = '(?:(?:^|.*;\\\\s*)' + name + '\\\\s*\\\\=\\\\s*([^;]*).*$)|^.*$';\n      var re = new RegExp(reString);\n      var cookieValue = document.cookie.replace(re, &quot;$1&quot;);\n      if (!cookieValue) return undefined;\n      return cookieValue;\n    }\n    \n})()\n\n\n\n\n\n\n","labels":"","initialize":"","_ignoreError":"false","title":"Stop TIQ Load if Consent Cookie is missing","id":"100036","_id":"4","extType":"Javascript Code","scopevars":"","notes":"","sort":"3","selectedTargets":{"qa":"true","prod":"true","dev":"true"},"type":"new"},"5":{"_ignoreError":"false","id":"100036","title":"** CMP OPTION3 (1/3) - Block TiQ unless consent is granted, if CMP is found","advExecOption":"alr","status":"active","constructor":"","scope":"preload","labels":"","initialize":"","code":"/**\n *  Scope       : Pre Loader\n *  Execution   : n/a\n *  Condition   : n/a\n *  Description : CMP 1/3 - stop TiQ from loading unless Usercentrics CMP is found and user has granted explicit consent to at\n *                least one non-CMP and non-TiQ Vendor.\n * \n *                Will poll for decision if none is found, and fire the page view when a consent decision is found.  Will also\n *                poll if the response isn't understandble or seems incomplete (Usercentrics hasn't finished populating the decision).\n * \n *                If we find a decision and it's a full opt-out, we stop TiQ from loading but poll for changes in that decision at a slower rate. \n * \n *                Consent is rechecked on each new event (pageload, utag.view, utag.link) by extension CMP 2/3 \n */\n\n(function avoidGlobalScopeUnlessExplicit() {\n  // set names for key objects and variables\n  var nameOfVendorOptInArray = &quot;consent_vendors_with_opt_in&quot;; // must be used in Load Rules, otherwise tags will be blocked\n  var nameOfConsentCheckTimestamp = &quot;consent_array_update_time_gmt&quot;; // only used for debugging so far\n\n  var cmpNameInUsercentrics = &quot;Usercentrics Consent Management Platform&quot;;\n  var tiqNameInUsercentrics = &quot;Tealium Inc&quot;; // used to decide if TiQ's utag_main cookie can be set\n\n  var timeoutInterval = 1000; // setTimeout interval in MS - rate to poll for the CMP object changes if we didn't load TiQ\n\n  // remember if nocookie was set on the original page or not (important to respect)\n  var originalNoCookieConfig = (window.utag_cfg_ovrd &amp;&amp; window.utag_cfg_ovrd.nocookie === true);\n\n  // exclude these vendors when deciding whether there are tags (i.e. a reason to fire TiQ)\n  var nonTagVendorList = [];\n  nonTagVendorList.push(cmpNameInUsercentrics);\n  nonTagVendorList.push(tiqNameInUsercentrics);\n\n  var tiqInDebugMode = /utagdb=true/.test(document.cookie);\n  var tealiumEnvironment = getTealiumEnvironment() || &quot;prod&quot;; // fall back to prod (stops logging) if something goes wrong with the function\n  var tealiumAccountAndProfile = getTealiumAccountAndProfile(); // &quot;account/profile&quot; or falsey if not found\n\n  // help reduce logging during polling by allowing certain messages to only be logged once per page load\n  var alreadyLoggedMessageIds = {};\n  var alreadyBilledPageview = false;\n\n  // if noload is set to 'true', don't do anything at all (return to allow that setting to stop TiQ load as usual)\n  if (window.utag_cfg_ovrd &amp;&amp; window.utag_cfg_ovrd.noload === true) return false;\n\n  // disable built-in billing events - we've added our own, which fire on each TMS event (pageload, utag.track call) for EDF-based billing without UDH events\n  // RUNNING AS NORMAL TO START, sendBillingEvent function is also commented out\n  /*\n  window.utag_cfg_ovrd = window.utag_cfg_ovrd || {};\n  window.utag_cfg_ovrd.no_session_count = true;\n  */\n\n  logger(&quot;CMP integration active - Usercentrics/TiQ&quot; + (tiqInDebugMode ? &quot;\\n\\nDEBUGGING TIP: Use /SENDING|\\\\*\\\\*\\\\*\\\\*/ in the browser console as the 'filter' to show only CMP and tag send notifications.&quot; : &quot;\\n\\nActivate TiQ Debug Mode for more details: https://docs.tealium.com/platforms/javascript/debugging/&quot;), true);\n  var cmpResponse = cmpConsentCheck();\n  // core business/GDPR logic, decides if TiQ should load at all\n  reactToCmpResponse(cmpResponse);\n\n  // expose globally for use in CMP 2\n  window.tiqUsercentricsIntegration = window.tiqUsercentricsIntegration || {};\n  window.tiqUsercentricsIntegration.logger = logger;\n  window.tiqUsercentricsIntegration.recheckConsentAndGetCurrentVendorConsentArray = recheckConsentAndGetCurrentVendorConsentArray;\n  window.tiqUsercentricsIntegration.nonTagVendorList = nonTagVendorList;\n  window.tiqUsercentricsIntegration.cmpNameInUsercentrics = cmpNameInUsercentrics;\n  window.tiqUsercentricsIntegration.tiqNameInUsercentrics = tiqNameInUsercentrics;\n  window.tiqUsercentricsIntegration.nameOfVendorOptInArray = nameOfVendorOptInArray;\n  window.tiqUsercentricsIntegration.nameOfConsentCheckTimestamp = nameOfConsentCheckTimestamp;\n  window.tiqUsercentricsIntegration.originalNoCookieConfig = originalNoCookieConfig;\n  window.tiqUsercentricsIntegration.sendBillingEvent = sendBillingEvent;\n\n  // START FUNCTION DEFINITIONS\n\n  /**\n   *   Core CMP Integration Logic\n   * \n   *   Split out into a function to allow it to be called both on initial page load and during polling\n   */\n  function reactToCmpResponse(cmpResponse, fromPolling) {\n      var foundExplicitConsent = checkForExplicitConsentDecision(cmpResponse);\n      var foundWellFormedConsentDecision = checkForWellFormedDecision(cmpResponse);\n      var foundNonSystemVendorOptIn = checkForNonSystemOptIn(cmpResponse);\n      var cmpConsentArray;\n      var vendorArray;\n\n      // CASE: Found CMP, got response that was understandable and  included opt-in to at least one tag\n      if (cmpResponse &amp;&amp; foundWellFormedConsentDecision &amp;&amp; foundExplicitConsent &amp;&amp; foundNonSystemVendorOptIn) {\n          if (messageNotLoggedYet(1)) {\n              cmpConsentArray = cmpResponse;\n              vendorArray = getVendorConsentArrayFromCmpConsentArray(cmpConsentArray);\n              logger(&quot;Found Usercentrics CMP and an explicit consent decision that includes at least one non-TMS, non-CMP vendor (which might be a tag).\\n\\nVendor Consent Array from CMP: &quot; + JSON.stringify(vendorArray, null, 2) + &quot;\\n\\nLoading TiQ.&quot;);\n\n          }\n          // only call if we've been polling (on initial load, it will load automatically)\n          if (fromPolling) triggerTiqLoad();\n          // NO NEED to call sendBillingEvent() here, it will happen in the CMP 2 extension since TiQ \n      }\n      // CASE: Found CMP, got response that was understandable but there is no non-system opt-in\n      else if (cmpResponse &amp;&amp; foundWellFormedConsentDecision &amp;&amp; foundExplicitConsent) {\n          if (messageNotLoggedYet(2)) {\n              cmpConsentArray = cmpResponse;\n              vendorArray = getVendorConsentArrayFromCmpConsentArray(cmpConsentArray);\n              logger(&quot;Found Usercentrics CMP and found an explicit consent decision, but that decision doesn't include a non-CMP, non-TMS vendor.\\n\\nVendor Consent Array from CMP: &quot; + JSON.stringify(vendorArray, null, 2) + &quot;\\n\\nStopping TiQ (no cookies set/removed, no tags fired).\\n\\nPolling for changes.&quot;);\n          }\n\n          window.setTimeout(recheckForCmpAndConsent, timeoutInterval);\n          stopTiq();\n          // only bill each pageview once\n          if (!alreadyBilledPageview) {\n              sendBillingEvent();\n              alreadyBilledPageview = true;\n          }\n      } \n      // CASE: Found CMP, got response that was understandable but there is no non-system opt-in Found CMP, got response that was understandable but there is no non-system opt-in\n      else if (cmpResponse &amp;&amp; foundWellFormedConsentDecision){\n          if (messageNotLoggedYet(3)) {\n            logger(&quot;Found Usercentrics CMP and got understandable response, but no explicit consent decision was found.\\n\\nStopping TiQ (no cookies set/removed, no tags fired).\\n\\nPolling for changes.&quot;);\n          }\n          window.setTimeout(recheckForCmpAndConsent, timeoutInterval);\n          stopTiq();\n          // only bill each pageview once\n          if (!alreadyBilledPageview) {\n              sendBillingEvent();\n              alreadyBilledPageview = true;\n          }\n      }\n      // CASE: Found CMP but got response that was NOT understood\n      else if (cmpResponse){\n          if (messageNotLoggedYet(4)) {\n            logger(&quot;Found Usercentrics CMP and got response, but didn't understand the response.\\n\\nStopping TiQ (no cookies set/removed, no tags fired).\\n\\nPolling for changes.&quot;);\n          }\n          window.setTimeout(recheckForCmpAndConsent, timeoutInterval);\n          stopTiq();\n          // only bill each pageview once\n          if (!alreadyBilledPageview) {\n              sendBillingEvent();\n              alreadyBilledPageview = true;\n          }\n      }\n      // CASE: No CMP Found on page\n      else {\n          if (messageNotLoggedYet(5)) {\n            logger(&quot;No Usercentrics CMP found on page.\\n\\nStopping TiQ (no cookies set/removed, no tags fired).\\n\\nPolling for changes.&quot;);\n          }\n          window.setTimeout(recheckForCmpAndConsent, timeoutInterval);\n          stopTiq();\n          // only bill each pageview once\n          if (!alreadyBilledPageview) {\n              sendBillingEvent();\n              alreadyBilledPageview = true;\n          }\n      }\n  }\n\n  // allows us to make sure we don't log certain messages more than once\n  function messageNotLoggedYet(messageId){\n      var output = false;\n      if (typeof alreadyLoggedMessageIds[messageId] === &quot;undefined&quot;) {\n          alreadyLoggedMessageIds[messageId] = true;\n          output = true;\n      }\n      return output;\n  }\n\n  // keep polling until an explicit consent decision is found\n  function recheckForCmpAndConsent() {\n      var newConsent = cmpConsentCheck();\n      // fire our central logic\n      reactToCmpResponse(newConsent, true);\n  }\n\n  // CMP-specific logic here, assumes the funtion can be called syncronously\n  function cmpConsentCheck() {\n      if (!window.usercentrics || typeof window.usercentrics.getConsents !== &quot;function&quot;) return false;\n      var cmpConsentArray = window.usercentrics.getConsents();\n      return cmpConsentArray;\n  }\n\n  function checkForWellFormedDecision(cmpConsentArray) {\n      // treat things we don't understand as an opt-out\n      if (toString.call(cmpConsentArray) !== &quot;[object Array]&quot;) return false;\n      // use the first entry as a proxy for all \n      if (cmpConsentArray &amp;&amp; cmpConsentArray[0] &amp;&amp; typeof cmpConsentArray[0].dataProcessingService !== &quot;undefined&quot;) {\n          return true;\n      }\n      return false;\n  }\n\n  function checkForExplicitConsentDecision(cmpConsentArray) {\n      // treat things we don't understand as an opt-out\n      if (toString.call(cmpConsentArray) !== &quot;[object Array]&quot;) return false;\n      // use the first entry as a proxy for all \n      if (cmpConsentArray &amp;&amp; cmpConsentArray[0] &amp;&amp; cmpConsentArray[0].updatedBy === &quot;explicit&quot;) {\n          return true;\n      }\n      return false;\n  }\n\n  function checkForNonSystemOptIn(cmpConsentArray) {\n      var foundOptIn = false;\n      // treat things we don't understand as an opt-out\n      if (toString.call(cmpConsentArray) !== &quot;[object Array]&quot;) return false;\n      // check vendors if there's an object, look for at least one \n      cmpConsentArray.forEach(function(tagInfo) {\n          // User Centrics is always essential, but isn't controlled in TiQ. TiQ can be on the list as well.\n          if (tagInfo.consentStatus === true &amp;&amp; nonTagVendorList.indexOf(tagInfo.dataProcessingService) === -1) {\n              foundOptIn = true\n          }\n      })\n      return foundOptIn;\n  }\n\n  function getVendorConsentArrayFromCmpConsentArray(cmpConsentArray) {\n      var vendorArray = [];\n      // add as a property of the object for debugging if needed\n      vendorArray[nameOfConsentCheckTimestamp] = (new Date()).toISOString(); // for debugging\n      cmpConsentArray &amp;&amp; cmpConsentArray.forEach(function(tagConsent) {\n          if (tagConsent.updatedBy === &quot;explicit&quot; &amp;&amp; tagConsent.consentStatus === true) {\n              vendorArray.push(tagConsent.dataProcessingService)\n          }\n      });\n      return vendorArray;\n  }\n\n  \n  function recheckConsentAndGetCurrentVendorConsentArray() {\n      var freshConsent = cmpConsentCheck();\n      var freshVendorArray = getVendorConsentArrayFromCmpConsentArray(freshConsent)\n      return freshVendorArray;\n  }\n\n  // we can't write to utag.DB because some of our logic needs to be preloader, but we can mimic the same logic so that our logging\n  // only displays when TiQ is in debug mode and/or not in Prod\n  function logger(message, showOutsideDebugMode) {\n      if (typeof tealiumEnvironment === &quot;undefined&quot; || tealiumEnvironment === &quot;prod&quot;) {\n          // don't allow anything outside of debug mode on prod (disable this flag)\n          showOutsideDebugMode = false;\n      }\n\n      if (showOutsideDebugMode || tiqInDebugMode) {\n          message = &quot;\\n&quot; + message + &quot;\\n&quot;;\n          var formattedArr = [];\n          formattedArr.push(&quot;****************&quot;);\n          var messageArr = message.split(&quot;\\n&quot;);\n          messageArr.forEach(function(messageLine) {\n              formattedArr.push(&quot;*  &quot; + messageLine);\n          });\n          formattedArr.push(&quot;****************&quot;);\n          var outputString = formattedArr.join(&quot;\\n&quot;);\n          console.log(outputString);\n      }\n  }\n\n  // stop TiQ from loading (will not set a cookie if stopped at this point in the load)\n  function stopTiq() {\n      // logger(&quot;stopTiq function fired&quot;)\n      window.utag_cfg_ovrd = window.utag_cfg_ovrd || {};\n      window.utag_cfg_ovrd.noload = true;\n  }\n\n  function triggerTiqLoad() {\n      // we don't need to reload actually, just allow it to finish loading\n      utag.cfg.noload = false; // safe because this code only runs if it was set to false originally\n      utag.loader.PINIT();\n  }\n\n  // use regex to recognize the utag.js file in the DOM and read the environment from the file name\n  // since we're in Pre Loader (there are no utag functions or objects yet)\n  function getTealiumEnvironment() {\n    var allScripts = document.getElementsByTagName('script');\n    var re = /\\/([^\\/]*)\\/utag\\.js(\\?.*)*$/;\n    for (var i = 0; i &lt; allScripts.length; i++) {\n      var result = re.exec(allScripts[i].src); // can be null\n      if (result &amp;&amp; result[1]) { // [1] is the result of the match\n        return result[1];\n      }\n    }\n    return &quot;prod&quot;; // default to guessing we're in prod, just in case we're actually in prod.\n  }\n\n  // doesn't handle Environment Switcher well (will show the original) - that doesn't really matter for billing purposes given the small volume of testers\n  function getTealiumAccountAndProfile() {\n      var allScripts = document.getElementsByTagName('script');\n      var re = /tags.tiqcdn.com\\/utag\\/(.*)\\/.*\\/utag\\.js(?:\\?.*)*$/;\n      for (var i = 0; i &lt; allScripts.length; i++) {\n        var result = re.exec(allScripts[i].src); // can be null\n        if (result &amp;&amp; result[1]) { // [1] is the result of the match\n          return result[1];\n        }\n      }\n      return false; // trigger the fallback if the logic fails to find utag \n    }\n\n  // since Pro7 has the event data framework, we need to bill on EVENTS, not sessions, so we deactivate the normal billing logic and use this instead\n  function sendBillingEvent() {\n    // deactivate for now\n    /*\n      // XHR seems to be blocked by CORS sometimes, this approach is safer\n      (function(a,b,c,d){\n      a=&quot;https://tags.tiqcdn.com/utag/tiqapp/utag.v.js?a=&quot; + (tealiumAccountAndProfile || &quot;pro7/cmp-integration-billing-fallback&quot;) + &quot;/197001010001&amp;cb=&quot; + (new Date()).getTime();\n      b=document;c='script';d=b.createElement(c);d.src=a;d.class=&quot;tiqapp&quot;;d.type='text/java'+c;d.async=true;\n      a=b.getElementsByTagName(c)[0];a.parentNode.insertBefore(d,a);\n      })();\n      logger(&quot;(Sent anonymous event counting request for Event Data Framework billing.)&quot;)\n      */\n  }\n\n})();\n","publishedTargets":"dev","type":"new","_id":"5","extType":"Javascript Code","selectedTargets":{"dev":"true","prod":"true","qa":"true"},"scopevars":"","notes":"ddddreqt dddfff dfadddaddfaf qt4q 5","sort":"4"},"7":{"advExecOption":"blr","scope":"global","constructor":"","status":"active","labels":"","initialize":"","code":"/**\n *  Scope       : All Tags - Before Load Rules\n *  Execution   : n/a\n *  Condition   : n/a\n *  Description : CMP 2/3 - Write OPTOUTMULTI cookie to prevent tag load based on Tealium Tag groups (multiple\n *                instances of a Marketplace tag are treated as a group). \n * \n *                The OPTOUTMULTI cookie blocks based on tag marketplace ID, and was originally used for the\n *                (now legacy) Privacy Manager extension.\n *                \n *                Here, we use it to enforce Privacy by Design: EACH instance of each tag needs to \n *                have a consent-based load rule or we block ALL of them from firing. \n * \n *                If all tags have load rules where each condition includes based on the VendorOptInArray \n *                (see line 19 for setting)), that group will NOT be blocked by this solution.\n * \n *                All load rules and all tags are considered on each page, not just the ones for which the \n *                load rules are met.\n * \n */\n\n// get settings from CMP 1 extension, shouldn't need to change these\nvar globals = window.tiqUsercentricsIntegration || {};\nvar nonTagVendorList = globals.nonTagVendorList || [];\nvar cmpNameInUsercentrics = globals.cmpNameInUsercentrics || &quot;&quot;;\nvar tiqNameInUsercentrics = globals.tiqNameInUsercentrics || &quot;&quot;;\nvar nameOfVendorOptInArray = globals.nameOfVendorOptInArray || &quot;x&quot;; // needs to have SOME name as a fallback to avoid undesired behavior\nvar nameOfConsentCheckTimestamp = globals.nameOfConsentCheckTimestamp || &quot;x&quot;; // needs to have SOME name as a fallback to avoid undesired behavior\nvar originalNoCookieConfig = globals.originalNoCookieConfig;\nvar recheckConsentAndGetCurrentVendorConsentArray = globals.recheckConsentAndGetCurrentVendorConsentArray || function() {return [];};\nvar logger = globals.logger || utag.DB || function(message) {console.log(message)}; // logger function with fallback in case global function is missing\nvar sendBillingEvent = globals.sendBillingEvent || function(){};\n\n// for load rules\nvar currentlyAllowedVendors = recheckConsentAndGetCurrentVendorConsentArray();\nb[nameOfVendorOptInArray] = currentlyAllowedVendors;\n\nvar loadRuleNumbersAndDetails = getConsentLoadRuleNumbersAndDetails();\nvar consentLoadRules = loadRuleNumbersAndDetails.numbers || [];\nvar consentLoadRuleDetails = loadRuleNumbersAndDetails.details || [];\nlogger(&quot;Consent load rule debug: \\n    &quot; + consentLoadRuleDetails.join(&quot;\\n    &quot;) + &quot;\\n\\nConsent-based load rule list: [ &quot; + consentLoadRules.join(&quot;, &quot;) + &quot; ]&quot;);\n\n\nvar tiqCanSetCookie = currentlyAllowedVendors.indexOf(tiqNameInUsercentrics) !== -1;\n\nvar consentCookieValue = getConsentCookieValue(tiqCanSetCookie);\nif (!tiqCanSetCookie) {\n  removeTiqCookie();\n} else {\n  // restore the originally-saved nocookie setting if any, otherwise set to false\n  utag.cfg.nocookie = !!globals.originalNoCookieConfig;\n  var utagMainCookieExists = !!utag.loader.RC(&quot;utag_main&quot;).v_id; // force to boolean with !!\n  // \n  if (!utagMainCookieExists) {\n       utag.loader.rd_flag = 0; \n       utag.loader.RD(b);\n       logger(&quot;Added missing utag_main cookie.&quot;)\n  }\n}\n\n// we actually need to set the cookie, spoofing it in to the UDO isn't enough as of utag version 4.42\n// set a 1 day cookie, we remove it after tags have loaded anyway\nwriteCookie(&quot;OPTOUTMULTI&quot;, consentCookieValue, 1);\nb[&quot;cp.OPTOUTMULTI&quot;] = consentCookieValue; // also add to the b object to be safe\n\n\nlogger(&quot;Wrote OPTOUTMULTI cookie to block or allow each tag group based on load rule checks:\\n\\n&quot; + consentCookieValue + &quot;\\n\\nNotes:\\n  - TiQ cookies (group 0) are &quot; + (tiqCanSetCookie ? &quot;ALLOWED.&quot; : &quot;BLOCKED.&quot;) + &quot;\\n  - Cookie pattern is \\&quot;GROUP_NUMBER:BLOCKED|\\&quot; where 'BLOCKED' is a boolean (0/1).\\n  - Tags in allowed groups will only load if their load rules are met.\\n\\nAllowed vendors added to b[\\&quot;&quot; + nameOfVendorOptInArray + &quot;\\&quot;] for load rules by ALLOWED tag groups: &quot; + JSON.stringify(b[nameOfVendorOptInArray], null, 2));\n\n\nsendBillingEvent();  // send a billing event with each TMS event\n\n// END DECISIONS, START FUNCTIONS\n\nfunction updateConsentCookieValuesPerTagGroup(consentCookieString, tealiumContainerTags) {\n    // leave the string alone if an argument is missing\n    if (!consentCookieString || !tealiumContainerTags) return consentCookieString;\n\n    var containerCheckRegEx = RegExp(&quot;\\\\|(&quot; + tealiumContainerTags.join(&quot;|&quot;) + &quot;)&quot;);\n    var pageHasTealiumContainers = containerCheckRegEx.test(consentCookieString);\n\n    // no need to change anything if there are no containers\n    if (!pageHasTealiumContainers) return consentCookieString;\n\n    // check if all the UIDs for the containers are mapped to vendor name\n    var cookieEntryRebuild = [];\n    consentCookieString.split(&quot;|&quot;).forEach(function(entry) {\n        var tagId = entry.split(&quot;:&quot;)[0];\n        var optOutStatus = entry.split(&quot;:&quot;)[1];\n        if (tealiumContainerTags.indexOf(tagId) !== -1) {\n            optOutStatus = getTagGroupComplianceStatus(tagId);\n            entry = tagId + &quot;:&quot; + optOutStatus;\n        }\n        cookieEntryRebuild.push(entry)\n    });\n    return cookieEntryRebuild.join(&quot;|&quot;);\n}\n\n// only allow container-type tags to fire if all of the ones of the same type have a consent load rule\nfunction getTagGroupComplianceStatus(tagId) {\n    tagId = tagId.toString(10);\n    var tagList = Object.keys(utag.loader.cfg);\n    // go through the list of tags\n    var uid;\n    var tagLoadRules;\n    var consentLoadRuleCheckResults = []; // array of booleans\n    var checkLog = [];\n\n    // check each tag for consent-based load rules\n    for (i = 0; i &lt; tagList.length; i++) {\n        // skip irrelevant tags\n        if (utag.loader.cfg[tagList[i]]['tid'].toString(10) !== tagId) continue;\n        uid = tagList[i];\n        tagLoadRules = getTagLoadRules(uid);\n        var matches;\n        var hasConsentLoadRule;\n        // console.log(&quot;##&quot;, tagLoadRules)\n        // each rule for each tag must have a consent load rule\n        tagLoadRules.forEach(function(rule) {\n            hasConsentLoadRule = false;\n            //  need to split OR cases\n            matches = rule.match(/\\[\\&quot;*(\\d+)\\&quot;*\\]/g) || [];\n            matches.forEach(function(loadRuleId) {\n                if (consentLoadRules.indexOf(loadRuleId.replace(/\\[|\\]/g, &quot;&quot;)) !== -1) hasConsentLoadRule = true;\n            });\n            consentLoadRuleCheckResults.push(hasConsentLoadRule);\n            var uidLength = uid.toString(10).length;\n            var uidString = &quot;&quot; + uid + (uidLength == 3 ? &quot;&quot; : ((uidLength == 2) ? &quot; &quot; : &quot;  &quot;));\n            checkLog.push(&quot;TAG &quot; + uidString + &quot; (&quot; + (hasConsentLoadRule ? &quot; OK &quot; : &quot;FAIL&quot;) + &quot;)&quot; + &quot; - &quot; + rule);\n        });\n    }\n    var allInstancesOfTagIdHaveConsentLoadRule = consentLoadRuleCheckResults &amp;&amp; consentLoadRuleCheckResults.length &gt; 0 &amp;&amp; consentLoadRuleCheckResults.indexOf(false) === -1;\n    var sharedString = &quot;\\n\\nImpacted Tags:\\n--------\\n    &quot; + checkLog.join(&quot;\\n    &quot;);\n    if (allInstancesOfTagIdHaveConsentLoadRule) {\n        logger(&quot;ALLOWING group &quot;+ tagId +&quot; to fire, found consent-based load rules assigned in all conditions for all tags.&quot; + sharedString);\n        return &quot;0&quot;; // opt-in (allow all instances of the tag template to fire)\n    }\n    logger(&quot;BLOCKING group &quot; + tagId + &quot; from firing, at least one tag/condition is missing a consent-based load rule.&quot; + sharedString + &quot;\\n\\nMake sure to check the '&quot; + nameOfVendorOptInArray + &quot;' array for appropriate consent in all load rule conditions for all tags.&quot;);\n    return &quot;1&quot;; // opt-out\n}\n\nfunction getConsentLoadRuleNumbersAndDetails() {\n    var consentLoadRules = [];\n    var details = [];\n    utag.loader.loadrules.toString().split(&quot;case&quot;).forEach(function(loadRuleString) {\n        var matchResults = loadRuleString.match(/^\\s*'(\\d+)'/);\n        var uid = matchResults &amp;&amp; matchResults[1];\n        var consentCheckResults = [];\n        matchResults &amp;&amp; matchResults.input &amp;&amp; matchResults.input.replace(/\\s*/g, &quot;&quot;).split(&quot;)||(d[&quot;).forEach(function(orClause, index) {\n            if (index !== 0) orClause = &quot;d[&quot; + orClause;\n            // logger(orClause)\n            consentCheckResults.push(orClause.indexOf(&quot;['&quot; + nameOfVendorOptInArray + &quot;']&quot;) !== -1);\n        })\n\n        if (uid &amp;&amp; matchResults &amp;&amp; matchResults.input) {\n            var isConsentBased = consentCheckResults.length !== 0 &amp;&amp; consentCheckResults.indexOf(false) === -1\n            var uidLength = uid.toString(10).length;\n            var uidString = &quot;&quot; + uid + (uidLength == 3 ? &quot;&quot; : ((uidLength == 2) ? &quot; &quot; : &quot;  &quot;));\n            details.push(uidString + &quot; (&quot; + (isConsentBased ? &quot; OK &quot; : &quot;FAIL&quot;) + &quot;)&quot; + &quot; - &quot; + loadRuleString.replace(/\\s+/g, &quot;&quot;));\n        }\n        if (isConsentBased) consentLoadRules.push(uid);\n    });\n    return {\n        numbers: consentLoadRules,\n        details: details\n    };\n}\n\n// returns an array\nfunction getTagLoadRules(uid) {\n    var tagIsBundled = utag.loader.cfg[uid].load === 4;\n    // get the relevant part of the load rule configuration from the function, remove whitespace\n    var re = RegExp('&quot;' + uid + '&quot;:{load:([^,]*),');\n    if (tagIsBundled) {\n        re = RegExp('&quot;' + uid + '&quot;:{load:[^,]*,send:([^,]*),');\n    }\n    var loadRulesMatch = utag.loader.initcfg.toString().replace(/\\s/g, &quot;&quot;).match(re);\n    var loadRulesString = loadRulesMatch &amp;&amp; loadRulesMatch[1] || &quot;&quot;\n\n    // if it's an 'ANY' case, each component needs to have a \n    var loadRulesParts = loadRulesString.split(&quot;||&quot;);\n    return loadRulesParts;\n}\n\n\n// we won't do this for tag cookies, but we can for our own.\nfunction removeTiqCookie() {\n    logger(&quot;Removing utag_main cookie, no consent given (explicit Pro7 requirement).&quot;)\n    eraseCookie(&quot;utag_main&quot;);\n}\n\nfunction eraseCookie(name) {\n    document.cookie = name + '=deleted;expires=Thu, 01 Jan 1970 00:00:01 GMT;domain=' + utag.cfg.domain + ';path=/;';\n}\n\n\nfunction writeCookie(name, value, days) {\n    var expires = &quot;&quot;;\n    if (days) {\n        var date = new Date();\n        date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));\n        expires = &quot;; expires=&quot; + date.toGMTString();\n    }\n    document.cookie = name + &quot;=&quot; + encodeURIComponent(value) + expires + &quot;;domain=&quot; + utag.cfg.domain + &quot;;path=/&quot;;\n    return true;\n}\n\n\n// create OPTOUTMULTI cookie to block tags without a CMP opt-in from firing\n// this cookie was used for Tealium's legacy Privacy Manager extension\n// format is {tid}:{is_opted_out (0/1)}.  TiQs 'tid' is 0 - opt-outs will set utag.cfg.nocookie to true\n// ex: &quot;0:0|6026:0|20064:1|19089:1&quot;\nfunction getConsentCookieValue(allowTiqCookie) {\n    // get an array of all available tags\n    var tagList = Object.keys(utag.loader.cfg);\n    var marketplaceIdList = [];\n    var uidToMarkeplaceIdMap = {};\n    for (var i = 0; i &lt; tagList.length; i++) {\n        marketplaceIdList.push(utag.loader.cfg[tagList[i]]['tid']);\n        uidToMarkeplaceIdMap[tagList[i]] = utag.loader.cfg[tagList[i]]['tid'];\n    }\n\n    var cookieValues = [];\n    // the first value is about whether TiQ is allowed to set cookies\n    cookieValues.push(allowTiqCookie ? &quot;0:0&quot; : &quot;0:1&quot;)\n\n    // to make sure we don't write duplicate values\n    var tagIdsAlreadyPushed = []\n\n    // go through the list of tags\n    var tagId;\n    for (i = 0; i &lt; tagList.length; i++) {\n        tagId = utag.loader.cfg[tagList[i]]['tid']\n        if (tagIdsAlreadyPushed.indexOf(tagId) !== -1) continue;\n        // check all instances of all tags for qualifying load rules\n        cookieValues.push(tagId + &quot;:&quot; + getTagGroupComplianceStatus(tagId));\n        tagIdsAlreadyPushed.push(tagId);\n    }\n    cookieValues.push(&quot;added_for_cmp_integration:true&quot;)\n\n    // logger(&quot;Tags: &quot; + JSON.stringify(uidToMarkeplaceIdMap, null, 2) + &quot;\\n\\n Cookie Value:\\n    &quot; + cookieValues.join(&quot;\\n    &quot;));\n\n    // join and return the full cookie spoof value;\n    return cookieValues.join(&quot;|&quot;);\n}\n\n","_ignoreError":"false","id":"100036","title":"** CMP OPTION3 (2/3) - Apply Optout based on Vendor (no Custom Container support yet)","extType":"Javascript Code","_id":"7","selectedTargets":{"qa":"true","dev":"true","prod":"true"},"sort":"5","scopevars":"","notes":"adfdadfa f dddddadf","publishedTargets":"dev","type":"new"},"8":{"title":"** CMP OPTION3 (3/3) - Remove cookie after each event, only needs to be a cookie for a few seconds","id":"100036","_ignoreError":"false","code":"/**\n *  Scope       : All Tags - After Tags\n *  Execution   : n/a\n *  Condition   : n/a\n *  Description : CMP 3/3 - Remove OPTOUTMULTI cookie, since it will be reset with fresh information on the\n *                next event and we don't want to leave unneeded cookies behind on the user's machine.\n * \n *                We DO need to physically (but temporarily) write this cookie as part of the CMP integration,\n *                but we DO NOT need to be written after TiQ's logic is finished.\n */\n\n// look for our own static string at the end of the cookie to avoid deleting any real Privacy Manager cookies\nvar optOutCookieWasSpoofed = /added_for_cmp_integration:true$/.test(b[&quot;cp.OPTOUTMULTI&quot;]);\nif (optOutCookieWasSpoofed) {\n    eraseCookie(&quot;OPTOUTMULTI&quot;);\n}\n\nfunction eraseCookie (name) {\n    document.cookie = name + '=deleted;expires=Thu, 01 Jan 1970 00:00:01 GMT;domain=' + utag.cfg.domain + ';path=/;';\n}","labels":"","initialize":"","scope":"global","constructor":"","status":"active","advExecOption":"end","type":"new","publishedTargets":"dev","sort":"6","notes":"","scopevars":"","selectedTargets":{"qa":"true","dev":"true","prod":"true"},"extType":"Javascript Code","_id":"8"}},"loadrules":{"2":{"0":{"operator_1":"contains","operator_0":"defined","input_0":"js.consent_vendors_with_opt_in","filter_0":"","filter_1":"Google Analytics","input_1":"js.consent_vendors_with_opt_in"},"startDate":"------------","id":"2","containerId":"loadrules_content_157683867656600027","title":"CMP: Google Analytics","endDate":"------------","constructor":"","_id":"2","status":"active","labels":"","initialize":"","editable":"true","sort":"1"},"3":{"0":{"operator_0":"defined","input_0":"js.consent_vendors_with_opt_in","operator_1":"contains_ignore_case","filter_1":"The Adex","filter_0":"","input_1":"js.consent_vendors_with_opt_in"},"endDate":"------------","constructor":"","_id":"3","status":"active","initialize":"","labels":"","sort":"8","editable":"true","startDate":"------------","id":"3","title":"CMP: The Adex","containerId":"loadrules_content_157683867657600034"},"4":{"0":{"operator_0":"defined","input_0":"dom.viewport_height","filter_0":""},"containerId":"loadrules_content_157683867656800028","title":"Not consent based","id":"4","startDate":"------------","constructor":"","status":"active","_id":"4","endDate":"------------","editable":"true","sort":"2","labels":"","initialize":""},"5":{"0":{"input_0":"dom.viewport_height","operator_0":"defined","operator_1":"notdefined","input_1":"dom.viewport_height","filter_1":"","filter_0":""},"containerId":"loadrules_content_157683867657000029","title":"Impossible","startDate":"------------","id":"5","status":"active","_id":"5","constructor":"","endDate":"------------","sort":"3","editable":"true","labels":"","initialize":""},"6":{"0":{"filter_0":"","input_0":"dom.viewport_height","operator_0":"defined"},"1":{"filter_0":"Placeholder","operator_0":"contains","input_0":"js.consent_vendors_with_opt_in"},"id":"6","startDate":"------------","containerId":"loadrules_content_157683867657100030","title":"Dangerous","labels":"","initialize":"","sort":"4","editable":"true","endDate":"------------","status":"active","_id":"6","constructor":""},"7":{"0":{"input_0":"js.ut.event","operator_0":"defined","operator_1":"equals_ignore_case","filter_1":"link","filter_0":"","input_1":"js.ut.event"},"labels":"","initialize":"","editable":"true","sort":"5","endDate":"------------","constructor":"","status":"active","_id":"7","startDate":"------------","id":"7","title":"Links only","containerId":"loadrules_content_157683867657200031"},"8":{"0":{"input_0":"js.consent_vendors_with_opt_in","operator_0":"defined","operator_1":"contains_ignore_case","filter_0":"","filter_1":"supertracker2000","input_1":"js.consent_vendors_with_opt_in"},"constructor":"","_id":"8","status":"active","endDate":"------------","sort":"6","editable":"true","labels":"","initialize":"","title":"CMP: supertracker2000","containerId":"loadrules_content_157683867657300032","startDate":"------------","id":"8"}},"publish":{"enable_utf8_encoding":"yes","minify":"yes"},"settings":{"profileid":"usercentrics-integration","account":"services-caleb","library":"NONE","revision":"202008050854","creation":"202008050854","lastmanageid":"14"},"manage":{"4":{"publishedTargets":"dev","config_clear_global_vars":"false","config_anonymizeip":"false","config_displayfeatures":"false","tag_id":"7110","selectedTargets":{"qa":"true","prod":"true","dev":"true"},"config_gaobject":"","config_enhancedecommerce":"false","new_flag":"true","config_useAmpClientId":"false","notes":"","loadrule":"2","tag_name":"Google Analytics (analytics.js)","config_crosstrackdomains":"","advconfig_loadtype":"","advconfig_wait":"yes","title":"Google Analytics (analytics.js)","loadrule_join_operator":"all","scope":"2","config_autosend_events":"true","status":"active","config_init_before_extensions":"false","config_screenview":"false","advconfig_optout":"yes","advconfig_send":"yes","advconfig_src":"","config_account":"","publish_revisions":{"svr_save_timestamps":{"qa":"201912131337","prod":"201912131337","dev":"201912131337"},"last_modified":"201912131337"},"_id":"4","sort":"2","config_enhancedlinkattribution":"false","config_optimizely":"false","advconfig_bundle":"no","id":"4","config_autofill_params":"false","config_domain":"","labels":"","config_name":"","config_setallowlinker":"false"},"5":{"advconfig_src":"","config_tagversion":"external","publishedTargets":"dev","advconfig_send":"yes","config_inpagelinkid":"false","selectedTargets":{"prod":"true","dev":"true","qa":"true"},"beforeonload":"var _gaq=_gaq || [];var pageTracker=pageTracker || {_trackEvent:function(c,d,e,f,g){g={ga_eventCat:c,ga_eventAction:d,ga_eventLabel:e,ga_eventValue:f};utag.link(g,null,[5]);},_trackPageview:function(c){_gaq.push(['_trackPageview',c?c:null]);}}","new_flag":"true","sort":"3","notes":"","publish_revisions":{"last_modified":"201912131337","svr_save_timestamps":{"qa":"201912131337","dev":"201912131337","prod":"201912131337"}},"config_anonymizeip":"false","tag_id":"7001","_id":"5","id":"5","title":"Google Analytics (ga.js)","loadrule":"2","tag_name":"Google Analytics (ga.js)","advconfig_loadtype":"","advconfig_bundle":"no","advconfig_wait":"yes","labels":"","config_accountprimary":"","advconfig_optout":"yes","config_setallowlinker":"false","loadrule_join_operator":"all","config_prefix":"","config_domain":"","scope":"2","status":"active"},"6":{"labels":"","advconfig_bundle":"no","config_use_amp_client_id":"false","id":"6","config_cross_track_domains":"","_id":"6","publish_revisions":{"svr_save_timestamps":{"qa":"201912131337","prod":"201912131337","dev":"201912131337"},"last_modified":"201912131337"},"config_cross_track":"false","config_data_layer_name":"","sort":"4","config_allow_display_features":"false","advconfig_send":"yes","advconfig_src":"","status":"active","scope":"2","loadrule_join_operator":"all","advconfig_optout":"yes","advconfig_wait":"yes","config_enhanced_link_attribution":"false","advconfig_loadtype":"","tag_name":"Google Analytics (gtag.js)","loadrule":"2","title":"Google Analytics (gtag.js)","tag_id":"7133","config_anonymize_ip":"false","config_tracking_id":"","notes":"","new_flag":"true","selectedTargets":{"prod":"true","dev":"true","qa":"true"},"config_gaobject":"","config_optimize_id":"","config_clear_global_vars":"false","publishedTargets":"dev","config_screen_view":"false"},"7":{"config_init_before_extensions":"false","advconfig_optout":"yes","config_screenview":"false","loadrule_join_operator":"all","config_autosend_events":"true","status":"active","scope":"all","title":"Google Analytics (analytics.js)","advconfig_loadtype":"","config_crosstrackdomains":"","loadrule":"all","tag_name":"Google Analytics (analytics.js)","advconfig_wait":"yes","config_enhancedecommerce":"false","config_gaobject":"","selectedTargets":{"qa":"true","prod":"true","dev":"true"},"notes":"","config_useAmpClientId":"false","new_flag":"true","config_anonymizeip":"false","tag_id":"7110","config_displayfeatures":"false","publishedTargets":"dev","config_clear_global_vars":"false","labels":"","config_setallowlinker":"false","config_name":"","config_domain":"","id":"7","config_autofill_params":"false","advconfig_bundle":"no","config_optimizely":"false","config_enhancedlinkattribution":"false","sort":"5","config_account":"","publish_revisions":{"svr_save_timestamps":{"dev":"201912131337","prod":"201912131337","qa":"201912131337"},"last_modified":"201912131337"},"_id":"7","advconfig_src":"","advconfig_send":"yes"},"8":{"title":"TheAdex","id":"8","advconfig_bundle":"no","advconfig_wait":"yes","tag_name":"TheAdex","loadrule":"3,4","advconfig_loadtype":"","advconfig_optout":"yes","labels":"","scope":"3,4","status":"active","_multipleLoadRules":"3,4","loadrule_join_operator":"all","multipleLoadRules":"3,4","config_tag_id":"","advconfig_src":"","config_enable_ecom":"off","config_customerid":"","publishedTargets":"dev","advconfig_send":"yes","new_flag":"true","sort":"6","notes":"","selectedTargets":{"prod":"true","dev":"true","qa":"true"},"_id":"8","tag_id":"1177","publish_revisions":{"last_modified":"201912131337","svr_save_timestamps":{"qa":"201912131337","prod":"201912131337","dev":"201912131337"}}},"9":{"labels":"","advconfig_optout":"yes","loadrule_join_operator":"any","multipleLoadRules":"3,4","scope":"3,4","status":"active","_multipleLoadRules":"3,4","id":"9","title":"Tealium Custom Container","tag_name":"Tealium Custom Container","loadrule":"3,4","advconfig_loadtype":"","advconfig_bundle":"no","advconfig_wait":"yes","selectedTargets":{"qa":"true","dev":"true","prod":"true"},"sort":"7","new_flag":"true","notes":"","publish_revisions":{"last_modified":"201912131337","svr_save_timestamps":{"prod":"201912131337","dev":"201912131337","qa":"201912131337"}},"_id":"9","tag_id":"20010","advconfig_src":"","advconfig_send":"yes","publishedTargets":"dev"},"10":{"publish_revisions":{"svr_save_timestamps":{"dev":"201912131337","prod":"201912131337","qa":"201912131337"},"last_modified":"201912131337"},"tag_id":"1177","_id":"10","selectedTargets":{"qa":"true","prod":"true","dev":"true"},"new_flag":"true","sort":"8","notes":"","advconfig_send":"yes","publishedTargets":"dev","config_customerid":"","config_enable_ecom":"off","config_tag_id":"","advconfig_src":"","loadrule_join_operator":"all","scope":"6","status":"active","labels":"","advconfig_optout":"yes","loadrule":"6","tag_name":"TheAdex","advconfig_loadtype":"","advconfig_bundle":"no","advconfig_wait":"yes","id":"10","title":"TheAdex"},"13":{"selectedTargets":{"qa":"true","dev":"true","prod":"true"},"new_flag":"true","sort":"9","notes":"","publish_revisions":{"svr_save_timestamps":{"qa":"201912131337","prod":"201912131337","dev":"201912131337"},"last_modified":"201912131337"},"config_account":"","_id":"13","tag_id":"3108","advconfig_src":"","publishedTargets":"dev","advconfig_send":"yes","labels":"","config_baseurl":"//static.criteo.net/js/ld/ld.js","advconfig_optout":"yes","loadrule_join_operator":"all","multipleLoadRules":"8,7","scope":"8,7","_multipleLoadRules":"8,7","status":"active","id":"13","title":"Criteo OneTag","loadrule":"8,7","config_eventname":"None","tag_name":"Criteo OneTag","advconfig_loadtype":"","advconfig_wait":"yes","advconfig_bundle":"yes"},"14":{"advconfig_loadtype":"","config_cachevar":"","tag_name":"Tealium Generic Tag","config_qsp":"&amp;","loadrule":"8","config_cachebust":"enabled","advconfig_wait":"yes","title":"Tealium Generic Tag","config_securebaseurl":"","loadrule_join_operator":"all","config_staticparams":"","status":"active","scope":"8","advconfig_optout":"yes","publishedTargets":"dev","config_qs":"?","config_kvp":"=","tag_id":"20067","selectedTargets":{"qa":"true","prod":"true","dev":"true"},"notes":"","new_flag":"true","advconfig_bundle":"no","id":"14","config_requestscriptonce":"disabled","labels":"","config_baseurl":"https://www.germantag.de/supertracker.js","advconfig_send":"yes","advconfig_src":"","publish_revisions":{"last_modified":"201912131440","svr_save_timestamps":{"dev":"201912131440","prod":"201912131442","qa":"201912131440"}},"config_tagtype":"script","_id":"14","sort":"10"}},"test":{},"define":{"75":{"_id":"75","type":"js","labels":"","name":"tealium_datasource","description":"","title":""},"152":{"description":"","title":"","type":"js","labels":"","name":"consent_vendors_with_opt_in","_id":"152"},"153":{"type":"js","labels":"","name":"ut.event","description":"","title":"","_id":"153"},"154":{"_id":"154","name":"Account Value Strings","type":"va","description":"Should contain account numbers and their value band","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"5217","origin_name":"Account Value Strings","origin_type":"property_lists","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"155":{"_id":"155","name":"Active browser type","type":"va","description":"The browser actively being used by the visitor","context":"current_visit","imported":"AudienceStream","settings":{"origin_id":"44","origin_name":"Active browser type","origin_type":"properties","origin_context":"current_visit","account":"services-caleb","profileid":"main"}},"156":{"_id":"156","name":"Active browser version","type":"va","description":"The browser version actively being used by the visitor","context":"current_visit","imported":"AudienceStream","settings":{"origin_id":"48","origin_name":"Active browser version","origin_type":"properties","origin_context":"current_visit","account":"services-caleb","profileid":"main"}},"157":{"_id":"157","name":"Active device","type":"va","description":"The device actively being used by the visitor","context":"current_visit","imported":"AudienceStream","settings":{"origin_id":"46","origin_name":"Active device","origin_type":"properties","origin_context":"current_visit","account":"services-caleb","profileid":"main"}},"158":{"_id":"158","name":"Active operating system","type":"va","description":"The operating system actively being used by the visitor","context":"current_visit","imported":"AudienceStream","settings":{"origin_id":"45","origin_name":"Active operating system","origin_type":"properties","origin_context":"current_visit","account":"services-caleb","profileid":"main"}},"159":{"_id":"159","name":"Active platform","type":"va","description":"The platform actively being used by the visitor","context":"current_visit","imported":"AudienceStream","settings":{"origin_id":"47","origin_name":"Active platform","origin_type":"properties","origin_context":"current_visit","account":"services-caleb","profileid":"main"}},"160":{"_id":"160","name":"Average visit duration in minutes","type":"va","description":"Average visit duration in minutes","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"26","origin_name":"Average visit duration in minutes","origin_type":"metrics","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"161":{"_id":"161","name":"Average visits per week","type":"va","description":"Average visits per week","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"29","origin_name":"Average visits per week","origin_type":"metrics","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"162":{"_id":"162","name":"Batch Tester","type":"va","description":"Testing the batch webhook","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"5189","origin_name":"Batch Tester","origin_type":"badges","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"163":{"_id":"163","name":"Blue","type":"va","description":"","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"5067","origin_name":"Blue","origin_type":"badges","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"164":{"_id":"164","name":"Brown","type":"va","description":"","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"5055","origin_name":"Brown","origin_type":"badges","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"165":{"_id":"165","name":"Cookie Sync ID - Assigned Rule","type":"va","description":"","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"5075","origin_name":"Cookie Sync ID - Assigned Rule","origin_type":"properties","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"166":{"_id":"166","name":"Cookie Sync ID - No Rule","type":"va","description":"","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"5079","origin_name":"Cookie Sync ID - No Rule","origin_type":"properties","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"167":{"_id":"167","name":"Counter (Last Seen)","type":"va","description":"","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"5193","origin_name":"Counter (Last Seen)","origin_type":"properties","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"168":{"_id":"168","name":"Direct visit","type":"va","description":"The user navigated directly to the site","context":"current_visit","imported":"AudienceStream","settings":{"origin_id":"14","origin_name":"Direct visit","origin_type":"flags","origin_context":"current_visit","account":"services-caleb","profileid":"main"}},"169":{"_id":"169","name":"Entry URL","type":"va","description":"URL of the first page visited","context":"current_visit","imported":"AudienceStream","settings":{"origin_id":"5","origin_name":"Entry URL","origin_type":"properties","origin_context":"current_visit","account":"services-caleb","profileid":"main"}},"170":{"_id":"170","name":"Event count","type":"va","description":"Total number of events in visit","context":"current_visit","imported":"AudienceStream","settings":{"origin_id":"7","origin_name":"Event count","origin_type":"metrics","origin_context":"current_visit","account":"services-caleb","profileid":"main"}},"171":{"_id":"171","name":"Exit URL","type":"va","description":"URL of the last page visited","context":"current_visit","imported":"AudienceStream","settings":{"origin_id":"6","origin_name":"Exit URL","origin_type":"properties","origin_context":"current_visit","account":"services-caleb","profileid":"main"}},"172":{"_id":"172","name":"Fan","type":"va","description":"More than two total visits and more direct visits than refers","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"30","origin_name":"Fan","origin_type":"badges","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"173":{"_id":"173","name":"First 'test_value' only","type":"va","description":"","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"5183","origin_name":"First 'test_value' only","origin_type":"properties","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"174":{"_id":"174","name":"First visit","type":"va","description":"Date of first visit","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"23","origin_name":"First visit","origin_type":"dates","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"175":{"_id":"175","name":"Frequent visitor","type":"va","description":"Two or more average visits per week","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"31","origin_name":"Frequent visitor","origin_type":"badges","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"176":{"_id":"176","name":"Full entry URL (with attribution)","type":"va","description":"","context":"current_visit","imported":"AudienceStream","settings":{"origin_id":"5090","origin_name":"Full entry URL (with attribution)","origin_type":"properties","origin_context":"current_visit","account":"services-caleb","profileid":"main"}},"177":{"_id":"177","name":"Google GID","type":"va","description":"From the Google Cookie Match, saved here as string ","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"5038","origin_name":"Google GID","origin_type":"properties","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"178":{"_id":"178","name":"Green","type":"va","description":"","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"5063","origin_name":"Green","origin_type":"badges","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"179":{"_id":"179","name":"GUID - Compromised Profile","type":"va","description":"","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"5179","origin_name":"GUID - Compromised Profile","origin_type":"badges","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"180":{"_id":"180","name":"GUID - Compromised profile and a new visit [bln]","type":"va","description":"","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"5340","origin_name":"GUID - Compromised profile and a new visit [bln]","origin_type":"flags","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"181":{"_id":"181","name":"GUID - Count Has Changed This Visit","type":"va","description":"","context":"current_visit","imported":"AudienceStream","settings":{"origin_id":"5332","origin_name":"GUID - Count Has Changed This Visit","origin_type":"flags","origin_context":"current_visit","account":"services-caleb","profileid":"main"}},"182":{"_id":"182","name":"GUID - Count of seen [num]","type":"va","description":"","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"5175","origin_name":"GUID - Count of seen [num]","origin_type":"metrics","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"183":{"_id":"183","name":"GUID - Healthy Profile","type":"va","description":"","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"5177","origin_name":"GUID - Healthy Profile","origin_type":"badges","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"184":{"_id":"184","name":"GUID - Incomplete Profile","type":"va","description":"Should not use this profile, it's been used on a shared device and only contains partial information","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"5334","origin_name":"GUID - Incomplete Profile","origin_type":"badges","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"185":{"_id":"185","name":"GUID - Last seen [str]","type":"va","description":"","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"5169","origin_name":"GUID - Last seen [str]","origin_type":"properties","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"186":{"_id":"186","name":"GUID - None","type":"va","description":"","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"5181","origin_name":"GUID - None","origin_type":"badges","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"187":{"_id":"187","name":"Has Cookie Sync ID - With Rule","type":"va","description":"","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"5077","origin_name":"Has Cookie Sync ID - With Rule","origin_type":"badges","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"188":{"_id":"188","name":"Has Cookie Sync ID - Without Rule","type":"va","description":"","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"5081","origin_name":"Has Cookie Sync ID - Without Rule","origin_type":"badges","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"189":{"_id":"189","name":"Hyphen Lover","type":"va","description":"","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"5088","origin_name":"Hyphen Lover","origin_type":"badges","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"190":{"_id":"190","name":"Import - Age","type":"va","description":"","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"5165","origin_name":"Import - Age","origin_type":"metrics","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"191":{"_id":"191","name":"Import - Alpha","type":"va","description":"","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"5161","origin_name":"Import - Alpha","origin_type":"properties","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"192":{"_id":"192","name":"Import - Bool","type":"va","description":"","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"5167","origin_name":"Import - Bool","origin_type":"flags","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"193":{"_id":"193","name":"Import - Row Number","type":"va","description":"","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"5163","origin_name":"Import - Row Number","origin_type":"metrics","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"194":{"_id":"194","name":"Last 'test_value'","type":"va","description":"","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"5187","origin_name":"Last 'test_value'","origin_type":"properties","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"195":{"_id":"195","name":"Last conversion partner name","type":"va","description":"","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"5034","origin_name":"Last conversion partner name","origin_type":"properties","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"196":{"_id":"196","name":"Last event time","type":"va","description":"","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"5318","origin_name":"Last event time","origin_type":"dates","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"197":{"_id":"197","name":"Last event URL","type":"va","description":"Last event URL for visitor","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"17","origin_name":"Last event URL","origin_type":"properties","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"198":{"_id":"198","name":"Last UDO String","type":"va","description":"","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"5145","origin_name":"Last UDO String","origin_type":"properties","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"199":{"_id":"199","name":"Last visit","type":"va","description":"Date of last visit","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"24","origin_name":"Last visit","origin_type":"dates","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"200":{"_id":"200","name":"Last-seen tealium_event [str]","type":"va","description":"","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"5324","origin_name":"Last-seen tealium_event [str]","origin_type":"properties","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"201":{"_id":"201","name":"Last-seen Trace Id","type":"va","description":"","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"5320","origin_name":"Last-seen Trace Id","origin_type":"properties","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"202":{"_id":"202","name":"Lifetime browser types used (favorite)","type":"va","description":"Captures the favorite metric for Metric Set: Lifetime browser types used","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"56","origin_name":"Lifetime browser types used (favorite)","origin_type":"properties","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"203":{"_id":"203","name":"Lifetime browser versions used (favorite)","type":"va","description":"Captures the favorite metric for Metric Set: Lifetime browser versions used","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"62","origin_name":"Lifetime browser versions used (favorite)","origin_type":"properties","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"204":{"_id":"204","name":"Lifetime devices used (favorite)","type":"va","description":"Captures the favorite metric for Metric Set: Lifetime devices used","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"54","origin_name":"Lifetime devices used (favorite)","origin_type":"properties","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"205":{"_id":"205","name":"Lifetime event count","type":"va","description":"Total number of events triggered by user","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"22","origin_name":"Lifetime event count","origin_type":"metrics","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"206":{"_id":"206","name":"Lifetime operating systems used (favorite)","type":"va","description":"Captures the favorite metric for Metric Set: Lifetime operating systems used","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"58","origin_name":"Lifetime operating systems used (favorite)","origin_type":"properties","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"207":{"_id":"207","name":"Lifetime order total","type":"va","description":"","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"5028","origin_name":"Lifetime order total","origin_type":"metrics","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"208":{"_id":"208","name":"Lifetime order total by partner name (favorite)","type":"va","description":"Captures the favorite number for Tally: Lifetime order total by partner name","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"5031","origin_name":"Lifetime order total by partner name (favorite)","origin_type":"properties","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"209":{"_id":"209","name":"Lifetime platforms used (favorite)","type":"va","description":"Captures the favorite metric for Metric Set: Lifetime platforms used","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"60","origin_name":"Lifetime platforms used (favorite)","origin_type":"properties","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"210":{"_id":"210","name":"LIfetime Test Stream Values (favorite)","type":"va","description":"Captures the favorite number for Tally: LIfetime Test Stream Values","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"5132","origin_name":"LIfetime Test Stream Values (favorite)","origin_type":"properties","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"211":{"_id":"211","name":"Lifetime visit count","type":"va","description":"Total number of times user has visited site","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"21","origin_name":"Lifetime visit count","origin_type":"metrics","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"212":{"_id":"212","name":"Light Blue","type":"va","description":"","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"5065","origin_name":"Light Blue","origin_type":"badges","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"213":{"_id":"213","name":"Most Recent GCLID","type":"va","description":"This setup ignores the edge case where a user could click two ads from this campaign within the same session - it will only send the last GCLID in those cases.","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"5312","origin_name":"Most Recent GCLID","origin_type":"properties","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"214":{"_id":"214","name":"Most Recent GCLID has changed this visit","type":"va","description":"","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"5314","origin_name":"Most Recent GCLID has changed this visit","origin_type":"flags","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"215":{"_id":"215","name":"NO BOUNCERS HERE","type":"va","description":"","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"5322","origin_name":"NO BOUNCERS HERE","origin_type":"badges","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"216":{"_id":"216","name":"Optin (imported)","type":"va","description":"","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"5149","origin_name":"Optin (imported)","origin_type":"properties","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"217":{"_id":"217","name":"Orange","type":"va","description":"","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"5059","origin_name":"Orange","origin_type":"badges","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"218":{"_id":"218","name":"Pink","type":"va","description":"","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"5069","origin_name":"Pink","origin_type":"badges","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"219":{"_id":"219","name":"Product Prices Purchases - Last Order Imported (favorite)","type":"va","description":"Captures the favorite number for Tally: Product Prices Purchases - Last Order Imported","context":"current_visit","imported":"AudienceStream","settings":{"origin_id":"5120","origin_name":"Product Prices Purchases - Last Order Imported (favorite)","origin_type":"properties","origin_context":"current_visit","account":"services-caleb","profileid":"main"}},"220":{"_id":"220","name":"Product Purchase Count (Lifetime) (favorite)","type":"va","description":"Captures the favorite number for Tally: Product Purchase Count (Lifetime)","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"5118","origin_name":"Product Purchase Count (Lifetime) (favorite)","origin_type":"properties","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"221":{"_id":"221","name":"Red","type":"va","description":"","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"5057","origin_name":"Red","origin_type":"badges","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"222":{"_id":"222","name":"Referred visit","type":"va","description":"The user was referred from another site","context":"current_visit","imported":"AudienceStream","settings":{"origin_id":"13","origin_name":"Referred visit","origin_type":"flags","origin_context":"current_visit","account":"services-caleb","profileid":"main"}},"223":{"_id":"223","name":"Referrer","type":"va","description":"","context":"current_visit","imported":"AudienceStream","settings":{"origin_id":"5092","origin_name":"Referrer","origin_type":"properties","origin_context":"current_visit","account":"services-caleb","profileid":"main"}},"224":{"_id":"224","name":"Returning visitor","type":"va","description":"Return visitor","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"27","origin_name":"Returning visitor","origin_type":"flags","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"225":{"_id":"225","name":"Spend per Product (Lifetime) (favorite)","type":"va","description":"Captures the favorite number for Tally: Spend per Product (Lifetime)","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"5122","origin_name":"Spend per Product (Lifetime) (favorite)","origin_type":"properties","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"226":{"_id":"226","name":"Tealium Test Visit","type":"va","description":"Set via query parameter &quot;tealium_test_visit=true&quot;","context":"current_visit","imported":"AudienceStream","settings":{"origin_id":"5125","origin_name":"Tealium Test Visit","origin_type":"flags","origin_context":"current_visit","account":"services-caleb","profileid":"main"}},"227":{"_id":"227","name":"Tealium Visitor ID (Last Seen)","type":"va","description":"3rd party wins if present","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"5129","origin_name":"Tealium Visitor ID (Last Seen)","origin_type":"properties","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"228":{"_id":"228","name":"tealium_cf_visit_ttl","type":"va","description":"","context":"current_visit","imported":"AudienceStream","settings":{"origin_id":"82","origin_name":"tealium_cf_visit_ttl","origin_type":"properties","origin_context":"current_visit","account":"services-caleb","profileid":"main"}},"229":{"_id":"229","name":"Test Date","type":"va","description":"Expects format 2020-08-27T13:13:47.395Z ","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"5195","origin_name":"Test Date","origin_type":"dates","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"230":{"_id":"230","name":"Test Tally (favorite)","type":"va","description":"Captures the favorite number for Tally: Test Tally","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"5093","origin_name":"Test Tally (favorite)","origin_type":"properties","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"231":{"_id":"231","name":"test_tiq_string values (favorite)","type":"va","description":"Captures the favorite number for Tally: test_tiq_string values","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"5136","origin_name":"test_tiq_string values (favorite)","origin_type":"properties","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"232":{"_id":"232","name":"test_udo_string values (favorite)","type":"va","description":"Captures the favorite number for Tally: test_udo_string values","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"5138","origin_name":"test_udo_string values (favorite)","origin_type":"properties","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"233":{"_id":"233","name":"Tester","type":"va","description":"","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"5141","origin_name":"Tester","origin_type":"badges","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"234":{"_id":"234","name":"Total direct visits","type":"va","description":"Total direct visits","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"15","origin_name":"Total direct visits","origin_type":"metrics","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"235":{"_id":"235","name":"Total referred visits","type":"va","description":"Total referred visits","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"16","origin_name":"Total referred visits","origin_type":"metrics","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"236":{"_id":"236","name":"Total time spent on site in minutes","type":"va","description":"Sum duration of all user visits","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"25","origin_name":"Total time spent on site in minutes","origin_type":"metrics","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"237":{"_id":"237","name":"Unbadged","type":"va","description":"The visitor has not been assigned any badges","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"32","origin_name":"Unbadged","origin_type":"badges","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"238":{"_id":"238","name":"Visit duration","type":"va","description":"Visit duration in minutes","context":"current_visit","imported":"AudienceStream","settings":{"origin_id":"12","origin_name":"Visit duration","origin_type":"metrics","origin_context":"current_visit","account":"services-caleb","profileid":"main"}},"239":{"_id":"239","name":"Visit end","type":"va","description":"Visit end date","context":"current_visit","imported":"AudienceStream","settings":{"origin_id":"11","origin_name":"Visit end","origin_type":"dates","origin_context":"current_visit","account":"services-caleb","profileid":"main"}},"240":{"_id":"240","name":"Visit start","type":"va","description":"Visit start date","context":"current_visit","imported":"AudienceStream","settings":{"origin_id":"10","origin_name":"Visit start","origin_type":"dates","origin_context":"current_visit","account":"services-caleb","profileid":"main"}},"241":{"_id":"241","name":"Weeks since first visit","type":"va","description":"Weeks elapsed since first visit","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"28","origin_name":"Weeks since first visit","origin_type":"metrics","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"242":{"_id":"242","name":"Weeks since first visit temp","type":"va","description":"Temporary store for computer value","context":"current_visit","imported":"AudienceStream","settings":{"origin_id":"80","origin_name":"Weeks since first visit temp","origin_type":"metrics","origin_context":"current_visit","account":"services-caleb","profileid":"main"}},"243":{"_id":"243","name":"Yellow","type":"va","description":"","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"5061","origin_name":"Yellow","origin_type":"badges","origin_context":"visitor","account":"services-caleb","profileid":"main"}}},"datacloud_merge":"true","datacloud_profile_name":"main","datacloud_revision":"1625226277606"}
