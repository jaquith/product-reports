{"revision":"201908291339","importable_library":"NONE","test":{},"lastmanageid":"3","publish":{"smartFTP":{"qa":"preMCDN","prod":"preMCDN","dev":"preMCDN"},"minify":"yes","enable_sync_loader":"","enable_utf8_encoding":"yes"},"publish_history":{"201908291343":{"size":"136","status":"qa,dev","title":"Version - 2019/08/29 13:43","201908291343":{"publishedTags":"[ \"1\" , \"2\"]","operator":"caleb.jaquith@tealium.com","lastmanageid":"3","status":"qa,dev","action":"Published to dev","notes":"Force","publishedConsent":"[ ]","versionorigin":"201908291339","linkedProfiles":"{ }","publishedExtensions":"[ \"1\" , \"2\"]","datacloudLinkedProfiles":"{&quot;main&quot;:{&quot;rev&quot;:&quot;1566904909656&quot;,&quot;env&quot;:&quot;AudienceStream&quot;}}","history":"[ { \"action\" : \"updated_tag\" , \"data\" : { \"id\" : 2 , \"tag_name\" : \"Adobe Analytics AppMeasurement for JS\" , \"name\" : \"V1.0 Adobe Analytics AppMeasurement for Newsroom &amp; Blog\" , \"kind\" : \"Tag\" , \"operation\" : \"updated\" , \"container\" : \"manage_content_156708537095200084\" , \"tab_name\" : \"manage\"}} , { \"action\" : \"updated_tag\" , \"data\" : { \"id\" : 1 , \"tag_name\" : \"Adobe Analytics AppMeasurement for JS\" , \"name\" : \"V1.0 Adobe Analytics AppMeasurement for HilfeCenter\" , \"kind\" : \"Tag\" , \"operation\" : \"updated\" , \"container\" : \"manage_content_156708537094800083\" , \"tab_name\" : \"manage\"}}]","lastcustomizeid":"0","title":"Version - 2019/08/29 13:43"}},"201908291329":{"size":"236","201908291329":{"title":"Version 2019.08.29.1329","lastcustomizeid":"0","history":"[ ]","datacloudLinkedProfiles":"{&quot;main&quot;:{&quot;rev&quot;:&quot;1566904909656&quot;,&quot;env&quot;:&quot;AudienceStream&quot;}}","linkedProfiles":"{ }","publishedExtensions":"[ \"1\" , \"2\"]","versionorigin":"","publishedConsent":"[ ]","notes":"Copied from: 1und1/microsites/201908280828","action":"Published to dev","status":"prod,qa,dev","lastmanageid":"3","publishedTags":"[ \"1\" , \"2\"]","operator":"caleb.jaquith@tealium.com"},"status":"prod,qa,dev","title":"Version 2019.08.29.1329"},"201908291339":{"status":"Not Published","size":"136","201908291339":{"lastmanageid":"3","status":"qa,dev","operator":"caleb.jaquith@tealium.com","publishedTags":"[ \"1\" , \"2\"]","notes":"Deactivate bundling","versionorigin":"201908291329","publishedConsent":"[ ]","action":"Published to dev","linkedProfiles":"{ }","publishedExtensions":"[ \"1\" , \"2\"]","title":"Version - 2019/08/29 13:39","history":"[ { \"action\" : \"updated_tag\" , \"data\" : { \"id\" : 2 , \"tag_name\" : \"Adobe Analytics AppMeasurement for JS\" , \"name\" : \"V1.0 Adobe Analytics AppMeasurement for Newsroom &amp; Blog\" , \"kind\" : \"Tag\" , \"operation\" : \"updated\" , \"container\" : \"manage_content_156708537095200084\" , \"tab_name\" : \"manage\"}} , { \"action\" : \"updated_tag\" , \"data\" : { \"id\" : 1 , \"tag_name\" : \"Adobe Analytics AppMeasurement for JS\" , \"name\" : \"V1.0 Adobe Analytics AppMeasurement for HilfeCenter\" , \"kind\" : \"Tag\" , \"operation\" : \"updated\" , \"container\" : \"manage_content_156708537094800083\" , \"tab_name\" : \"manage\"}}]","lastcustomizeid":"0","datacloudLinkedProfiles":"{&quot;main&quot;:{&quot;rev&quot;:&quot;1566904909656&quot;,&quot;env&quot;:&quot;AudienceStream&quot;}}"},"title":"Version - 2019/08/29 13:39"},"201908291327":{"201908291327":{"status":"prod,qa,dev","lastmanageid":"","operator":"caleb.jaquith@tealium.com","publishedTags":"[ ]","notes":"Initial publish on profile creation","publishedConsent":"","versionorigin":"","action":"Published to dev","linkedProfiles":"{ }","publishedExtensions":"[ ]","history":"","lastcustomizeid":"","title":"Initial publish","datacloudLinkedProfiles":"{}"},"size":"26","status":"Not Published","title":"Initial publish"}},"label_relationships":null,"linkedProfiles":"{ }","profile":"1und1-microsites","profile_action_type":"SaveAs","account":"services-caleb","history":"[ { \"action\" : \"updated_tag\" , \"data\" : { \"id\" : 2 , \"tag_name\" : \"Adobe Analytics AppMeasurement for JS\" , \"name\" : \"V1.0 Adobe Analytics AppMeasurement for Newsroom &amp; Blog\" , \"kind\" : \"Tag\" , \"operation\" : \"updated\" , \"container\" : \"manage_content_156708537095200084\" , \"tab_name\" : \"manage\"}} , { \"action\" : \"updated_tag\" , \"data\" : { \"id\" : 1 , \"tag_name\" : \"Adobe Analytics AppMeasurement for JS\" , \"name\" : \"V1.0 Adobe Analytics AppMeasurement for HilfeCenter\" , \"kind\" : \"Tag\" , \"operation\" : \"updated\" , \"container\" : \"manage_content_156708537094800083\" , \"tab_name\" : \"manage\"}}]","lastcustomizeid":"0","manage":{"1":{"id":"1","config_sobject":"s","advconfig_bundle":"no","labels":"","config_tracklinks":"true","config_namespace":"1und1internetag","advconfig_src":"","advconfig_send":"yes","map":{"1":{"variable":"prop7, eVar7","type":"dom","key":"url"},"2":{"variable":"server","type":"dom","key":"domain"},"3":{"key":"page.name","dsID":"80","variable":"prop1, pageName","type":"js"},"4":{"key":"page.area","dsID":"81","type":"js","variable":"prop5"},"5":{"variable":"prop6","type":"js","dsID":"82","key":"page.shopname"},"6":{"dsID":"83","key":"page.category0","type":"js","variable":"prop10"},"7":{"key":"page.category1","dsID":"84","type":"js","variable":"prop11"},"8":{"dsID":"85","key":"page.category2","type":"js","variable":"prop12"}},"sort":"0","publish_revisions":{"svr_save_timestamps":{"qa":"201908291343","dev":"201908291343","prod":"201908280828"},"last_modified":"201908291343"},"_id":"1","config_tagdevicetype":"standard","title":"V1.0 Adobe Analytics AppMeasurement for HilfeCenter","advconfig_loadtype":"","loadrule":"2","tag_name":"Adobe Analytics AppMeasurement for JS","advconfig_wait":"yes","config_server":"odc.1und1.de","config_reportsuite":"iaghclive","advconfig_optout":"yes","config_serversecure":"odc.1und1.de","loadrule_join_operator":"all","status":"active","scope":"2","config_tagversion":"am2150","config_internalfilters":"javascript:,.accshops.server.lan,.1und1.de,.1und1.at,.1and1.com,.1and1.ca,.1and1.co.uk,.1and1.es,.1and1.fr,.1and1.pl,.1and1.it,.1und1.info,.1and1.mx,.gmx.de,.web.de,united.domain,cinetic.de,schlund.de","publishedTargets":"dev","selectedTargets":{"qa":"true","dev":"true","prod":"true"},"config_runclearvars":"yes","config_detectserial":"no","notes":"-","new_flag":"true","config_cloudid":"","tag_id":"19063"},"2":{"config_cloudid":"","tag_id":"19063","selectedTargets":{"qa":"true","prod":"true","dev":"true"},"config_runclearvars":"yes","notes":"-","config_detectserial":"no","new_flag":"true","config_internalfilters":"javascript:,.accshops.server.lan,.1und1.de,.1und1.at,.1and1.com,.1and1.ca,.1and1.co.uk,.1and1.es,.1and1.fr,.1and1.pl,.1and1.it,.1und1.info,.1and1.mx,.gmx.de,.web.de,united.domain,cinetic.de,schlund.de,1und1.de","publishedTargets":"dev","config_tagversion":"am2150","loadrule_join_operator":"all","status":"active","scope":"4","config_reportsuite":"iagcommunitylive","config_server":"odc.1und1.de","config_serversecure":"odc.1und1.de","advconfig_optout":"yes","advconfig_loadtype":"","loadrule":"4","tag_name":"Adobe Analytics AppMeasurement for JS","advconfig_wait":"yes","config_tagdevicetype":"standard","title":"V1.0 Adobe Analytics AppMeasurement for Newsroom &amp; Blog","publish_revisions":{"svr_save_timestamps":{"qa":"201908291343","prod":"201908231146","dev":"201908291343"},"last_modified":"201908291343"},"_id":"2","map":{"1":{"type":"dom","variable":"prop7","key":"url"},"2":{"key":"domain","variable":"server","type":"dom"},"3":{"dsID":"80","key":"page.name","variable":"prop1, pageName","type":"js"},"4":{"variable":"prop5","type":"js","dsID":"81","key":"page.area"},"5":{"dsID":"82","key":"page.shopname","type":"js","variable":"prop6"}},"sort":"1","advconfig_send":"yes","copiedFromTag":"1","advconfig_src":"","config_tracklinks":"true","config_namespace":"1und1internetag","labels":"","config_sobject":"s","advconfig_bundle":"no","id":"2"}},"define":{"80":{"_id":"80","title":"","description":"","name":"page.name","labels":"","type":"js"},"81":{"labels":"","type":"js","name":"page.area","description":"","title":"","_id":"81"},"82":{"type":"js","labels":"","name":"page.shopname","description":"","title":"","_id":"82"},"83":{"_id":"83","name":"page.category0","labels":"","type":"js","title":"","description":""},"84":{"_id":"84","description":"","title":"","type":"js","labels":"","name":"page.category1"},"85":{"description":"","title":"","type":"js","labels":"","name":"page.category2","_id":"85"},"86":{"_id":"86","description":"","title":"","type":"js","labels":"","name":"datalayer_event"},"87":{"_id":"87","name":"Account Value Strings","type":"va","description":"Should contain account numbers and their value band","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"5217","origin_name":"Account Value Strings","origin_type":"property_lists","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"88":{"_id":"88","name":"Active browser type","type":"va","description":"The browser actively being used by the visitor","context":"current_visit","imported":"AudienceStream","settings":{"origin_id":"44","origin_name":"Active browser type","origin_type":"properties","origin_context":"current_visit","account":"services-caleb","profileid":"main"}},"89":{"_id":"89","name":"Active browser version","type":"va","description":"The browser version actively being used by the visitor","context":"current_visit","imported":"AudienceStream","settings":{"origin_id":"48","origin_name":"Active browser version","origin_type":"properties","origin_context":"current_visit","account":"services-caleb","profileid":"main"}},"90":{"_id":"90","name":"Active device","type":"va","description":"The device actively being used by the visitor","context":"current_visit","imported":"AudienceStream","settings":{"origin_id":"46","origin_name":"Active device","origin_type":"properties","origin_context":"current_visit","account":"services-caleb","profileid":"main"}},"91":{"_id":"91","name":"Active operating system","type":"va","description":"The operating system actively being used by the visitor","context":"current_visit","imported":"AudienceStream","settings":{"origin_id":"45","origin_name":"Active operating system","origin_type":"properties","origin_context":"current_visit","account":"services-caleb","profileid":"main"}},"92":{"_id":"92","name":"Active platform","type":"va","description":"The platform actively being used by the visitor","context":"current_visit","imported":"AudienceStream","settings":{"origin_id":"47","origin_name":"Active platform","origin_type":"properties","origin_context":"current_visit","account":"services-caleb","profileid":"main"}},"93":{"_id":"93","name":"Average visit duration in minutes","type":"va","description":"Average visit duration in minutes","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"26","origin_name":"Average visit duration in minutes","origin_type":"metrics","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"94":{"_id":"94","name":"Average visits per week","type":"va","description":"Average visits per week","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"29","origin_name":"Average visits per week","origin_type":"metrics","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"95":{"_id":"95","name":"Batch Tester","type":"va","description":"Testing the batch webhook","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"5189","origin_name":"Batch Tester","origin_type":"badges","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"96":{"_id":"96","name":"Blue","type":"va","description":"","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"5067","origin_name":"Blue","origin_type":"badges","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"97":{"_id":"97","name":"Brown","type":"va","description":"","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"5055","origin_name":"Brown","origin_type":"badges","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"98":{"_id":"98","name":"Cookie Sync ID - Assigned Rule","type":"va","description":"","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"5075","origin_name":"Cookie Sync ID - Assigned Rule","origin_type":"properties","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"99":{"_id":"99","name":"Cookie Sync ID - No Rule","type":"va","description":"","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"5079","origin_name":"Cookie Sync ID - No Rule","origin_type":"properties","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"100":{"_id":"100","name":"Counter (Last Seen)","type":"va","description":"","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"5193","origin_name":"Counter (Last Seen)","origin_type":"properties","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"101":{"_id":"101","name":"Direct visit","type":"va","description":"The user navigated directly to the site","context":"current_visit","imported":"AudienceStream","settings":{"origin_id":"14","origin_name":"Direct visit","origin_type":"flags","origin_context":"current_visit","account":"services-caleb","profileid":"main"}},"102":{"_id":"102","name":"Entry URL","type":"va","description":"URL of the first page visited","context":"current_visit","imported":"AudienceStream","settings":{"origin_id":"5","origin_name":"Entry URL","origin_type":"properties","origin_context":"current_visit","account":"services-caleb","profileid":"main"}},"103":{"_id":"103","name":"Event count","type":"va","description":"Total number of events in visit","context":"current_visit","imported":"AudienceStream","settings":{"origin_id":"7","origin_name":"Event count","origin_type":"metrics","origin_context":"current_visit","account":"services-caleb","profileid":"main"}},"104":{"_id":"104","name":"Exit URL","type":"va","description":"URL of the last page visited","context":"current_visit","imported":"AudienceStream","settings":{"origin_id":"6","origin_name":"Exit URL","origin_type":"properties","origin_context":"current_visit","account":"services-caleb","profileid":"main"}},"105":{"_id":"105","name":"Fan","type":"va","description":"More than two total visits and more direct visits than refers","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"30","origin_name":"Fan","origin_type":"badges","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"106":{"_id":"106","name":"First 'test_value' only","type":"va","description":"","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"5183","origin_name":"First 'test_value' only","origin_type":"properties","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"107":{"_id":"107","name":"First visit","type":"va","description":"Date of first visit","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"23","origin_name":"First visit","origin_type":"dates","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"108":{"_id":"108","name":"Frequent visitor","type":"va","description":"Two or more average visits per week","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"31","origin_name":"Frequent visitor","origin_type":"badges","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"109":{"_id":"109","name":"Full entry URL (with attribution)","type":"va","description":"","context":"current_visit","imported":"AudienceStream","settings":{"origin_id":"5090","origin_name":"Full entry URL (with attribution)","origin_type":"properties","origin_context":"current_visit","account":"services-caleb","profileid":"main"}},"110":{"_id":"110","name":"Google GID","type":"va","description":"From the Google Cookie Match, saved here as string ","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"5038","origin_name":"Google GID","origin_type":"properties","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"111":{"_id":"111","name":"Green","type":"va","description":"","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"5063","origin_name":"Green","origin_type":"badges","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"112":{"_id":"112","name":"GUID - Compromised Profile","type":"va","description":"","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"5179","origin_name":"GUID - Compromised Profile","origin_type":"badges","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"113":{"_id":"113","name":"GUID - Compromised profile and a new visit [bln]","type":"va","description":"","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"5340","origin_name":"GUID - Compromised profile and a new visit [bln]","origin_type":"flags","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"114":{"_id":"114","name":"GUID - Count Has Changed This Visit","type":"va","description":"","context":"current_visit","imported":"AudienceStream","settings":{"origin_id":"5332","origin_name":"GUID - Count Has Changed This Visit","origin_type":"flags","origin_context":"current_visit","account":"services-caleb","profileid":"main"}},"115":{"_id":"115","name":"GUID - Count of seen [num]","type":"va","description":"","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"5175","origin_name":"GUID - Count of seen [num]","origin_type":"metrics","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"116":{"_id":"116","name":"GUID - Healthy Profile","type":"va","description":"","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"5177","origin_name":"GUID - Healthy Profile","origin_type":"badges","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"117":{"_id":"117","name":"GUID - Incomplete Profile","type":"va","description":"Should not use this profile, it's been used on a shared device and only contains partial information","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"5334","origin_name":"GUID - Incomplete Profile","origin_type":"badges","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"118":{"_id":"118","name":"GUID - Last seen [str]","type":"va","description":"","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"5169","origin_name":"GUID - Last seen [str]","origin_type":"properties","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"119":{"_id":"119","name":"GUID - None","type":"va","description":"","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"5181","origin_name":"GUID - None","origin_type":"badges","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"120":{"_id":"120","name":"Has Cookie Sync ID - With Rule","type":"va","description":"","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"5077","origin_name":"Has Cookie Sync ID - With Rule","origin_type":"badges","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"121":{"_id":"121","name":"Has Cookie Sync ID - Without Rule","type":"va","description":"","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"5081","origin_name":"Has Cookie Sync ID - Without Rule","origin_type":"badges","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"122":{"_id":"122","name":"Hyphen Lover","type":"va","description":"","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"5088","origin_name":"Hyphen Lover","origin_type":"badges","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"123":{"_id":"123","name":"Import - Age","type":"va","description":"","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"5165","origin_name":"Import - Age","origin_type":"metrics","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"124":{"_id":"124","name":"Import - Alpha","type":"va","description":"","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"5161","origin_name":"Import - Alpha","origin_type":"properties","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"125":{"_id":"125","name":"Import - Bool","type":"va","description":"","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"5167","origin_name":"Import - Bool","origin_type":"flags","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"126":{"_id":"126","name":"Import - Row Number","type":"va","description":"","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"5163","origin_name":"Import - Row Number","origin_type":"metrics","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"127":{"_id":"127","name":"Last 'test_value'","type":"va","description":"","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"5187","origin_name":"Last 'test_value'","origin_type":"properties","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"128":{"_id":"128","name":"Last conversion partner name","type":"va","description":"","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"5034","origin_name":"Last conversion partner name","origin_type":"properties","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"129":{"_id":"129","name":"Last event time","type":"va","description":"","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"5318","origin_name":"Last event time","origin_type":"dates","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"130":{"_id":"130","name":"Last event URL","type":"va","description":"Last event URL for visitor","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"17","origin_name":"Last event URL","origin_type":"properties","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"131":{"_id":"131","name":"Last UDO String","type":"va","description":"","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"5145","origin_name":"Last UDO String","origin_type":"properties","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"132":{"_id":"132","name":"Last visit","type":"va","description":"Date of last visit","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"24","origin_name":"Last visit","origin_type":"dates","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"133":{"_id":"133","name":"Last-seen tealium_event [str]","type":"va","description":"","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"5324","origin_name":"Last-seen tealium_event [str]","origin_type":"properties","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"134":{"_id":"134","name":"Last-seen Trace Id","type":"va","description":"","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"5320","origin_name":"Last-seen Trace Id","origin_type":"properties","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"135":{"_id":"135","name":"Lifetime browser types used (favorite)","type":"va","description":"Captures the favorite metric for Metric Set: Lifetime browser types used","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"56","origin_name":"Lifetime browser types used (favorite)","origin_type":"properties","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"136":{"_id":"136","name":"Lifetime browser versions used (favorite)","type":"va","description":"Captures the favorite metric for Metric Set: Lifetime browser versions used","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"62","origin_name":"Lifetime browser versions used (favorite)","origin_type":"properties","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"137":{"_id":"137","name":"Lifetime devices used (favorite)","type":"va","description":"Captures the favorite metric for Metric Set: Lifetime devices used","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"54","origin_name":"Lifetime devices used (favorite)","origin_type":"properties","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"138":{"_id":"138","name":"Lifetime event count","type":"va","description":"Total number of events triggered by user","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"22","origin_name":"Lifetime event count","origin_type":"metrics","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"139":{"_id":"139","name":"Lifetime operating systems used (favorite)","type":"va","description":"Captures the favorite metric for Metric Set: Lifetime operating systems used","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"58","origin_name":"Lifetime operating systems used (favorite)","origin_type":"properties","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"140":{"_id":"140","name":"Lifetime order total","type":"va","description":"","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"5028","origin_name":"Lifetime order total","origin_type":"metrics","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"141":{"_id":"141","name":"Lifetime order total by partner name (favorite)","type":"va","description":"Captures the favorite number for Tally: Lifetime order total by partner name","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"5031","origin_name":"Lifetime order total by partner name (favorite)","origin_type":"properties","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"142":{"_id":"142","name":"Lifetime platforms used (favorite)","type":"va","description":"Captures the favorite metric for Metric Set: Lifetime platforms used","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"60","origin_name":"Lifetime platforms used (favorite)","origin_type":"properties","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"143":{"_id":"143","name":"LIfetime Test Stream Values (favorite)","type":"va","description":"Captures the favorite number for Tally: LIfetime Test Stream Values","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"5132","origin_name":"LIfetime Test Stream Values (favorite)","origin_type":"properties","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"144":{"_id":"144","name":"Lifetime visit count","type":"va","description":"Total number of times user has visited site","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"21","origin_name":"Lifetime visit count","origin_type":"metrics","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"145":{"_id":"145","name":"Light Blue","type":"va","description":"","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"5065","origin_name":"Light Blue","origin_type":"badges","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"146":{"_id":"146","name":"Most Recent GCLID","type":"va","description":"This setup ignores the edge case where a user could click two ads from this campaign within the same session - it will only send the last GCLID in those cases.","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"5312","origin_name":"Most Recent GCLID","origin_type":"properties","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"147":{"_id":"147","name":"Most Recent GCLID has changed this visit","type":"va","description":"","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"5314","origin_name":"Most Recent GCLID has changed this visit","origin_type":"flags","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"148":{"_id":"148","name":"NO BOUNCERS HERE","type":"va","description":"","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"5322","origin_name":"NO BOUNCERS HERE","origin_type":"badges","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"149":{"_id":"149","name":"Optin (imported)","type":"va","description":"","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"5149","origin_name":"Optin (imported)","origin_type":"properties","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"150":{"_id":"150","name":"Orange","type":"va","description":"","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"5059","origin_name":"Orange","origin_type":"badges","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"151":{"_id":"151","name":"Pink","type":"va","description":"","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"5069","origin_name":"Pink","origin_type":"badges","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"152":{"_id":"152","name":"Product Prices Purchases - Last Order Imported (favorite)","type":"va","description":"Captures the favorite number for Tally: Product Prices Purchases - Last Order Imported","context":"current_visit","imported":"AudienceStream","settings":{"origin_id":"5120","origin_name":"Product Prices Purchases - Last Order Imported (favorite)","origin_type":"properties","origin_context":"current_visit","account":"services-caleb","profileid":"main"}},"153":{"_id":"153","name":"Product Purchase Count (Lifetime) (favorite)","type":"va","description":"Captures the favorite number for Tally: Product Purchase Count (Lifetime)","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"5118","origin_name":"Product Purchase Count (Lifetime) (favorite)","origin_type":"properties","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"154":{"_id":"154","name":"Red","type":"va","description":"","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"5057","origin_name":"Red","origin_type":"badges","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"155":{"_id":"155","name":"Referred visit","type":"va","description":"The user was referred from another site","context":"current_visit","imported":"AudienceStream","settings":{"origin_id":"13","origin_name":"Referred visit","origin_type":"flags","origin_context":"current_visit","account":"services-caleb","profileid":"main"}},"156":{"_id":"156","name":"Referrer","type":"va","description":"","context":"current_visit","imported":"AudienceStream","settings":{"origin_id":"5092","origin_name":"Referrer","origin_type":"properties","origin_context":"current_visit","account":"services-caleb","profileid":"main"}},"157":{"_id":"157","name":"Returning visitor","type":"va","description":"Return visitor","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"27","origin_name":"Returning visitor","origin_type":"flags","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"158":{"_id":"158","name":"Spend per Product (Lifetime) (favorite)","type":"va","description":"Captures the favorite number for Tally: Spend per Product (Lifetime)","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"5122","origin_name":"Spend per Product (Lifetime) (favorite)","origin_type":"properties","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"159":{"_id":"159","name":"Tealium Test Visit","type":"va","description":"Set via query parameter &quot;tealium_test_visit=true&quot;","context":"current_visit","imported":"AudienceStream","settings":{"origin_id":"5125","origin_name":"Tealium Test Visit","origin_type":"flags","origin_context":"current_visit","account":"services-caleb","profileid":"main"}},"160":{"_id":"160","name":"Tealium Visitor ID (Last Seen)","type":"va","description":"3rd party wins if present","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"5129","origin_name":"Tealium Visitor ID (Last Seen)","origin_type":"properties","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"161":{"_id":"161","name":"tealium_cf_visit_ttl","type":"va","description":"","context":"current_visit","imported":"AudienceStream","settings":{"origin_id":"82","origin_name":"tealium_cf_visit_ttl","origin_type":"properties","origin_context":"current_visit","account":"services-caleb","profileid":"main"}},"162":{"_id":"162","name":"Test Date","type":"va","description":"Expects format 2020-08-27T13:13:47.395Z ","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"5195","origin_name":"Test Date","origin_type":"dates","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"163":{"_id":"163","name":"Test Tally (favorite)","type":"va","description":"Captures the favorite number for Tally: Test Tally","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"5093","origin_name":"Test Tally (favorite)","origin_type":"properties","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"164":{"_id":"164","name":"test_tiq_string values (favorite)","type":"va","description":"Captures the favorite number for Tally: test_tiq_string values","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"5136","origin_name":"test_tiq_string values (favorite)","origin_type":"properties","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"165":{"_id":"165","name":"test_udo_string values (favorite)","type":"va","description":"Captures the favorite number for Tally: test_udo_string values","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"5138","origin_name":"test_udo_string values (favorite)","origin_type":"properties","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"166":{"_id":"166","name":"Tester","type":"va","description":"","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"5141","origin_name":"Tester","origin_type":"badges","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"167":{"_id":"167","name":"Total direct visits","type":"va","description":"Total direct visits","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"15","origin_name":"Total direct visits","origin_type":"metrics","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"168":{"_id":"168","name":"Total referred visits","type":"va","description":"Total referred visits","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"16","origin_name":"Total referred visits","origin_type":"metrics","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"169":{"_id":"169","name":"Total time spent on site in minutes","type":"va","description":"Sum duration of all user visits","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"25","origin_name":"Total time spent on site in minutes","origin_type":"metrics","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"170":{"_id":"170","name":"Unbadged","type":"va","description":"The visitor has not been assigned any badges","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"32","origin_name":"Unbadged","origin_type":"badges","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"171":{"_id":"171","name":"Visit duration","type":"va","description":"Visit duration in minutes","context":"current_visit","imported":"AudienceStream","settings":{"origin_id":"12","origin_name":"Visit duration","origin_type":"metrics","origin_context":"current_visit","account":"services-caleb","profileid":"main"}},"172":{"_id":"172","name":"Visit end","type":"va","description":"Visit end date","context":"current_visit","imported":"AudienceStream","settings":{"origin_id":"11","origin_name":"Visit end","origin_type":"dates","origin_context":"current_visit","account":"services-caleb","profileid":"main"}},"173":{"_id":"173","name":"Visit start","type":"va","description":"Visit start date","context":"current_visit","imported":"AudienceStream","settings":{"origin_id":"10","origin_name":"Visit start","origin_type":"dates","origin_context":"current_visit","account":"services-caleb","profileid":"main"}},"174":{"_id":"174","name":"Weeks since first visit","type":"va","description":"Weeks elapsed since first visit","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"28","origin_name":"Weeks since first visit","origin_type":"metrics","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"175":{"_id":"175","name":"Weeks since first visit temp","type":"va","description":"Temporary store for computer value","context":"current_visit","imported":"AudienceStream","settings":{"origin_id":"80","origin_name":"Weeks since first visit temp","origin_type":"metrics","origin_context":"current_visit","account":"services-caleb","profileid":"main"}},"176":{"_id":"176","name":"Yellow","type":"va","description":"","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"5061","origin_name":"Yellow","origin_type":"badges","origin_context":"visitor","account":"services-caleb","profileid":"main"}}},"versionorigin":"201908291339","settings":{"account":"services-caleb","profileid":"1und1-microsites","lastcustomizeid":"0","lastdefineid":"86","datacloud_revision":"1566904909656","library":"NONE","minorrevision":"201908291343","lastloadruleid":"1","revision":"201908291343","datacloud_profile":"main","creation":"201908291327","lastmanageid":"3"},"createManifest":"false","loadrules":{"2":{"0":{"input_0":"dom.domain","operator_0":"contains","operator_1":"equals","filter_0":"hilfe-center.1und1.de","filter_1":"pageview.send","input_1":"js.datalayer_event"},"containerId":"loadrules_content_156708537091900081","title":"Adobe Analytics for Hilfecenter","startDate":"------------","id":"2","editable":"true","sort":"1","initialize":"","labels":"","_id":"2","status":"active","constructor":"","endDate":"------------"},"4":{"0":{"input_1":"js.datalayer_event","filter_1":"pageview.send","filter_0":"blog.1und1.de","operator_0":"contains","input_0":"dom.domain","operator_1":"equals"},"1":{"input_1":"js.datalayer_event","filter_0":"newsroom.1und1.de","filter_1":"pageview.send","operator_0":"contains","input_0":"dom.domain","operator_1":"equals"},"sort":"2","editable":"true","labels":"","initialize":"","status":"active","_id":"4","constructor":"","endDate":"------------","containerId":"loadrules_content_156708537092500082","title":"Adobe Analytics for Newsroom &amp; Blog","startDate":"------------","id":"4"}},"customizations":{"1":{"extType":"Javascript Code","_id":"1","selectedTargets":{"qa":"true","prod":"true","dev":"true"},"sort":"1","notes":"","publishedTargets":"dev","blockPubTargetsLogic":"true","type":"new","advExecOption":"blr_ro","constructor":"","scope":"global","status":"active","codeDevData":{"draftSnippets":{"8426fe6df433aa66a723428b5c6776572f7e7ff4af42b69831a99898225cfd1f":{"name":"INIT","code":"/**\r\n * DataLayer Helper Library by Google\r\n * \r\n * @documentation: https://github.com/google/data-layer-helper\r\n * @source: https://github.com/google/data-layer-helper/blob/master/dist/data-layer-helper.js\r\n */\r\n(function(){\r\n/*\r\n    jQuery v1.9.1 (c) 2005, 2012\r\n    jQuery Foundation, Inc. jquery.org/license.\r\n*/\r\nvar g=/\\[object (Boolean|Number|String|Function|Array|Date|RegExp)\\]/;function h(a){return null==a?String(a):(a=g.exec(Object.prototype.toString.call(Object(a))))?a[1].toLowerCase():&quot;object&quot;}function k(a,b){return Object.prototype.hasOwnProperty.call(Object(a),b)}function m(a){if(!a||&quot;object&quot;!=h(a)||a.nodeType||a==a.window)return!1;try{if(a.constructor&amp;&amp;!k(a,&quot;constructor&quot;)&amp;&amp;!k(a.constructor.prototype,&quot;isPrototypeOf&quot;))return!1}catch(b){return!1}for(var c in a);return void 0===c||k(a,c)};/*\r\n    Copyright 2012 Google Inc. All rights reserved. */\r\nfunction n(a,b,c){this.b=a;this.f=b||function(){};this.d=!1;this.a={};this.c=[];this.e=p(this);r(this,a,!c);var d=a.push,e=this;a.push=function(){var b=[].slice.call(arguments,0),c=d.apply(a,b);r(e,b);return c}}window.DataLayerHelper=n;n.prototype.get=function(a){var b=this.a;a=a.split(&quot;.&quot;);for(var c=0;c&lt;a.length;c++){if(void 0===b[a[c]])return;b=b[a[c]]}return b};n.prototype.flatten=function(){this.b.splice(0,this.b.length);this.b[0]={};s(this.a,this.b[0])};\r\nfunction r(a,b,c){for(a.c.push.apply(a.c,b);!1===a.d&amp;&amp;0&lt;a.c.length;){b=a.c.shift();if(&quot;array&quot;==h(b))a:{var d=b,e=a.a;if(&quot;string&quot;==h(d[0])){for(var f=d[0].split(&quot;.&quot;),u=f.pop(),d=d.slice(1),l=0;l&lt;f.length;l++){if(void 0===e[f[l]])break a;e=e[f[l]]}try{e[u].apply(e,d)}catch(v){}}}else if(&quot;function&quot;==typeof b)try{b.call(a.e)}catch(w){}else if(m(b))for(var q in b)s(t(q,b[q]),a.a);else continue;c||(a.d=!0,a.f(a.a,b),a.d=!1)}}\r\nfunction p(a){return{set:function(b,c){s(t(b,c),a.a)},get:function(b){return a.get(b)}}}function t(a,b){for(var c={},d=c,e=a.split(&quot;.&quot;),f=0;f&lt;e.length-1;f++)d=d[e[f]]={};d[e[e.length-1]]=b;return c}function s(a,b){for(var c in a)if(k(a,c)){var d=a[c];&quot;array&quot;==h(d)?(&quot;array&quot;==h(b[c])||(b[c]=[]),s(d,b[c])):m(d)?(m(b[c])||(b[c]={}),s(d,b[c])):b[c]=d}};})();\r\n\r\n/**\r\n * Initialising the datalayer helper and passing information to tealium\r\n * \r\n * @documentation: {{Confluence Link}}\r\n * @specials: Only triggers tealium on 'pageview' event or when an\r\n *  event key is passed to the datalayer where the value does not contain a '.'\r\n * @products: Single product values are strored in Arrays in the teal object to \r\n *  be passed to Tealium in the preferred Array Sytax\r\n */\r\n(function(w) {\r\n    // Initializing the datalayer\r\n    w._1und1datalayer = w._1und1datalayer || [];\r\n    \r\n    // Initializing the datalayer helper\r\n    w._1und1datalayerHelper = new DataLayerHelper(w._1und1datalayer, listener, true);\r\n\r\n    /**\r\n     * Setting up the listener for the message key (_1und1datalayer)\r\n     * \r\n     * The listener is called every time a message is pushed into the datalayer.\r\n     * Objectives:\r\n     *   - handle info messages and build product array if applicable.\r\n     *   - pass events to tealium\r\n     *   - include logging for dev and qa\r\n     *   - clean up product level information\r\n     *  */ \r\n    function listener(model, message) {\r\n        /**\r\n         * Flatten object to work with tealium\r\n         * Function is provided by tealium and included in tealium extension\r\n         */\r\n        var flat_model = teal.flattenObject(model);\r\n        var flat_message = teal.flattenObject(message);\r\n        /**\r\n         * Check if event is set and does not contains .info\r\n         * \r\n         * If true call tealium view or link function with datalayer\r\n         * model\r\n         * \r\n         * Else just validate schema and do not call tealium.\r\n         */\r\n        if ('event' in message &amp;&amp; message.event.match(/\\.send/)) {\r\n            /**\r\n             * Add tealium event key to the model \r\n             * \r\n             * Better handling within tealium in tags and rules.\r\n             */\r\n            flat_model.datalayer_event = message.event;\r\n            \r\n            /**\r\n             * Push pageview event with the current datalayer to\r\n             * tealium if pageview is pushed to datalayer.\r\n             */\r\n            if (message.event == 'pageview.send') {\r\n                /**\r\n                 * Call Pageview request.\r\n                 */\r\n                w.utag.view(flat_model);\r\n                return;\r\n            } else {\r\n                /**\r\n                 * Any other event should be sent as a link request to tealium.\r\n                 */\r\n                w.utag.link(flat_model);\r\n                return;\r\n            }\r\n        } \r\n    }\r\n})(window);","updatedBy":"daniel.scheffbuch@produktmacher.com","creationDate":"201908190939","updateDate":"201908200817"}},"queueSeq":"4","draftSeq":"1","promotedSnippets":{"6754af9632a2745e85c293e5aac0863370d9bd3330b9938c00cadfd215227d77":{"name":"prod","code":"/**\r\n * DataLayer Helper Library by Google\r\n * \r\n * @documentation: https://github.com/google/data-layer-helper\r\n * @source: https://github.com/google/data-layer-helper/blob/master/dist/data-layer-helper.js\r\n */\r\n(function(){\r\n/*\r\n    jQuery v1.9.1 (c) 2005, 2012\r\n    jQuery Foundation, Inc. jquery.org/license.\r\n*/\r\nvar g=/\\[object (Boolean|Number|String|Function|Array|Date|RegExp)\\]/;function h(a){return null==a?String(a):(a=g.exec(Object.prototype.toString.call(Object(a))))?a[1].toLowerCase():&quot;object&quot;}function k(a,b){return Object.prototype.hasOwnProperty.call(Object(a),b)}function m(a){if(!a||&quot;object&quot;!=h(a)||a.nodeType||a==a.window)return!1;try{if(a.constructor&amp;&amp;!k(a,&quot;constructor&quot;)&amp;&amp;!k(a.constructor.prototype,&quot;isPrototypeOf&quot;))return!1}catch(b){return!1}for(var c in a);return void 0===c||k(a,c)};/*\r\n    Copyright 2012 Google Inc. All rights reserved. */\r\nfunction n(a,b,c){this.b=a;this.f=b||function(){};this.d=!1;this.a={};this.c=[];this.e=p(this);r(this,a,!c);var d=a.push,e=this;a.push=function(){var b=[].slice.call(arguments,0),c=d.apply(a,b);r(e,b);return c}}window.DataLayerHelper=n;n.prototype.get=function(a){var b=this.a;a=a.split(&quot;.&quot;);for(var c=0;c&lt;a.length;c++){if(void 0===b[a[c]])return;b=b[a[c]]}return b};n.prototype.flatten=function(){this.b.splice(0,this.b.length);this.b[0]={};s(this.a,this.b[0])};\r\nfunction r(a,b,c){for(a.c.push.apply(a.c,b);!1===a.d&amp;&amp;0&lt;a.c.length;){b=a.c.shift();if(&quot;array&quot;==h(b))a:{var d=b,e=a.a;if(&quot;string&quot;==h(d[0])){for(var f=d[0].split(&quot;.&quot;),u=f.pop(),d=d.slice(1),l=0;l&lt;f.length;l++){if(void 0===e[f[l]])break a;e=e[f[l]]}try{e[u].apply(e,d)}catch(v){}}}else if(&quot;function&quot;==typeof b)try{b.call(a.e)}catch(w){}else if(m(b))for(var q in b)s(t(q,b[q]),a.a);else continue;c||(a.d=!0,a.f(a.a,b),a.d=!1)}}\r\nfunction p(a){return{set:function(b,c){s(t(b,c),a.a)},get:function(b){return a.get(b)}}}function t(a,b){for(var c={},d=c,e=a.split(&quot;.&quot;),f=0;f&lt;e.length-1;f++)d=d[e[f]]={};d[e[e.length-1]]=b;return c}function s(a,b){for(var c in a)if(k(a,c)){var d=a[c];&quot;array&quot;==h(d)?(&quot;array&quot;==h(b[c])||(b[c]=[]),s(d,b[c])):m(d)?(m(b[c])||(b[c]={}),s(d,b[c])):b[c]=d}};})();\r\n\r\n/**\r\n * Initialising the datalayer helper and passing information to tealium\r\n * \r\n * @documentation: {{Confluence Link}}\r\n * @specials: Only triggers tealium on 'pageview' event or when an\r\n *  event key is passed to the datalayer where the value does not contain a '.'\r\n * @products: Single product values are strored in Arrays in the teal object to \r\n *  be passed to Tealium in the preferred Array Sytax\r\n */\r\n(function(w) {\r\n    // Initializing the datalayer\r\n    w._1und1datalayer = w._1und1datalayer || [];\r\n    \r\n    // Initializing the datalayer helper\r\n    w._1und1datalayerHelper = new DataLayerHelper(w._1und1datalayer, listener, true);\r\n\r\n    /**\r\n     * Setting up the listener for the message key (_1und1datalayer)\r\n     * \r\n     * The listener is called every time a message is pushed into the datalayer.\r\n     * Objectives:\r\n     *   - handle info messages and build product array if applicable.\r\n     *   - pass events to tealium\r\n     *   - include logging for dev and qa\r\n     *   - clean up product level information\r\n     *  */ \r\n    function listener(model, message) {\r\n        /**\r\n         * Flatten object to work with tealium\r\n         * Function is provided by tealium and included in tealium extension\r\n         */\r\n        var flat_model = teal.flattenObject(model);\r\n        var flat_message = teal.flattenObject(message);\r\n        /**\r\n         * Check if event is set and does not contains .info\r\n         * \r\n         * If true call tealium view or link function with datalayer\r\n         * model\r\n         * \r\n         * Else just validate schema and do not call tealium.\r\n         */\r\n        if ('event' in message &amp;&amp; message.event.match(/\\.send/)) {\r\n            /**\r\n             * Add tealium event key to the model \r\n             * \r\n             * Better handling within tealium in tags and rules.\r\n             */\r\n            flat_model.datalayer_event = message.event;\r\n            \r\n            /**\r\n             * Push pageview event with the current datalayer to\r\n             * tealium if pageview is pushed to datalayer.\r\n             */\r\n            if (message.event == 'pageview.send') {\r\n                /**\r\n                 * Call Pageview request.\r\n                 */\r\n                w.utag.view(flat_model);\r\n                return;\r\n            } else {\r\n                /**\r\n                 * Any other event should be sent as a link request to tealium.\r\n                 */\r\n                w.utag.link(flat_model);\r\n                return;\r\n            }\r\n        } \r\n    }\r\n})(window);","promotedBy":"ankang.shi@1und1.de","promotedDraftName":"INIT","promotedTimestamp":"201908201252"},"3f3ef786b34d6dd716e1812c8b74a7a0e1f05aa5f3230588f6f5bcd00c6c8392":{"code":"/**\r\n * DataLayer Helper Library by Google\r\n * \r\n * @documentation: https://github.com/google/data-layer-helper\r\n * @source: https://github.com/google/data-layer-helper/blob/master/dist/data-layer-helper.js\r\n */\r\n(function(){\r\n/*\r\n    jQuery v1.9.1 (c) 2005, 2012\r\n    jQuery Foundation, Inc. jquery.org/license.\r\n*/\r\nvar g=/\\[object (Boolean|Number|String|Function|Array|Date|RegExp)\\]/;function h(a){return null==a?String(a):(a=g.exec(Object.prototype.toString.call(Object(a))))?a[1].toLowerCase():&quot;object&quot;}function k(a,b){return Object.prototype.hasOwnProperty.call(Object(a),b)}function m(a){if(!a||&quot;object&quot;!=h(a)||a.nodeType||a==a.window)return!1;try{if(a.constructor&amp;&amp;!k(a,&quot;constructor&quot;)&amp;&amp;!k(a.constructor.prototype,&quot;isPrototypeOf&quot;))return!1}catch(b){return!1}for(var c in a);return void 0===c||k(a,c)};/*\r\n    Copyright 2012 Google Inc. All rights reserved. */\r\nfunction n(a,b,c){this.b=a;this.f=b||function(){};this.d=!1;this.a={};this.c=[];this.e=p(this);r(this,a,!c);var d=a.push,e=this;a.push=function(){var b=[].slice.call(arguments,0),c=d.apply(a,b);r(e,b);return c}}window.DataLayerHelper=n;n.prototype.get=function(a){var b=this.a;a=a.split(&quot;.&quot;);for(var c=0;c&lt;a.length;c++){if(void 0===b[a[c]])return;b=b[a[c]]}return b};n.prototype.flatten=function(){this.b.splice(0,this.b.length);this.b[0]={};s(this.a,this.b[0])};\r\nfunction r(a,b,c){for(a.c.push.apply(a.c,b);!1===a.d&amp;&amp;0&lt;a.c.length;){b=a.c.shift();if(&quot;array&quot;==h(b))a:{var d=b,e=a.a;if(&quot;string&quot;==h(d[0])){for(var f=d[0].split(&quot;.&quot;),u=f.pop(),d=d.slice(1),l=0;l&lt;f.length;l++){if(void 0===e[f[l]])break a;e=e[f[l]]}try{e[u].apply(e,d)}catch(v){}}}else if(&quot;function&quot;==typeof b)try{b.call(a.e)}catch(w){}else if(m(b))for(var q in b)s(t(q,b[q]),a.a);else continue;c||(a.d=!0,a.f(a.a,b),a.d=!1)}}\r\nfunction p(a){return{set:function(b,c){s(t(b,c),a.a)},get:function(b){return a.get(b)}}}function t(a,b){for(var c={},d=c,e=a.split(&quot;.&quot;),f=0;f&lt;e.length-1;f++)d=d[e[f]]={};d[e[e.length-1]]=b;return c}function s(a,b){for(var c in a)if(k(a,c)){var d=a[c];&quot;array&quot;==h(d)?(&quot;array&quot;==h(b[c])||(b[c]=[]),s(d,b[c])):m(d)?(m(b[c])||(b[c]={}),s(d,b[c])):b[c]=d}};})();\r\n\r\n/**\r\n * Initialising the datalayer helper and passing information to tealium\r\n * \r\n * @documentation: {{Confluence Link}}\r\n * @specials: Only triggers tealium on 'pageview' event or when an\r\n *  event key is passed to the datalayer where the value does not contain a '.'\r\n * @products: Single product values are strored in Arrays in the teal object to \r\n *  be passed to Tealium in the preferred Array Sytax\r\n */\r\n(function(w) {\r\n    // Initializing the datalayer\r\n    w._1und1datalayer = w._1und1datalayer || [];\r\n    \r\n    // Initializing the datalayer helper\r\n    w._1und1datalayerHelper = new DataLayerHelper(w._1und1datalayer, listener, true);\r\n\r\n    /**\r\n     * Setting up the listener for the message key (_1und1datalayer)\r\n     * \r\n     * The listener is called every time a message is pushed into the datalayer.\r\n     * Objectives:\r\n     *   - handle info messages and build product array if applicable.\r\n     *   - pass events to tealium\r\n     *   - include logging for dev and qa\r\n     *   - clean up product level information\r\n     *  */ \r\n    function listener(model, message) {\r\n        /**\r\n         * Flatten object to work with tealium\r\n         * Function is provided by tealium and included in tealium extension\r\n         */\r\n        var flat_model = teal.flattenObject(model);\r\n        var flat_message = teal.flattenObject(message);\r\n        /**\r\n         * Check if event is set and does not contains .info\r\n         * \r\n         * If true call tealium view or link function with datalayer\r\n         * model\r\n         * \r\n         * Else just validate schema and do not call tealium.\r\n         */\r\n        if ('event' in message &amp;&amp; message.event.match(/\\.send/)) {\r\n            /**\r\n             * Add tealium event key to the model \r\n             * \r\n             * Better handling within tealium in tags and rules.\r\n             */\r\n            flat_model.datalayer_event = message.event;\r\n            \r\n            /**\r\n             * Push pageview event with the current datalayer to\r\n             * tealium if pageview is pushed to datalayer.\r\n             */\r\n            if (message.event == 'pageview.send') {\r\n                /**\r\n                 * Call Pageview request.\r\n                 */\r\n                w.utag.view(flat_model);\r\n                return;\r\n            } else {\r\n                /**\r\n                 * Any other event should be sent as a link request to tealium.\r\n                 */\r\n                w.utag.link(flat_model);\r\n                return;\r\n            }\r\n        } \r\n    }\r\n})(window);","name":"qa","promotedDraftName":"INIT","promotedTimestamp":"201908201252","promotedBy":"ankang.shi@1und1.de"},"ef260e9aa3c673af240d17a2660480361a8e081d1ffeca2a5ed0e3219fc18567":{"promotedBy":"ankang.shi@1und1.de","promotedTimestamp":"201908201252","promotedDraftName":"INIT","name":"dev","code":"/**\r\n * DataLayer Helper Library by Google\r\n * \r\n * @documentation: https://github.com/google/data-layer-helper\r\n * @source: https://github.com/google/data-layer-helper/blob/master/dist/data-layer-helper.js\r\n */\r\n(function(){\r\n/*\r\n    jQuery v1.9.1 (c) 2005, 2012\r\n    jQuery Foundation, Inc. jquery.org/license.\r\n*/\r\nvar g=/\\[object (Boolean|Number|String|Function|Array|Date|RegExp)\\]/;function h(a){return null==a?String(a):(a=g.exec(Object.prototype.toString.call(Object(a))))?a[1].toLowerCase():&quot;object&quot;}function k(a,b){return Object.prototype.hasOwnProperty.call(Object(a),b)}function m(a){if(!a||&quot;object&quot;!=h(a)||a.nodeType||a==a.window)return!1;try{if(a.constructor&amp;&amp;!k(a,&quot;constructor&quot;)&amp;&amp;!k(a.constructor.prototype,&quot;isPrototypeOf&quot;))return!1}catch(b){return!1}for(var c in a);return void 0===c||k(a,c)};/*\r\n    Copyright 2012 Google Inc. All rights reserved. */\r\nfunction n(a,b,c){this.b=a;this.f=b||function(){};this.d=!1;this.a={};this.c=[];this.e=p(this);r(this,a,!c);var d=a.push,e=this;a.push=function(){var b=[].slice.call(arguments,0),c=d.apply(a,b);r(e,b);return c}}window.DataLayerHelper=n;n.prototype.get=function(a){var b=this.a;a=a.split(&quot;.&quot;);for(var c=0;c&lt;a.length;c++){if(void 0===b[a[c]])return;b=b[a[c]]}return b};n.prototype.flatten=function(){this.b.splice(0,this.b.length);this.b[0]={};s(this.a,this.b[0])};\r\nfunction r(a,b,c){for(a.c.push.apply(a.c,b);!1===a.d&amp;&amp;0&lt;a.c.length;){b=a.c.shift();if(&quot;array&quot;==h(b))a:{var d=b,e=a.a;if(&quot;string&quot;==h(d[0])){for(var f=d[0].split(&quot;.&quot;),u=f.pop(),d=d.slice(1),l=0;l&lt;f.length;l++){if(void 0===e[f[l]])break a;e=e[f[l]]}try{e[u].apply(e,d)}catch(v){}}}else if(&quot;function&quot;==typeof b)try{b.call(a.e)}catch(w){}else if(m(b))for(var q in b)s(t(q,b[q]),a.a);else continue;c||(a.d=!0,a.f(a.a,b),a.d=!1)}}\r\nfunction p(a){return{set:function(b,c){s(t(b,c),a.a)},get:function(b){return a.get(b)}}}function t(a,b){for(var c={},d=c,e=a.split(&quot;.&quot;),f=0;f&lt;e.length-1;f++)d=d[e[f]]={};d[e[e.length-1]]=b;return c}function s(a,b){for(var c in a)if(k(a,c)){var d=a[c];&quot;array&quot;==h(d)?(&quot;array&quot;==h(b[c])||(b[c]=[]),s(d,b[c])):m(d)?(m(b[c])||(b[c]={}),s(d,b[c])):b[c]=d}};})();\r\n\r\n/**\r\n * Initialising the datalayer helper and passing information to tealium\r\n * \r\n * @documentation: {{Confluence Link}}\r\n * @specials: Only triggers tealium on 'pageview' event or when an\r\n *  event key is passed to the datalayer where the value does not contain a '.'\r\n * @products: Single product values are strored in Arrays in the teal object to \r\n *  be passed to Tealium in the preferred Array Sytax\r\n */\r\n(function(w) {\r\n    // Initializing the datalayer\r\n    w._1und1datalayer = w._1und1datalayer || [];\r\n    \r\n    // Initializing the datalayer helper\r\n    w._1und1datalayerHelper = new DataLayerHelper(w._1und1datalayer, listener, true);\r\n\r\n    /**\r\n     * Setting up the listener for the message key (_1und1datalayer)\r\n     * \r\n     * The listener is called every time a message is pushed into the datalayer.\r\n     * Objectives:\r\n     *   - handle info messages and build product array if applicable.\r\n     *   - pass events to tealium\r\n     *   - include logging for dev and qa\r\n     *   - clean up product level information\r\n     *  */ \r\n    function listener(model, message) {\r\n        /**\r\n         * Flatten object to work with tealium\r\n         * Function is provided by tealium and included in tealium extension\r\n         */\r\n        var flat_model = teal.flattenObject(model);\r\n        var flat_message = teal.flattenObject(message);\r\n        /**\r\n         * Check if event is set and does not contains .info\r\n         * \r\n         * If true call tealium view or link function with datalayer\r\n         * model\r\n         * \r\n         * Else just validate schema and do not call tealium.\r\n         */\r\n        if ('event' in message &amp;&amp; message.event.match(/\\.send/)) {\r\n            /**\r\n             * Add tealium event key to the model \r\n             * \r\n             * Better handling within tealium in tags and rules.\r\n             */\r\n            flat_model.datalayer_event = message.event;\r\n            \r\n            /**\r\n             * Push pageview event with the current datalayer to\r\n             * tealium if pageview is pushed to datalayer.\r\n             */\r\n            if (message.event == 'pageview.send') {\r\n                /**\r\n                 * Call Pageview request.\r\n                 */\r\n                w.utag.view(flat_model);\r\n                return;\r\n            } else {\r\n                /**\r\n                 * Any other event should be sent as a link request to tealium.\r\n                 */\r\n                w.utag.link(flat_model);\r\n                return;\r\n            }\r\n        } \r\n    }\r\n})(window);"}}},"labels":"","initialize":"","id":"100040","title":"HELPER - Datalayer Helper"},"2":{"sort":"0","notes":"","selectedTargets":{"qa":"true","dev":"true","prod":"true"},"extType":"Javascript Code","_id":"2","type":"new","blockPubTargetsLogic":"true","publishedTargets":"dev","labels":"","codeDevData":{"draftSnippets":{"8426fe6df433aa66a723428b5c6776572f7e7ff4af42b69831a99898225cfd1f":{"creationDate":"201908191035","updateDate":"201908191035","updatedBy":"ankang.shi@1und1.de","code":"/**\r\n * Data Layer Flatten Helper provided by tealium.\r\n * \r\n * @documentation: https://community.tealiumiq.com/t5/iQ-Tag-Management/Data-Layer-Converter/ta-p/17581\r\n * @source: https://tags.tiqcdn.com/utag/tealium-solutions/main/prod/utag.9.js\r\n * \r\n * @usage: we use the converter inside the datalayer helper to flatten our object.\r\n */\r\n\r\n//Define the teal global namespace\r\nwindow.teal = window.teal || {};\r\nteal.ignore_keys = {};\r\nteal.replace_keys = {};\r\nteal.prefix = &quot;&quot;;\r\n\r\n//In cases of a nested object, what should join the parent key and child key\r\nteal.nested_delimiter = &quot;.&quot;;\r\n\r\n//Ignore keys in the data layer that start with the following text.\r\n//Expecting an object of strings\r\n/*\r\nteal.ignore_keys = {\r\n  &quot;user&quot; : 1,\r\n  &quot;util&quot; : 1\r\n};\r\n*/\r\n\r\n//Specify a prefix for data layer elements being sent to the utag_data object.\r\n//Instead of utag_data.productID, it could be utag_data.dl_productID\r\n// teal.prefix = &quot;dl_&quot;;\r\n\r\n//Keys to be removed from the new flattened key name\r\n//For a flattened key, you have digitalData.page.pageInfo.pageName and you want digitalData.page.pi.pageName\r\n/* teal.replace_keys = {\r\n    &quot;pageInfo&quot;:&quot;pi&quot;\r\n  };\r\n*/\r\n\r\n//For a flattened key, you have digitalData.page.pageInfo.pageName and you want digitalData.page.pageName\r\n/* teal.replace_keys = {\r\n    &quot;pageInfo&quot;:&quot;&quot;\r\n  };\r\n*/\r\n\r\n//For a flattened key, you have digitalData.page.pageInfo.pageName and you want digitalData.pageName\r\n/* teal.replace_keys = {\r\n    &quot;page&quot;:&quot;&quot;,\r\n    &quot;pageInfo&quot;:&quot;&quot;\r\n  };\r\n*/\r\n\r\n/*****************DO NOT MODIFY BELOW***********************/\r\n\r\nteal.flattener_version = 1.3;\r\n\r\n// From https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys\r\n// Add the Object.keys method for older versions of IE\r\nObject.keys||(Object.keys=function(){&quot;use strict&quot;;var a=Object.prototype.hasOwnProperty,b=!{toString:null}.propertyIsEnumerable(&quot;toString&quot;),c=[&quot;toString&quot;,&quot;toLocaleString&quot;,&quot;valueOf&quot;,&quot;hasOwnProperty&quot;,&quot;isPrototypeOf&quot;,&quot;propertyIsEnumerable&quot;,&quot;constructor&quot;],d=c.length;return function(e){if(&quot;object&quot;!=typeof e&amp;&amp;(&quot;function&quot;!=typeof e||null===e))throw new TypeError(&quot;Object.keys called on non-object&quot;);var g,h,f=[];for(g in e)a.call(e,g)&amp;&amp;f.push(g);if(b)for(h=0;h&lt;d;h++)a.call(e,c[h])&amp;&amp;f.push(c[h]);return f}}());\r\n\r\nteal.ignoreKey = function(key,re){\r\n  var should_ignore_key = 0;\r\n  //Build a new array to avoid running through Object.keys multiple times\r\n  if(typeof teal.ignore_keys_list === 'undefined'){\r\n    teal.ignore_keys_list = Object.keys(teal.ignore_keys);\r\n    teal.ignore_keys_list.forEach(function(name){\r\n      //Store a copy of the regex in the object\r\n      teal.ignore_keys[name] = new RegExp(&quot;^&quot;+name);\r\n      if(key.match(teal.ignore_keys[name])){\r\n        should_ignore_key = 1;\r\n      }\r\n    });\r\n  }else{\r\n    //Loop through the ignore_keys object to see if we should ignore this key\r\n    teal.ignore_keys_list.forEach(function(name){\r\n      if(key.match(teal.ignore_keys[name])){\r\n        should_ignore_key = 1;\r\n      }\r\n    });\r\n  }\r\n  return should_ignore_key;\r\n}\r\n\r\nteal.getKeyName = function(key,re){\r\n  //Create a new object to store regexs or use existing one\r\n  teal.replace_keys_regex = teal.replace_keys_regex || {};\r\n  //Build a new array to avoid running through Object.keys multiple times\r\n  if(typeof teal.replace_keys_list === 'undefined'){\r\n    teal.replace_keys_list = Object.keys(teal.replace_keys);\r\n    teal.replace_keys_list.forEach(function(name){\r\n      //Store a copy of the regex in the teal.replace_keys_regex object so that the regexs are only built once\r\n      teal.replace_keys_regex[name] = new RegExp(&quot;[&quot; + teal.nested_delimiter + &quot;]?&quot; + name + &quot;[&quot; + teal.nested_delimiter + &quot;]&quot;, &quot;g&quot;);\r\n      key = teal.keyReplace(key,name,teal.replace_keys_regex[name]);\r\n    });\r\n  }else{\r\n    //Loop through the replace_keys object to see what we should be replacing\r\n    teal.replace_keys_list.forEach(function(name){\r\n      key = teal.keyReplace(key,name,teal.replace_keys_regex[name]);\r\n    });\r\n  }\r\n  return key;\r\n}\r\n\r\nteal.keyReplace = function(key,name,re){\r\n  //Check to see if we are replacing the key name with a new value or if we are removing the key altogether\r\n  if(teal.replace_keys[name] === ''){\r\n    //The key needs to be removed completely\r\n    key = key.replace(re,teal.nested_delimiter);\r\n    //Check to see if the key starts with the nested delimiter and if so, remove it\r\n    if(key.indexOf(teal.nested_delimiter) === 0){\r\n      var cleanRegEx = new RegExp(&quot;^[&quot; + teal.nested_delimiter + &quot;]&quot;);\r\n      key = key.replace(cleanRegEx,'');\r\n    }\r\n  }else{\r\n    //Replace the key name\r\n    key = key.replace(re,teal.nested_delimiter+teal.replace_keys[name]+teal.nested_delimiter);\r\n  }\r\n  return key;\r\n}\r\n\r\nteal.processDataObject = function(obj,new_obj,parent_key,create_array){\r\n  if(typeof parent_key === &quot;undefined&quot;){\r\n    //This object isn't nested in another object\r\n    parent_key = &quot;&quot;;\r\n  }else{\r\n    //Add the nested_delimiter to the parent key if the delimiter isn't already at the end\r\n    teal.nested_delimiter_regex = teal.nested_delimiter_regex || new RegExp(&quot;[&quot;+teal.nested_delimiter+&quot;]$&quot;);\r\n    if(!parent_key.match(teal.nested_delimiter_regex)){\r\n      parent_key += &quot;&quot;+teal.nested_delimiter;\r\n    }\r\n  }\r\n  Object.keys(obj).forEach(function(key){\r\n    var nested_key_name = parent_key+key;\r\n    //Format the new key name and take out any whitespace\r\n    var new_key_name = teal.getKeyName((teal.prefix+parent_key+key).replace(/\\s/g, ''));\r\n    //Set the key_type to limit the number of typeof checks\r\n    var key_type = teal.typeOf(obj[key]);\r\n    if(key_type !== 'undefined' &amp;&amp; key_type != null){\r\n      if(key_type.match(/boolean|string|number|date/) &amp;&amp; !teal.ignoreKey(key)){\r\n        //If obj[key] is a date, convert to ISOString\r\n        if(teal.typeOf(obj[key]) === 'date'){\r\n          obj[key] = obj[key].toISOString();\r\n        }\r\n        //Check to see if we need to create an array for this data point\r\n        if(create_array){\r\n          //First check to see if this key exists\r\n          if(teal.typeOf(new_obj[new_key_name]) !== &quot;array&quot;){\r\n            //Make the key an array                       \r\n            new_obj[new_key_name] = [];\r\n          }\r\n          new_obj[new_key_name].push(&quot;&quot;+obj[key]); //Force value to be a string\r\n        }else{\r\n          //If the value of the key is a boolean or a string or a number and \r\n          //the key shouldn't be ignored add to the data layer\r\n          new_obj[new_key_name] = &quot;&quot;+obj[key]; //Force value to be a string\r\n        }\r\n      }else if(key_type === 'object' &amp;&amp; !teal.ignoreKey(key)){\r\n        //Process this piece of the data layer and merge it\r\n        teal.processDataObject(obj[key],new_obj,nested_key_name,create_array);\r\n      }else if(key_type === 'array'){\r\n        teal.processDataArray(obj[key],new_obj,nested_key_name);\r\n      }\r\n    }\r\n  });\r\n}\r\n\r\nteal.processDataArray = function(obj,new_obj,parent_key){\r\n  var objLength = obj.length; \r\n  if(typeof parent_key === &quot;undefined&quot;){\r\n    //This object isn't nested in another object\r\n    parent_key = &quot;&quot;;\r\n  }else if(objLength &gt; 0 &amp;&amp; teal.typeOf(obj[0]).match(/boolean|string|number|date/)){\r\n    //This is a normal array that doesn't need a nested delimiter\r\n  }else{\r\n    //Add the nested_delimiter to the parent key\r\n    parent_key += &quot;&quot;+teal.nested_delimiter;\r\n  }\r\n  //Format the new key name and take out any whitespace\r\n  var new_key_name = teal.getKeyName((teal.prefix+parent_key).replace(/\\s/g, ''));\r\n  for(var n = 0; n &lt; objLength; n++){\r\n    var key_type = teal.typeOf(obj[n]);\r\n    if(key_type.match(/boolean|string|number|date/)){\r\n      //If obj[n] is a date, convert to ISOString\r\n      if(key_type === 'date'){\r\n        obj[n] = obj[n].toISOString();\r\n      }\r\n      //First check to see if this key exists\r\n      if(teal.typeOf(new_obj[new_key_name]) !== &quot;array&quot;){\r\n        //Make the key an array                       \r\n        new_obj[new_key_name] = [];\r\n      }\r\n      //If the value of the key is a boolean or a string or a number and \r\n      //the key shouldn't be ignored add to the data layer                        \r\n      new_obj[new_key_name].push(&quot;&quot;+obj[n]);\r\n    }else if(key_type === 'object'){\r\n      teal.processDataObject(obj[n],new_obj,new_key_name,1);\r\n    }\r\n  }\r\n}\r\n\r\nteal.typeOf = function(e){return ({}).toString.call(e).match(/\\s([a-zA-Z]+)/)[1].toLowerCase();}\r\n\r\nteal.flattenObject = function(obj,new_obj){\r\n  //Make sure object exists\r\n  if(typeof obj === 'undefined'){\r\n    return false;\r\n  }\r\n  //Check to see if we want to flatten the same object and keep the reference\r\n  var mergeObject = false;\r\n  if(obj === new_obj){\r\n    mergeObject = true;\r\n    //Start off a clean copy of the object\r\n    new_obj = {};\r\n  }\r\n  //Make sure new object exists\r\n  if(typeof new_obj === 'undefined'){\r\n    new_obj = {};\r\n  }\r\n  //Check to see if this object is an array\r\n  if(teal.typeOf(obj) === 'array'){\r\n    //Store a safe copy of this object in case we are processing the b object\r\n    var temp_array = JSON.parse(JSON.stringify(obj));\r\n    var temp_array_length = temp_array.length;\r\n    //Clean up the object\r\n    obj = {};\r\n    //Let's see if the obj and new_obj are the same.  If so, going to assume we are using the b object\r\n    if(obj == new_obj){\r\n      //Let's ensure that we have the a object\r\n      if(typeof a === 'undefined'){\r\n        var a = 'view';\r\n      }\r\n      //Add the automatic utag data points\r\n      utag.loader.RD(new_obj,a);\r\n    }\r\n    for(var i = 0; i &lt; temp_array_length; i++){\r\n        teal.processDataObject(temp_array[i],new_obj);\r\n    }\r\n  }else{\r\n    teal.processDataObject(obj,new_obj);\r\n  }\r\n  if(mergeObject){\r\n    //Need to delete everything out of obj and replace with new_obj\r\n    Object.keys(obj).forEach(function(key){\r\n      delete obj[key];\r\n    });\r\n    //Now that we have a clean original object, add everything from new_obj which allows the reference to be kept\r\n    Object.keys(new_obj).forEach(function(key){\r\n      obj[key] = new_obj[key];\r\n    });\r\n  }\r\n\r\n  return new_obj;\r\n}","name":"INIT"}},"queueSeq":"2","promotedSnippets":{"6754af9632a2745e85c293e5aac0863370d9bd3330b9938c00cadfd215227d77":{"promotedTimestamp":"201908201252","promotedDraftName":"INIT","promotedBy":"ankang.shi@1und1.de","code":"/**\r\n * Data Layer Flatten Helper provided by tealium.\r\n * \r\n * @documentation: https://community.tealiumiq.com/t5/iQ-Tag-Management/Data-Layer-Converter/ta-p/17581\r\n * @source: https://tags.tiqcdn.com/utag/tealium-solutions/main/prod/utag.9.js\r\n * \r\n * @usage: we use the converter inside the datalayer helper to flatten our object.\r\n */\r\n\r\n//Define the teal global namespace\r\nwindow.teal = window.teal || {};\r\nteal.ignore_keys = {};\r\nteal.replace_keys = {};\r\nteal.prefix = &quot;&quot;;\r\n\r\n//In cases of a nested object, what should join the parent key and child key\r\nteal.nested_delimiter = &quot;.&quot;;\r\n\r\n//Ignore keys in the data layer that start with the following text.\r\n//Expecting an object of strings\r\n/*\r\nteal.ignore_keys = {\r\n  &quot;user&quot; : 1,\r\n  &quot;util&quot; : 1\r\n};\r\n*/\r\n\r\n//Specify a prefix for data layer elements being sent to the utag_data object.\r\n//Instead of utag_data.productID, it could be utag_data.dl_productID\r\n// teal.prefix = &quot;dl_&quot;;\r\n\r\n//Keys to be removed from the new flattened key name\r\n//For a flattened key, you have digitalData.page.pageInfo.pageName and you want digitalData.page.pi.pageName\r\n/* teal.replace_keys = {\r\n    &quot;pageInfo&quot;:&quot;pi&quot;\r\n  };\r\n*/\r\n\r\n//For a flattened key, you have digitalData.page.pageInfo.pageName and you want digitalData.page.pageName\r\n/* teal.replace_keys = {\r\n    &quot;pageInfo&quot;:&quot;&quot;\r\n  };\r\n*/\r\n\r\n//For a flattened key, you have digitalData.page.pageInfo.pageName and you want digitalData.pageName\r\n/* teal.replace_keys = {\r\n    &quot;page&quot;:&quot;&quot;,\r\n    &quot;pageInfo&quot;:&quot;&quot;\r\n  };\r\n*/\r\n\r\n/*****************DO NOT MODIFY BELOW***********************/\r\n\r\nteal.flattener_version = 1.3;\r\n\r\n// From https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys\r\n// Add the Object.keys method for older versions of IE\r\nObject.keys||(Object.keys=function(){&quot;use strict&quot;;var a=Object.prototype.hasOwnProperty,b=!{toString:null}.propertyIsEnumerable(&quot;toString&quot;),c=[&quot;toString&quot;,&quot;toLocaleString&quot;,&quot;valueOf&quot;,&quot;hasOwnProperty&quot;,&quot;isPrototypeOf&quot;,&quot;propertyIsEnumerable&quot;,&quot;constructor&quot;],d=c.length;return function(e){if(&quot;object&quot;!=typeof e&amp;&amp;(&quot;function&quot;!=typeof e||null===e))throw new TypeError(&quot;Object.keys called on non-object&quot;);var g,h,f=[];for(g in e)a.call(e,g)&amp;&amp;f.push(g);if(b)for(h=0;h&lt;d;h++)a.call(e,c[h])&amp;&amp;f.push(c[h]);return f}}());\r\n\r\nteal.ignoreKey = function(key,re){\r\n  var should_ignore_key = 0;\r\n  //Build a new array to avoid running through Object.keys multiple times\r\n  if(typeof teal.ignore_keys_list === 'undefined'){\r\n    teal.ignore_keys_list = Object.keys(teal.ignore_keys);\r\n    teal.ignore_keys_list.forEach(function(name){\r\n      //Store a copy of the regex in the object\r\n      teal.ignore_keys[name] = new RegExp(&quot;^&quot;+name);\r\n      if(key.match(teal.ignore_keys[name])){\r\n        should_ignore_key = 1;\r\n      }\r\n    });\r\n  }else{\r\n    //Loop through the ignore_keys object to see if we should ignore this key\r\n    teal.ignore_keys_list.forEach(function(name){\r\n      if(key.match(teal.ignore_keys[name])){\r\n        should_ignore_key = 1;\r\n      }\r\n    });\r\n  }\r\n  return should_ignore_key;\r\n}\r\n\r\nteal.getKeyName = function(key,re){\r\n  //Create a new object to store regexs or use existing one\r\n  teal.replace_keys_regex = teal.replace_keys_regex || {};\r\n  //Build a new array to avoid running through Object.keys multiple times\r\n  if(typeof teal.replace_keys_list === 'undefined'){\r\n    teal.replace_keys_list = Object.keys(teal.replace_keys);\r\n    teal.replace_keys_list.forEach(function(name){\r\n      //Store a copy of the regex in the teal.replace_keys_regex object so that the regexs are only built once\r\n      teal.replace_keys_regex[name] = new RegExp(&quot;[&quot; + teal.nested_delimiter + &quot;]?&quot; + name + &quot;[&quot; + teal.nested_delimiter + &quot;]&quot;, &quot;g&quot;);\r\n      key = teal.keyReplace(key,name,teal.replace_keys_regex[name]);\r\n    });\r\n  }else{\r\n    //Loop through the replace_keys object to see what we should be replacing\r\n    teal.replace_keys_list.forEach(function(name){\r\n      key = teal.keyReplace(key,name,teal.replace_keys_regex[name]);\r\n    });\r\n  }\r\n  return key;\r\n}\r\n\r\nteal.keyReplace = function(key,name,re){\r\n  //Check to see if we are replacing the key name with a new value or if we are removing the key altogether\r\n  if(teal.replace_keys[name] === ''){\r\n    //The key needs to be removed completely\r\n    key = key.replace(re,teal.nested_delimiter);\r\n    //Check to see if the key starts with the nested delimiter and if so, remove it\r\n    if(key.indexOf(teal.nested_delimiter) === 0){\r\n      var cleanRegEx = new RegExp(&quot;^[&quot; + teal.nested_delimiter + &quot;]&quot;);\r\n      key = key.replace(cleanRegEx,'');\r\n    }\r\n  }else{\r\n    //Replace the key name\r\n    key = key.replace(re,teal.nested_delimiter+teal.replace_keys[name]+teal.nested_delimiter);\r\n  }\r\n  return key;\r\n}\r\n\r\nteal.processDataObject = function(obj,new_obj,parent_key,create_array){\r\n  if(typeof parent_key === &quot;undefined&quot;){\r\n    //This object isn't nested in another object\r\n    parent_key = &quot;&quot;;\r\n  }else{\r\n    //Add the nested_delimiter to the parent key if the delimiter isn't already at the end\r\n    teal.nested_delimiter_regex = teal.nested_delimiter_regex || new RegExp(&quot;[&quot;+teal.nested_delimiter+&quot;]$&quot;);\r\n    if(!parent_key.match(teal.nested_delimiter_regex)){\r\n      parent_key += &quot;&quot;+teal.nested_delimiter;\r\n    }\r\n  }\r\n  Object.keys(obj).forEach(function(key){\r\n    var nested_key_name = parent_key+key;\r\n    //Format the new key name and take out any whitespace\r\n    var new_key_name = teal.getKeyName((teal.prefix+parent_key+key).replace(/\\s/g, ''));\r\n    //Set the key_type to limit the number of typeof checks\r\n    var key_type = teal.typeOf(obj[key]);\r\n    if(key_type !== 'undefined' &amp;&amp; key_type != null){\r\n      if(key_type.match(/boolean|string|number|date/) &amp;&amp; !teal.ignoreKey(key)){\r\n        //If obj[key] is a date, convert to ISOString\r\n        if(teal.typeOf(obj[key]) === 'date'){\r\n          obj[key] = obj[key].toISOString();\r\n        }\r\n        //Check to see if we need to create an array for this data point\r\n        if(create_array){\r\n          //First check to see if this key exists\r\n          if(teal.typeOf(new_obj[new_key_name]) !== &quot;array&quot;){\r\n            //Make the key an array                       \r\n            new_obj[new_key_name] = [];\r\n          }\r\n          new_obj[new_key_name].push(&quot;&quot;+obj[key]); //Force value to be a string\r\n        }else{\r\n          //If the value of the key is a boolean or a string or a number and \r\n          //the key shouldn't be ignored add to the data layer\r\n          new_obj[new_key_name] = &quot;&quot;+obj[key]; //Force value to be a string\r\n        }\r\n      }else if(key_type === 'object' &amp;&amp; !teal.ignoreKey(key)){\r\n        //Process this piece of the data layer and merge it\r\n        teal.processDataObject(obj[key],new_obj,nested_key_name,create_array);\r\n      }else if(key_type === 'array'){\r\n        teal.processDataArray(obj[key],new_obj,nested_key_name);\r\n      }\r\n    }\r\n  });\r\n}\r\n\r\nteal.processDataArray = function(obj,new_obj,parent_key){\r\n  var objLength = obj.length; \r\n  if(typeof parent_key === &quot;undefined&quot;){\r\n    //This object isn't nested in another object\r\n    parent_key = &quot;&quot;;\r\n  }else if(objLength &gt; 0 &amp;&amp; teal.typeOf(obj[0]).match(/boolean|string|number|date/)){\r\n    //This is a normal array that doesn't need a nested delimiter\r\n  }else{\r\n    //Add the nested_delimiter to the parent key\r\n    parent_key += &quot;&quot;+teal.nested_delimiter;\r\n  }\r\n  //Format the new key name and take out any whitespace\r\n  var new_key_name = teal.getKeyName((teal.prefix+parent_key).replace(/\\s/g, ''));\r\n  for(var n = 0; n &lt; objLength; n++){\r\n    var key_type = teal.typeOf(obj[n]);\r\n    if(key_type.match(/boolean|string|number|date/)){\r\n      //If obj[n] is a date, convert to ISOString\r\n      if(key_type === 'date'){\r\n        obj[n] = obj[n].toISOString();\r\n      }\r\n      //First check to see if this key exists\r\n      if(teal.typeOf(new_obj[new_key_name]) !== &quot;array&quot;){\r\n        //Make the key an array                       \r\n        new_obj[new_key_name] = [];\r\n      }\r\n      //If the value of the key is a boolean or a string or a number and \r\n      //the key shouldn't be ignored add to the data layer                        \r\n      new_obj[new_key_name].push(&quot;&quot;+obj[n]);\r\n    }else if(key_type === 'object'){\r\n      teal.processDataObject(obj[n],new_obj,new_key_name,1);\r\n    }\r\n  }\r\n}\r\n\r\nteal.typeOf = function(e){return ({}).toString.call(e).match(/\\s([a-zA-Z]+)/)[1].toLowerCase();}\r\n\r\nteal.flattenObject = function(obj,new_obj){\r\n  //Make sure object exists\r\n  if(typeof obj === 'undefined'){\r\n    return false;\r\n  }\r\n  //Check to see if we want to flatten the same object and keep the reference\r\n  var mergeObject = false;\r\n  if(obj === new_obj){\r\n    mergeObject = true;\r\n    //Start off a clean copy of the object\r\n    new_obj = {};\r\n  }\r\n  //Make sure new object exists\r\n  if(typeof new_obj === 'undefined'){\r\n    new_obj = {};\r\n  }\r\n  //Check to see if this object is an array\r\n  if(teal.typeOf(obj) === 'array'){\r\n    //Store a safe copy of this object in case we are processing the b object\r\n    var temp_array = JSON.parse(JSON.stringify(obj));\r\n    var temp_array_length = temp_array.length;\r\n    //Clean up the object\r\n    obj = {};\r\n    //Let's see if the obj and new_obj are the same.  If so, going to assume we are using the b object\r\n    if(obj == new_obj){\r\n      //Let's ensure that we have the a object\r\n      if(typeof a === 'undefined'){\r\n        var a = 'view';\r\n      }\r\n      //Add the automatic utag data points\r\n      utag.loader.RD(new_obj,a);\r\n    }\r\n    for(var i = 0; i &lt; temp_array_length; i++){\r\n        teal.processDataObject(temp_array[i],new_obj);\r\n    }\r\n  }else{\r\n    teal.processDataObject(obj,new_obj);\r\n  }\r\n  if(mergeObject){\r\n    //Need to delete everything out of obj and replace with new_obj\r\n    Object.keys(obj).forEach(function(key){\r\n      delete obj[key];\r\n    });\r\n    //Now that we have a clean original object, add everything from new_obj which allows the reference to be kept\r\n    Object.keys(new_obj).forEach(function(key){\r\n      obj[key] = new_obj[key];\r\n    });\r\n  }\r\n\r\n  return new_obj;\r\n}","name":"prod"},"3f3ef786b34d6dd716e1812c8b74a7a0e1f05aa5f3230588f6f5bcd00c6c8392":{"promotedTimestamp":"201908201252","promotedDraftName":"INIT","promotedBy":"ankang.shi@1und1.de","code":"/**\r\n * Data Layer Flatten Helper provided by tealium.\r\n * \r\n * @documentation: https://community.tealiumiq.com/t5/iQ-Tag-Management/Data-Layer-Converter/ta-p/17581\r\n * @source: https://tags.tiqcdn.com/utag/tealium-solutions/main/prod/utag.9.js\r\n * \r\n * @usage: we use the converter inside the datalayer helper to flatten our object.\r\n */\r\n\r\n//Define the teal global namespace\r\nwindow.teal = window.teal || {};\r\nteal.ignore_keys = {};\r\nteal.replace_keys = {};\r\nteal.prefix = &quot;&quot;;\r\n\r\n//In cases of a nested object, what should join the parent key and child key\r\nteal.nested_delimiter = &quot;.&quot;;\r\n\r\n//Ignore keys in the data layer that start with the following text.\r\n//Expecting an object of strings\r\n/*\r\nteal.ignore_keys = {\r\n  &quot;user&quot; : 1,\r\n  &quot;util&quot; : 1\r\n};\r\n*/\r\n\r\n//Specify a prefix for data layer elements being sent to the utag_data object.\r\n//Instead of utag_data.productID, it could be utag_data.dl_productID\r\n// teal.prefix = &quot;dl_&quot;;\r\n\r\n//Keys to be removed from the new flattened key name\r\n//For a flattened key, you have digitalData.page.pageInfo.pageName and you want digitalData.page.pi.pageName\r\n/* teal.replace_keys = {\r\n    &quot;pageInfo&quot;:&quot;pi&quot;\r\n  };\r\n*/\r\n\r\n//For a flattened key, you have digitalData.page.pageInfo.pageName and you want digitalData.page.pageName\r\n/* teal.replace_keys = {\r\n    &quot;pageInfo&quot;:&quot;&quot;\r\n  };\r\n*/\r\n\r\n//For a flattened key, you have digitalData.page.pageInfo.pageName and you want digitalData.pageName\r\n/* teal.replace_keys = {\r\n    &quot;page&quot;:&quot;&quot;,\r\n    &quot;pageInfo&quot;:&quot;&quot;\r\n  };\r\n*/\r\n\r\n/*****************DO NOT MODIFY BELOW***********************/\r\n\r\nteal.flattener_version = 1.3;\r\n\r\n// From https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys\r\n// Add the Object.keys method for older versions of IE\r\nObject.keys||(Object.keys=function(){&quot;use strict&quot;;var a=Object.prototype.hasOwnProperty,b=!{toString:null}.propertyIsEnumerable(&quot;toString&quot;),c=[&quot;toString&quot;,&quot;toLocaleString&quot;,&quot;valueOf&quot;,&quot;hasOwnProperty&quot;,&quot;isPrototypeOf&quot;,&quot;propertyIsEnumerable&quot;,&quot;constructor&quot;],d=c.length;return function(e){if(&quot;object&quot;!=typeof e&amp;&amp;(&quot;function&quot;!=typeof e||null===e))throw new TypeError(&quot;Object.keys called on non-object&quot;);var g,h,f=[];for(g in e)a.call(e,g)&amp;&amp;f.push(g);if(b)for(h=0;h&lt;d;h++)a.call(e,c[h])&amp;&amp;f.push(c[h]);return f}}());\r\n\r\nteal.ignoreKey = function(key,re){\r\n  var should_ignore_key = 0;\r\n  //Build a new array to avoid running through Object.keys multiple times\r\n  if(typeof teal.ignore_keys_list === 'undefined'){\r\n    teal.ignore_keys_list = Object.keys(teal.ignore_keys);\r\n    teal.ignore_keys_list.forEach(function(name){\r\n      //Store a copy of the regex in the object\r\n      teal.ignore_keys[name] = new RegExp(&quot;^&quot;+name);\r\n      if(key.match(teal.ignore_keys[name])){\r\n        should_ignore_key = 1;\r\n      }\r\n    });\r\n  }else{\r\n    //Loop through the ignore_keys object to see if we should ignore this key\r\n    teal.ignore_keys_list.forEach(function(name){\r\n      if(key.match(teal.ignore_keys[name])){\r\n        should_ignore_key = 1;\r\n      }\r\n    });\r\n  }\r\n  return should_ignore_key;\r\n}\r\n\r\nteal.getKeyName = function(key,re){\r\n  //Create a new object to store regexs or use existing one\r\n  teal.replace_keys_regex = teal.replace_keys_regex || {};\r\n  //Build a new array to avoid running through Object.keys multiple times\r\n  if(typeof teal.replace_keys_list === 'undefined'){\r\n    teal.replace_keys_list = Object.keys(teal.replace_keys);\r\n    teal.replace_keys_list.forEach(function(name){\r\n      //Store a copy of the regex in the teal.replace_keys_regex object so that the regexs are only built once\r\n      teal.replace_keys_regex[name] = new RegExp(&quot;[&quot; + teal.nested_delimiter + &quot;]?&quot; + name + &quot;[&quot; + teal.nested_delimiter + &quot;]&quot;, &quot;g&quot;);\r\n      key = teal.keyReplace(key,name,teal.replace_keys_regex[name]);\r\n    });\r\n  }else{\r\n    //Loop through the replace_keys object to see what we should be replacing\r\n    teal.replace_keys_list.forEach(function(name){\r\n      key = teal.keyReplace(key,name,teal.replace_keys_regex[name]);\r\n    });\r\n  }\r\n  return key;\r\n}\r\n\r\nteal.keyReplace = function(key,name,re){\r\n  //Check to see if we are replacing the key name with a new value or if we are removing the key altogether\r\n  if(teal.replace_keys[name] === ''){\r\n    //The key needs to be removed completely\r\n    key = key.replace(re,teal.nested_delimiter);\r\n    //Check to see if the key starts with the nested delimiter and if so, remove it\r\n    if(key.indexOf(teal.nested_delimiter) === 0){\r\n      var cleanRegEx = new RegExp(&quot;^[&quot; + teal.nested_delimiter + &quot;]&quot;);\r\n      key = key.replace(cleanRegEx,'');\r\n    }\r\n  }else{\r\n    //Replace the key name\r\n    key = key.replace(re,teal.nested_delimiter+teal.replace_keys[name]+teal.nested_delimiter);\r\n  }\r\n  return key;\r\n}\r\n\r\nteal.processDataObject = function(obj,new_obj,parent_key,create_array){\r\n  if(typeof parent_key === &quot;undefined&quot;){\r\n    //This object isn't nested in another object\r\n    parent_key = &quot;&quot;;\r\n  }else{\r\n    //Add the nested_delimiter to the parent key if the delimiter isn't already at the end\r\n    teal.nested_delimiter_regex = teal.nested_delimiter_regex || new RegExp(&quot;[&quot;+teal.nested_delimiter+&quot;]$&quot;);\r\n    if(!parent_key.match(teal.nested_delimiter_regex)){\r\n      parent_key += &quot;&quot;+teal.nested_delimiter;\r\n    }\r\n  }\r\n  Object.keys(obj).forEach(function(key){\r\n    var nested_key_name = parent_key+key;\r\n    //Format the new key name and take out any whitespace\r\n    var new_key_name = teal.getKeyName((teal.prefix+parent_key+key).replace(/\\s/g, ''));\r\n    //Set the key_type to limit the number of typeof checks\r\n    var key_type = teal.typeOf(obj[key]);\r\n    if(key_type !== 'undefined' &amp;&amp; key_type != null){\r\n      if(key_type.match(/boolean|string|number|date/) &amp;&amp; !teal.ignoreKey(key)){\r\n        //If obj[key] is a date, convert to ISOString\r\n        if(teal.typeOf(obj[key]) === 'date'){\r\n          obj[key] = obj[key].toISOString();\r\n        }\r\n        //Check to see if we need to create an array for this data point\r\n        if(create_array){\r\n          //First check to see if this key exists\r\n          if(teal.typeOf(new_obj[new_key_name]) !== &quot;array&quot;){\r\n            //Make the key an array                       \r\n            new_obj[new_key_name] = [];\r\n          }\r\n          new_obj[new_key_name].push(&quot;&quot;+obj[key]); //Force value to be a string\r\n        }else{\r\n          //If the value of the key is a boolean or a string or a number and \r\n          //the key shouldn't be ignored add to the data layer\r\n          new_obj[new_key_name] = &quot;&quot;+obj[key]; //Force value to be a string\r\n        }\r\n      }else if(key_type === 'object' &amp;&amp; !teal.ignoreKey(key)){\r\n        //Process this piece of the data layer and merge it\r\n        teal.processDataObject(obj[key],new_obj,nested_key_name,create_array);\r\n      }else if(key_type === 'array'){\r\n        teal.processDataArray(obj[key],new_obj,nested_key_name);\r\n      }\r\n    }\r\n  });\r\n}\r\n\r\nteal.processDataArray = function(obj,new_obj,parent_key){\r\n  var objLength = obj.length; \r\n  if(typeof parent_key === &quot;undefined&quot;){\r\n    //This object isn't nested in another object\r\n    parent_key = &quot;&quot;;\r\n  }else if(objLength &gt; 0 &amp;&amp; teal.typeOf(obj[0]).match(/boolean|string|number|date/)){\r\n    //This is a normal array that doesn't need a nested delimiter\r\n  }else{\r\n    //Add the nested_delimiter to the parent key\r\n    parent_key += &quot;&quot;+teal.nested_delimiter;\r\n  }\r\n  //Format the new key name and take out any whitespace\r\n  var new_key_name = teal.getKeyName((teal.prefix+parent_key).replace(/\\s/g, ''));\r\n  for(var n = 0; n &lt; objLength; n++){\r\n    var key_type = teal.typeOf(obj[n]);\r\n    if(key_type.match(/boolean|string|number|date/)){\r\n      //If obj[n] is a date, convert to ISOString\r\n      if(key_type === 'date'){\r\n        obj[n] = obj[n].toISOString();\r\n      }\r\n      //First check to see if this key exists\r\n      if(teal.typeOf(new_obj[new_key_name]) !== &quot;array&quot;){\r\n        //Make the key an array                       \r\n        new_obj[new_key_name] = [];\r\n      }\r\n      //If the value of the key is a boolean or a string or a number and \r\n      //the key shouldn't be ignored add to the data layer                        \r\n      new_obj[new_key_name].push(&quot;&quot;+obj[n]);\r\n    }else if(key_type === 'object'){\r\n      teal.processDataObject(obj[n],new_obj,new_key_name,1);\r\n    }\r\n  }\r\n}\r\n\r\nteal.typeOf = function(e){return ({}).toString.call(e).match(/\\s([a-zA-Z]+)/)[1].toLowerCase();}\r\n\r\nteal.flattenObject = function(obj,new_obj){\r\n  //Make sure object exists\r\n  if(typeof obj === 'undefined'){\r\n    return false;\r\n  }\r\n  //Check to see if we want to flatten the same object and keep the reference\r\n  var mergeObject = false;\r\n  if(obj === new_obj){\r\n    mergeObject = true;\r\n    //Start off a clean copy of the object\r\n    new_obj = {};\r\n  }\r\n  //Make sure new object exists\r\n  if(typeof new_obj === 'undefined'){\r\n    new_obj = {};\r\n  }\r\n  //Check to see if this object is an array\r\n  if(teal.typeOf(obj) === 'array'){\r\n    //Store a safe copy of this object in case we are processing the b object\r\n    var temp_array = JSON.parse(JSON.stringify(obj));\r\n    var temp_array_length = temp_array.length;\r\n    //Clean up the object\r\n    obj = {};\r\n    //Let's see if the obj and new_obj are the same.  If so, going to assume we are using the b object\r\n    if(obj == new_obj){\r\n      //Let's ensure that we have the a object\r\n      if(typeof a === 'undefined'){\r\n        var a = 'view';\r\n      }\r\n      //Add the automatic utag data points\r\n      utag.loader.RD(new_obj,a);\r\n    }\r\n    for(var i = 0; i &lt; temp_array_length; i++){\r\n        teal.processDataObject(temp_array[i],new_obj);\r\n    }\r\n  }else{\r\n    teal.processDataObject(obj,new_obj);\r\n  }\r\n  if(mergeObject){\r\n    //Need to delete everything out of obj and replace with new_obj\r\n    Object.keys(obj).forEach(function(key){\r\n      delete obj[key];\r\n    });\r\n    //Now that we have a clean original object, add everything from new_obj which allows the reference to be kept\r\n    Object.keys(new_obj).forEach(function(key){\r\n      obj[key] = new_obj[key];\r\n    });\r\n  }\r\n\r\n  return new_obj;\r\n}","name":"qa"},"ef260e9aa3c673af240d17a2660480361a8e081d1ffeca2a5ed0e3219fc18567":{"name":"dev","code":"/**\r\n * Data Layer Flatten Helper provided by tealium.\r\n * \r\n * @documentation: https://community.tealiumiq.com/t5/iQ-Tag-Management/Data-Layer-Converter/ta-p/17581\r\n * @source: https://tags.tiqcdn.com/utag/tealium-solutions/main/prod/utag.9.js\r\n * \r\n * @usage: we use the converter inside the datalayer helper to flatten our object.\r\n */\r\n\r\n//Define the teal global namespace\r\nwindow.teal = window.teal || {};\r\nteal.ignore_keys = {};\r\nteal.replace_keys = {};\r\nteal.prefix = &quot;&quot;;\r\n\r\n//In cases of a nested object, what should join the parent key and child key\r\nteal.nested_delimiter = &quot;.&quot;;\r\n\r\n//Ignore keys in the data layer that start with the following text.\r\n//Expecting an object of strings\r\n/*\r\nteal.ignore_keys = {\r\n  &quot;user&quot; : 1,\r\n  &quot;util&quot; : 1\r\n};\r\n*/\r\n\r\n//Specify a prefix for data layer elements being sent to the utag_data object.\r\n//Instead of utag_data.productID, it could be utag_data.dl_productID\r\n// teal.prefix = &quot;dl_&quot;;\r\n\r\n//Keys to be removed from the new flattened key name\r\n//For a flattened key, you have digitalData.page.pageInfo.pageName and you want digitalData.page.pi.pageName\r\n/* teal.replace_keys = {\r\n    &quot;pageInfo&quot;:&quot;pi&quot;\r\n  };\r\n*/\r\n\r\n//For a flattened key, you have digitalData.page.pageInfo.pageName and you want digitalData.page.pageName\r\n/* teal.replace_keys = {\r\n    &quot;pageInfo&quot;:&quot;&quot;\r\n  };\r\n*/\r\n\r\n//For a flattened key, you have digitalData.page.pageInfo.pageName and you want digitalData.pageName\r\n/* teal.replace_keys = {\r\n    &quot;page&quot;:&quot;&quot;,\r\n    &quot;pageInfo&quot;:&quot;&quot;\r\n  };\r\n*/\r\n\r\n/*****************DO NOT MODIFY BELOW***********************/\r\n\r\nteal.flattener_version = 1.3;\r\n\r\n// From https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys\r\n// Add the Object.keys method for older versions of IE\r\nObject.keys||(Object.keys=function(){&quot;use strict&quot;;var a=Object.prototype.hasOwnProperty,b=!{toString:null}.propertyIsEnumerable(&quot;toString&quot;),c=[&quot;toString&quot;,&quot;toLocaleString&quot;,&quot;valueOf&quot;,&quot;hasOwnProperty&quot;,&quot;isPrototypeOf&quot;,&quot;propertyIsEnumerable&quot;,&quot;constructor&quot;],d=c.length;return function(e){if(&quot;object&quot;!=typeof e&amp;&amp;(&quot;function&quot;!=typeof e||null===e))throw new TypeError(&quot;Object.keys called on non-object&quot;);var g,h,f=[];for(g in e)a.call(e,g)&amp;&amp;f.push(g);if(b)for(h=0;h&lt;d;h++)a.call(e,c[h])&amp;&amp;f.push(c[h]);return f}}());\r\n\r\nteal.ignoreKey = function(key,re){\r\n  var should_ignore_key = 0;\r\n  //Build a new array to avoid running through Object.keys multiple times\r\n  if(typeof teal.ignore_keys_list === 'undefined'){\r\n    teal.ignore_keys_list = Object.keys(teal.ignore_keys);\r\n    teal.ignore_keys_list.forEach(function(name){\r\n      //Store a copy of the regex in the object\r\n      teal.ignore_keys[name] = new RegExp(&quot;^&quot;+name);\r\n      if(key.match(teal.ignore_keys[name])){\r\n        should_ignore_key = 1;\r\n      }\r\n    });\r\n  }else{\r\n    //Loop through the ignore_keys object to see if we should ignore this key\r\n    teal.ignore_keys_list.forEach(function(name){\r\n      if(key.match(teal.ignore_keys[name])){\r\n        should_ignore_key = 1;\r\n      }\r\n    });\r\n  }\r\n  return should_ignore_key;\r\n}\r\n\r\nteal.getKeyName = function(key,re){\r\n  //Create a new object to store regexs or use existing one\r\n  teal.replace_keys_regex = teal.replace_keys_regex || {};\r\n  //Build a new array to avoid running through Object.keys multiple times\r\n  if(typeof teal.replace_keys_list === 'undefined'){\r\n    teal.replace_keys_list = Object.keys(teal.replace_keys);\r\n    teal.replace_keys_list.forEach(function(name){\r\n      //Store a copy of the regex in the teal.replace_keys_regex object so that the regexs are only built once\r\n      teal.replace_keys_regex[name] = new RegExp(&quot;[&quot; + teal.nested_delimiter + &quot;]?&quot; + name + &quot;[&quot; + teal.nested_delimiter + &quot;]&quot;, &quot;g&quot;);\r\n      key = teal.keyReplace(key,name,teal.replace_keys_regex[name]);\r\n    });\r\n  }else{\r\n    //Loop through the replace_keys object to see what we should be replacing\r\n    teal.replace_keys_list.forEach(function(name){\r\n      key = teal.keyReplace(key,name,teal.replace_keys_regex[name]);\r\n    });\r\n  }\r\n  return key;\r\n}\r\n\r\nteal.keyReplace = function(key,name,re){\r\n  //Check to see if we are replacing the key name with a new value or if we are removing the key altogether\r\n  if(teal.replace_keys[name] === ''){\r\n    //The key needs to be removed completely\r\n    key = key.replace(re,teal.nested_delimiter);\r\n    //Check to see if the key starts with the nested delimiter and if so, remove it\r\n    if(key.indexOf(teal.nested_delimiter) === 0){\r\n      var cleanRegEx = new RegExp(&quot;^[&quot; + teal.nested_delimiter + &quot;]&quot;);\r\n      key = key.replace(cleanRegEx,'');\r\n    }\r\n  }else{\r\n    //Replace the key name\r\n    key = key.replace(re,teal.nested_delimiter+teal.replace_keys[name]+teal.nested_delimiter);\r\n  }\r\n  return key;\r\n}\r\n\r\nteal.processDataObject = function(obj,new_obj,parent_key,create_array){\r\n  if(typeof parent_key === &quot;undefined&quot;){\r\n    //This object isn't nested in another object\r\n    parent_key = &quot;&quot;;\r\n  }else{\r\n    //Add the nested_delimiter to the parent key if the delimiter isn't already at the end\r\n    teal.nested_delimiter_regex = teal.nested_delimiter_regex || new RegExp(&quot;[&quot;+teal.nested_delimiter+&quot;]$&quot;);\r\n    if(!parent_key.match(teal.nested_delimiter_regex)){\r\n      parent_key += &quot;&quot;+teal.nested_delimiter;\r\n    }\r\n  }\r\n  Object.keys(obj).forEach(function(key){\r\n    var nested_key_name = parent_key+key;\r\n    //Format the new key name and take out any whitespace\r\n    var new_key_name = teal.getKeyName((teal.prefix+parent_key+key).replace(/\\s/g, ''));\r\n    //Set the key_type to limit the number of typeof checks\r\n    var key_type = teal.typeOf(obj[key]);\r\n    if(key_type !== 'undefined' &amp;&amp; key_type != null){\r\n      if(key_type.match(/boolean|string|number|date/) &amp;&amp; !teal.ignoreKey(key)){\r\n        //If obj[key] is a date, convert to ISOString\r\n        if(teal.typeOf(obj[key]) === 'date'){\r\n          obj[key] = obj[key].toISOString();\r\n        }\r\n        //Check to see if we need to create an array for this data point\r\n        if(create_array){\r\n          //First check to see if this key exists\r\n          if(teal.typeOf(new_obj[new_key_name]) !== &quot;array&quot;){\r\n            //Make the key an array                       \r\n            new_obj[new_key_name] = [];\r\n          }\r\n          new_obj[new_key_name].push(&quot;&quot;+obj[key]); //Force value to be a string\r\n        }else{\r\n          //If the value of the key is a boolean or a string or a number and \r\n          //the key shouldn't be ignored add to the data layer\r\n          new_obj[new_key_name] = &quot;&quot;+obj[key]; //Force value to be a string\r\n        }\r\n      }else if(key_type === 'object' &amp;&amp; !teal.ignoreKey(key)){\r\n        //Process this piece of the data layer and merge it\r\n        teal.processDataObject(obj[key],new_obj,nested_key_name,create_array);\r\n      }else if(key_type === 'array'){\r\n        teal.processDataArray(obj[key],new_obj,nested_key_name);\r\n      }\r\n    }\r\n  });\r\n}\r\n\r\nteal.processDataArray = function(obj,new_obj,parent_key){\r\n  var objLength = obj.length; \r\n  if(typeof parent_key === &quot;undefined&quot;){\r\n    //This object isn't nested in another object\r\n    parent_key = &quot;&quot;;\r\n  }else if(objLength &gt; 0 &amp;&amp; teal.typeOf(obj[0]).match(/boolean|string|number|date/)){\r\n    //This is a normal array that doesn't need a nested delimiter\r\n  }else{\r\n    //Add the nested_delimiter to the parent key\r\n    parent_key += &quot;&quot;+teal.nested_delimiter;\r\n  }\r\n  //Format the new key name and take out any whitespace\r\n  var new_key_name = teal.getKeyName((teal.prefix+parent_key).replace(/\\s/g, ''));\r\n  for(var n = 0; n &lt; objLength; n++){\r\n    var key_type = teal.typeOf(obj[n]);\r\n    if(key_type.match(/boolean|string|number|date/)){\r\n      //If obj[n] is a date, convert to ISOString\r\n      if(key_type === 'date'){\r\n        obj[n] = obj[n].toISOString();\r\n      }\r\n      //First check to see if this key exists\r\n      if(teal.typeOf(new_obj[new_key_name]) !== &quot;array&quot;){\r\n        //Make the key an array                       \r\n        new_obj[new_key_name] = [];\r\n      }\r\n      //If the value of the key is a boolean or a string or a number and \r\n      //the key shouldn't be ignored add to the data layer                        \r\n      new_obj[new_key_name].push(&quot;&quot;+obj[n]);\r\n    }else if(key_type === 'object'){\r\n      teal.processDataObject(obj[n],new_obj,new_key_name,1);\r\n    }\r\n  }\r\n}\r\n\r\nteal.typeOf = function(e){return ({}).toString.call(e).match(/\\s([a-zA-Z]+)/)[1].toLowerCase();}\r\n\r\nteal.flattenObject = function(obj,new_obj){\r\n  //Make sure object exists\r\n  if(typeof obj === 'undefined'){\r\n    return false;\r\n  }\r\n  //Check to see if we want to flatten the same object and keep the reference\r\n  var mergeObject = false;\r\n  if(obj === new_obj){\r\n    mergeObject = true;\r\n    //Start off a clean copy of the object\r\n    new_obj = {};\r\n  }\r\n  //Make sure new object exists\r\n  if(typeof new_obj === 'undefined'){\r\n    new_obj = {};\r\n  }\r\n  //Check to see if this object is an array\r\n  if(teal.typeOf(obj) === 'array'){\r\n    //Store a safe copy of this object in case we are processing the b object\r\n    var temp_array = JSON.parse(JSON.stringify(obj));\r\n    var temp_array_length = temp_array.length;\r\n    //Clean up the object\r\n    obj = {};\r\n    //Let's see if the obj and new_obj are the same.  If so, going to assume we are using the b object\r\n    if(obj == new_obj){\r\n      //Let's ensure that we have the a object\r\n      if(typeof a === 'undefined'){\r\n        var a = 'view';\r\n      }\r\n      //Add the automatic utag data points\r\n      utag.loader.RD(new_obj,a);\r\n    }\r\n    for(var i = 0; i &lt; temp_array_length; i++){\r\n        teal.processDataObject(temp_array[i],new_obj);\r\n    }\r\n  }else{\r\n    teal.processDataObject(obj,new_obj);\r\n  }\r\n  if(mergeObject){\r\n    //Need to delete everything out of obj and replace with new_obj\r\n    Object.keys(obj).forEach(function(key){\r\n      delete obj[key];\r\n    });\r\n    //Now that we have a clean original object, add everything from new_obj which allows the reference to be kept\r\n    Object.keys(new_obj).forEach(function(key){\r\n      obj[key] = new_obj[key];\r\n    });\r\n  }\r\n\r\n  return new_obj;\r\n}","promotedBy":"ankang.shi@1und1.de","promotedTimestamp":"201908201252","promotedDraftName":"INIT"}},"draftSeq":"1"},"initialize":"","scope":"preload","constructor":"","status":"active","advExecOption":"alr","title":"HELPER - Teal Flatten Javascript Object","id":"100040"}},"datacloudLinkedProfiles":"{&quot;main&quot;:{&quot;rev&quot;:&quot;1566904909656&quot;,&quot;env&quot;:&quot;AudienceStream&quot;}}","email":"caleb.jaquith@tealium.com","title":"Version - 2019/08/29 13:43","datacloud_merge":"true","datacloud_profile_name":"main","datacloud_revision":"1625226277606","experiments":[{"id":"load_order_manager","enabled":false}]}
