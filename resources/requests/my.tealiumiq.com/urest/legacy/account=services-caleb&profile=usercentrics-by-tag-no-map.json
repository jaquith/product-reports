{"label_relationships":null,"linkedProfiles":"{ }","profile":"usercentrics-by-tag-no-map","publish_history":{"202010080750":{"202010080750":{"publishedConsent":"[ ]","versionorigin":"202010071214","notes":"Update prod","action":"Published to dev","status":"prod,qa,dev","lastmanageid":"15","operator":"caleb.jaquith@tealium.com","publishedTags":"[ \"6\" , \"7\" , \"8\" , \"9\" , \"10\" , \"11\" , \"15\"]","title":"Version 2020.10.08.0750","lastcustomizeid":"0","history":"[ { \"action\" : \"updated_extension\" , \"data\" : { \"id\" : \"10\" , \"name\" : \"RELEASE 1/2\" , \"type\" : \"100040\" , \"kind\" : \"Extension\" , \"operation\" : \"updated\" , \"container\" : \"customizations_10\" , \"tab_name\" : \"customizations\"}} , { \"action\" : \"updated_extension\" , \"data\" : { \"id\" : \"11\" , \"name\" : \"RELEASE 2/2\" , \"type\" : \"100040\" , \"kind\" : \"Extension\" , \"operation\" : \"updated\" , \"container\" : \"customizations_11\" , \"tab_name\" : \"customizations\"}}]","datacloudLinkedProfiles":"{&quot;main&quot;:{&quot;rev&quot;:&quot;1598628086246&quot;,&quot;env&quot;:&quot;AudienceStream&quot;}}","publishedExtensions":"[ \"10\" , \"11\" , \"17\" , \"18\"]","linkedProfiles":"{ }"},"title":"Version 2020.10.08.0750","status":"Not Published","size":"74"},"202008191408":{"title":"Initial publish","202008191408":{"operator":"caleb.jaquith@tealium.com","publishedTags":"[ \"6\" , \"7\" , \"8\" , \"9\" , \"10\" , \"11\"]","status":"prod,qa,dev","lastmanageid":"","action":"Published to dev","publishedConsent":"","notes":"Initial publish on profile creation","versionorigin":"","linkedProfiles":"{ }","publishedExtensions":"[ \"10\" , \"11\" , \"14\"]","datacloudLinkedProfiles":"{}","title":"Initial publish","lastcustomizeid":"","history":""},"size":"66","status":"Not Published"},"202010290903":{"202010290903":{"operator":"caleb.jaquith@tealium.com","publishedTags":"[ \"6\" , \"7\" , \"8\" , \"9\" , \"10\" , \"11\" , \"15\"]","status":"qa,dev","lastmanageid":"15","action":"Published to dev","notes":"Update to v0.10-beta","versionorigin":"202010080750","publishedConsent":"[ ]","linkedProfiles":"{ }","publishedExtensions":"[ \"10\" , \"11\" , \"17\" , \"18\"]","datacloudLinkedProfiles":"{&quot;main&quot;:{&quot;rev&quot;:&quot;1598628086246&quot;,&quot;env&quot;:&quot;AudienceStream&quot;}}","lastcustomizeid":"0","history":"[ { \"action\" : \"updated_extension\" , \"data\" : { \"id\" : \"17\" , \"name\" : \"TEST 1/2\" , \"type\" : \"100040\" , \"kind\" : \"Extension\" , \"operation\" : \"updated\" , \"container\" : \"customizations_17\" , \"tab_name\" : \"customizations\"}}]","title":"Version 2020.10.29.0903"},"size":"74","status":"Not Published","title":"Version 2020.10.29.0903"},"202009181330":{"size":"71","202009181330":{"datacloudLinkedProfiles":"{&quot;main&quot;:{&quot;rev&quot;:&quot;1598628086246&quot;,&quot;env&quot;:&quot;AudienceStream&quot;}}","history":"[ { \"action\" : \"added_tag\" , \"data\" : { \"id\" : \"15\" , \"tag_name\" : \"Tealium Generic Tag\" , \"library\" : \"\" , \"name\" : \"Tealium Generic Tag\" , \"kind\" : \"Tag\" , \"operation\" : \"added\" , \"container\" : \"manage_content_160043578432400041\" , \"tab_name\" : \"manage\"}} , { \"action\" : \"updated_extension\" , \"data\" : { \"id\" : \"10\" , \"name\" : \"New 1/2\" , \"type\" : \"100040\" , \"kind\" : \"Extension\" , \"operation\" : \"updated\" , \"container\" : \"customizations_10\" , \"tab_name\" : \"customizations\"}} , { \"action\" : \"updated_extension\" , \"data\" : { \"id\" : \"11\" , \"name\" : \"New 2/2\" , \"type\" : \"100040\" , \"kind\" : \"Extension\" , \"operation\" : \"updated\" , \"container\" : \"customizations_11\" , \"tab_name\" : \"customizations\"}}]","lastcustomizeid":"0","title":"Version 2020.09.18.1330","linkedProfiles":"{ }","publishedExtensions":"[ \"10\" , \"11\"]","action":"Published to dev","publishedConsent":"[ ]","versionorigin":"202009021215","notes":"Update to new release, add tag 15","operator":"caleb.jaquith@tealium.com","publishedTags":"[ \"6\" , \"7\" , \"8\" , \"9\" , \"10\" , \"11\" , \"15\"]","lastmanageid":"15","status":"prod,qa,dev"},"status":"Not Published","title":"Version 2020.09.18.1330"},"202008191413":{"202008191413":{"datacloudLinkedProfiles":"{&quot;main&quot;:{&quot;rev&quot;:&quot;1578646843063&quot;,&quot;env&quot;:&quot;AudienceStream&quot;}}","history":"[ { \"action\" : \"toggled_extension\" , \"data\" : { \"id\" : \"14\" , \"name\" : \"CMP Map\" , \"type\" : \"100040\" , \"status\" : \"inactive\" , \"kind\" : \"Extension\" , \"operation\" : \"toggled\" , \"container\" : \"customizations_14\" , \"tab_name\" : \"customizations\"}} , { \"action\" : \"updated_profile_template\" , \"data\" : { \"id\" : \"loader\" , \"name\" : \"uTag Loader (Profile) UID:loader\" , \"kind\" : \"Template\" , \"operation\" : \"updated\" , \"tab_name\" : \"Template\"}} , { \"action\" : \"updated_extension\" , \"data\" : { \"id\" : \"14\" , \"name\" : \"CMP Map (inactive to verify behavior if map is missing)\" , \"type\" : \"100040\" , \"kind\" : \"Extension\" , \"operation\" : \"updated\" , \"container\" : \"customizations_14\" , \"tab_name\" : \"customizations\"}}]","lastcustomizeid":"0","title":"Version 2020.08.19.1412","publishedExtensions":"[ \"10\" , \"11\"]","linkedProfiles":"{ }","action":"Published to dev","publishedConsent":"[ ]","notes":"Edit template and deactivate map extension","versionorigin":"202008191408","operator":"caleb.jaquith@tealium.com","publishedTags":"[ \"6\" , \"7\" , \"8\" , \"9\" , \"10\" , \"11\"]","lastmanageid":"11","status":"prod,qa,dev"},"size":"65","status":"Not Published","title":"Version 2020.08.19.1412"},"202010071206":{"title":"Version 2020.10.07.1206","size":"74","status":"Not Published","202010071206":{"publishedConsent":"[ ]","notes":"Update","versionorigin":"202010061209","action":"Published to dev","lastmanageid":"15","status":"qa,dev","operator":"caleb.jaquith@tealium.com","publishedTags":"[ \"6\" , \"7\" , \"8\" , \"9\" , \"10\" , \"11\" , \"15\"]","title":"Version 2020.10.07.1206","history":"[ { \"action\" : \"updated_extension\" , \"data\" : { \"id\" : \"17\" , \"name\" : \"TEST 1/2\" , \"type\" : \"100040\" , \"kind\" : \"Extension\" , \"operation\" : \"updated\" , \"container\" : \"customizations_17\" , \"tab_name\" : \"customizations\"}}]","lastcustomizeid":"0","datacloudLinkedProfiles":"{&quot;main&quot;:{&quot;rev&quot;:&quot;1598628086246&quot;,&quot;env&quot;:&quot;AudienceStream&quot;}}","publishedExtensions":"[ \"10\" , \"11\" , \"17\" , \"18\"]","linkedProfiles":"{ }"}},"202010061020":{"title":"Version 2020.10.06.1020","202010061020":{"action":"Published to dev","notes":"Update","publishedConsent":"[ ]","versionorigin":"202010051352","operator":"caleb.jaquith@tealium.com","publishedTags":"[ \"6\" , \"7\" , \"8\" , \"9\" , \"10\" , \"11\" , \"15\"]","status":"qa,dev","lastmanageid":"15","datacloudLinkedProfiles":"{&quot;main&quot;:{&quot;rev&quot;:&quot;1598628086246&quot;,&quot;env&quot;:&quot;AudienceStream&quot;}}","title":"Version 2020.10.06.1020","history":"[ { \"action\" : \"updated_extension\" , \"data\" : { \"id\" : \"17\" , \"name\" : \"TEST 1/2\" , \"type\" : \"100040\" , \"kind\" : \"Extension\" , \"operation\" : \"updated\" , \"container\" : \"customizations_17\" , \"tab_name\" : \"customizations\"}} , { \"action\" : \"updated_extension\" , \"data\" : { \"id\" : \"18\" , \"name\" : \"TEST 2/2\" , \"type\" : \"100040\" , \"kind\" : \"Extension\" , \"operation\" : \"updated\" , \"container\" : \"customizations_18\" , \"tab_name\" : \"customizations\"}}]","lastcustomizeid":"0","publishedExtensions":"[ \"10\" , \"11\" , \"17\" , \"18\"]","linkedProfiles":"{ }"},"size":"74","status":"Not Published"},"202010061209":{"status":"Not Published","size":"74","202010061209":{"status":"qa,dev","lastmanageid":"15","operator":"caleb.jaquith@tealium.com","publishedTags":"[ \"6\" , \"7\" , \"8\" , \"9\" , \"10\" , \"11\" , \"15\"]","publishedConsent":"[ ]","notes":"Updates","versionorigin":"202010061020","action":"Published to dev","linkedProfiles":"{ }","publishedExtensions":"[ \"10\" , \"11\" , \"17\" , \"18\"]","title":"Version 2020.10.06.1209","lastcustomizeid":"0","history":"[ { \"action\" : \"updated_extension\" , \"data\" : { \"id\" : \"17\" , \"name\" : \"TEST 1/2\" , \"type\" : \"100040\" , \"kind\" : \"Extension\" , \"operation\" : \"updated\" , \"container\" : \"customizations_17\" , \"tab_name\" : \"customizations\"}}]","datacloudLinkedProfiles":"{&quot;main&quot;:{&quot;rev&quot;:&quot;1598628086246&quot;,&quot;env&quot;:&quot;AudienceStream&quot;}}"},"title":"Version 2020.10.06.1209"},"202008201236":{"202008201236":{"linkedProfiles":"{ }","publishedExtensions":"[ \"10\" , \"11\"]","title":"Version 2020.08.20.1235","history":"[ { \"action\" : \"updated_extension\" , \"data\" : { \"id\" : \"10\" , \"name\" : \"New 1/2\" , \"type\" : \"100040\" , \"kind\" : \"Extension\" , \"operation\" : \"updated\" , \"container\" : \"customizations_10\" , \"tab_name\" : \"customizations\"}} , { \"action\" : \"updated_extension\" , \"data\" : { \"id\" : \"11\" , \"name\" : \"New 2/2\" , \"type\" : \"100040\" , \"kind\" : \"Extension\" , \"operation\" : \"updated\" , \"container\" : \"customizations_11\" , \"tab_name\" : \"customizations\"}}]","lastcustomizeid":"0","datacloudLinkedProfiles":"{&quot;main&quot;:{&quot;rev&quot;:&quot;1578646843063&quot;,&quot;env&quot;:&quot;AudienceStream&quot;}}","lastmanageid":"11","status":"prod,qa,dev","publishedTags":"[ \"6\" , \"7\" , \"8\" , \"9\" , \"10\" , \"11\"]","operator":"caleb.jaquith@tealium.com","notes":"Updates ","publishedConsent":"[ ]","versionorigin":"202008191413","action":"Published to dev"},"title":"Version 2020.08.20.1235","status":"Not Published","size":"66"},"202010051352":{"202010051352":{"datacloudLinkedProfiles":"{&quot;main&quot;:{&quot;rev&quot;:&quot;1598628086246&quot;,&quot;env&quot;:&quot;AudienceStream&quot;}}","history":"[ { \"action\" : \"added_extension\" , \"data\" : { \"id\" : \"17\" , \"name\" : \"Copy New 1/2\" , \"type\" : \"100040\" , \"library\" : \"\" , \"kind\" : \"Extension\" , \"operation\" : \"added\" , \"container\" : \"customizations_17\" , \"tab_name\" : \"customizations\"}} , { \"action\" : \"updated_extension\" , \"data\" : { \"id\" : \"10\" , \"name\" : \"RELEASE 1/2\" , \"type\" : \"100040\" , \"kind\" : \"Extension\" , \"operation\" : \"updated\" , \"container\" : \"customizations_10\" , \"tab_name\" : \"customizations\"}} , { \"action\" : \"updated_extension\" , \"data\" : { \"id\" : \"11\" , \"name\" : \"RELEASE 2/2\" , \"type\" : \"100040\" , \"kind\" : \"Extension\" , \"operation\" : \"updated\" , \"container\" : \"customizations_11\" , \"tab_name\" : \"customizations\"}} , { \"action\" : \"added_extension\" , \"data\" : { \"id\" : \"18\" , \"name\" : \"Copy RELEASE 2/2\" , \"type\" : \"100040\" , \"library\" : \"\" , \"kind\" : \"Extension\" , \"operation\" : \"added\" , \"container\" : \"customizations_18\" , \"tab_name\" : \"customizations\"}}]","lastcustomizeid":"0","title":"Version 2020.10.05.1352","publishedExtensions":"[ \"10\" , \"11\" , \"17\" , \"18\"]","linkedProfiles":"{ }","action":"Published to dev","publishedConsent":"[ ]","versionorigin":"202009181343","notes":"Update","operator":"caleb.jaquith@tealium.com","publishedTags":"[ \"6\" , \"7\" , \"8\" , \"9\" , \"10\" , \"11\" , \"15\"]","lastmanageid":"15","status":"prod,qa,dev"},"title":"Version 2020.10.05.1352","size":"74","status":"Not Published"},"202011040726":{"title":"Version 2020.11.04.0726","size":"89","status":"prod,qa,dev","202011040726":{"versionorigin":"202011040724","notes":"v0.10-beta to prod","publishedConsent":"[ ]","action":"Published to dev","status":"prod,qa,dev","lastmanageid":"15","publishedTags":"[ \"6\" , \"7\" , \"8\" , \"9\" , \"10\" , \"11\" , \"15\"]","operator":"caleb.jaquith@tealium.com","title":"Version 2020.11.04.0726","history":"[ { \"action\" : \"updated_extension\" , \"data\" : { \"id\" : \"10\" , \"name\" : \"RELEASE 1/2\" , \"type\" : \"100040\" , \"kind\" : \"Extension\" , \"operation\" : \"updated\" , \"container\" : \"customizations_10\" , \"tab_name\" : \"customizations\"}}]","lastcustomizeid":"0","datacloudLinkedProfiles":"{&quot;main&quot;:{&quot;rev&quot;:&quot;1598628086246&quot;,&quot;env&quot;:&quot;AudienceStream&quot;}}","linkedProfiles":"{ }","publishedExtensions":"[ \"10\" , \"11\" , \"17\" , \"18\"]"}},"202009181343":{"202009181343":{"action":"Published to dev","notes":"Update pixel endpoint","publishedConsent":"[ ]","versionorigin":"202009181330","operator":"caleb.jaquith@tealium.com","publishedTags":"[ \"6\" , \"7\" , \"8\" , \"9\" , \"10\" , \"11\" , \"15\"]","lastmanageid":"15","status":"prod,qa,dev","datacloudLinkedProfiles":"{&quot;main&quot;:{&quot;rev&quot;:&quot;1598628086246&quot;,&quot;env&quot;:&quot;AudienceStream&quot;}}","history":"[ { \"action\" : \"updated_tag\" , \"data\" : { \"id\" : \"6\" , \"tag_name\" : \"Tealium Generic Tag\" , \"name\" : \"Tealium Generic Tag\" , \"kind\" : \"Tag\" , \"operation\" : \"updated\" , \"container\" : \"manage_content_160043657367400056\" , \"tab_name\" : \"manage\"}} , { \"action\" : \"updated_tag\" , \"data\" : { \"id\" : \"7\" , \"tag_name\" : \"Tealium Generic Tag\" , \"name\" : \"Tealium Generic Tag Copy 1\" , \"kind\" : \"Tag\" , \"operation\" : \"updated\" , \"container\" : \"manage_content_160043657367500057\" , \"tab_name\" : \"manage\"}} , { \"action\" : \"updated_tag\" , \"data\" : { \"id\" : \"8\" , \"tag_name\" : \"Tealium Generic Tag\" , \"name\" : \"Tealium Generic Tag Copy 2\" , \"kind\" : \"Tag\" , \"operation\" : \"updated\" , \"container\" : \"manage_content_160043657367600058\" , \"tab_name\" : \"manage\"}} , { \"action\" : \"updated_tag\" , \"data\" : { \"id\" : \"9\" , \"tag_name\" : \"Tealium Generic Tag\" , \"name\" : \"Tealium Generic Tag Copy 3\" , \"kind\" : \"Tag\" , \"operation\" : \"updated\" , \"container\" : \"manage_content_160043657367700059\" , \"tab_name\" : \"manage\"}} , { \"action\" : \"updated_tag\" , \"data\" : { \"id\" : \"10\" , \"tag_name\" : \"Tealium Generic Tag\" , \"name\" : \"Tealium Generic Tag Copy 4\" , \"kind\" : \"Tag\" , \"operation\" : \"updated\" , \"container\" : \"manage_content_160043657367800060\" , \"tab_name\" : \"manage\"}} , { \"action\" : \"updated_tag\" , \"data\" : { \"id\" : \"11\" , \"tag_name\" : \"Tealium Generic Tag\" , \"name\" : \"Tealium Generic Tag Copy 5\" , \"kind\" : \"Tag\" , \"operation\" : \"updated\" , \"container\" : \"manage_content_160043657367800061\" , \"tab_name\" : \"manage\"}} , { \"action\" : \"updated_tag\" , \"data\" : { \"id\" : \"15\" , \"tag_name\" : \"Tealium Generic Tag\" , \"name\" : \"Tealium Generic Tag Copy 6\" , \"kind\" : \"Tag\" , \"operation\" : \"updated\" , \"container\" : \"manage_content_160043657367900062\" , \"tab_name\" : \"manage\"}}]","title":"Version 2020.09.18.1343","lastcustomizeid":"0","linkedProfiles":"{ }","publishedExtensions":"[ \"10\" , \"11\"]"},"status":"Not Published","size":"71","title":"Version 2020.09.18.1343"},"202010071214":{"size":"74","202010071214":{"action":"Published to dev","publishedConsent":"[ ]","versionorigin":"202010071206","notes":"Force?","publishedTags":"[ \"6\" , \"7\" , \"8\" , \"9\" , \"10\" , \"11\" , \"15\"]","operator":"caleb.jaquith@tealium.com","status":"qa,dev","lastmanageid":"15","datacloudLinkedProfiles":"{&quot;main&quot;:{&quot;rev&quot;:&quot;1598628086246&quot;,&quot;env&quot;:&quot;AudienceStream&quot;}}","lastcustomizeid":"0","title":"Version 2020.10.07.1214","history":"[ { \"action\" : \"updated_extension\" , \"data\" : { \"id\" : \"17\" , \"name\" : \"TEST 1/2\" , \"type\" : \"100040\" , \"kind\" : \"Extension\" , \"operation\" : \"updated\" , \"container\" : \"customizations_17\" , \"tab_name\" : \"customizations\"}}]","publishedExtensions":"[ \"10\" , \"11\" , \"17\" , \"18\"]","linkedProfiles":"{ }"},"status":"Not Published","title":"Version 2020.10.07.1214"},"202009021215":{"title":"Version 2020.09.02.1215","202009021215":{"datacloudLinkedProfiles":"{&quot;main&quot;:{&quot;rev&quot;:&quot;1598628086246&quot;,&quot;env&quot;:&quot;AudienceStream&quot;}}","title":"Version 2020.09.02.1215","lastcustomizeid":"0","history":"[ { \"action\" : \"updated_extension\" , \"data\" : { \"id\" : \"10\" , \"name\" : \"New 1/2\" , \"type\" : \"100040\" , \"kind\" : \"Extension\" , \"operation\" : \"updated\" , \"container\" : \"customizations_10\" , \"tab_name\" : \"customizations\"}} , { \"action\" : \"updated_extension\" , \"data\" : { \"id\" : \"11\" , \"name\" : \"New 2/2\" , \"type\" : \"100040\" , \"kind\" : \"Extension\" , \"operation\" : \"updated\" , \"container\" : \"customizations_11\" , \"tab_name\" : \"customizations\"}}]","publishedExtensions":"[ \"10\" , \"11\"]","linkedProfiles":"{ }","action":"Published to dev","notes":"Update to new release","versionorigin":"202008201236","publishedConsent":"[ ]","publishedTags":"[ \"6\" , \"7\" , \"8\" , \"9\" , \"10\" , \"11\"]","operator":"caleb.jaquith@tealium.com","lastmanageid":"11","status":"prod,qa,dev"},"status":"Not Published","size":"66"},"202011040724":{"title":"Version 2020.11.04.0724","202011040724":{"publishedExtensions":"[ \"10\" , \"11\" , \"17\" , \"18\"]","linkedProfiles":"{ }","lastcustomizeid":"0","history":"[ { \"action\" : \"updated_extension\" , \"data\" : { \"id\" : \"10\" , \"name\" : \"RELEASE 1/2\" , \"type\" : \"100040\" , \"kind\" : \"Extension\" , \"operation\" : \"updated\" , \"container\" : \"customizations_10\" , \"tab_name\" : \"customizations\"}}]","title":"Version 2020.11.04.0724","datacloudLinkedProfiles":"{&quot;main&quot;:{&quot;rev&quot;:&quot;1598628086246&quot;,&quot;env&quot;:&quot;AudienceStream&quot;}}","lastmanageid":"15","status":"prod,qa,dev","publishedTags":"[ \"6\" , \"7\" , \"8\" , \"9\" , \"10\" , \"11\" , \"15\"]","operator":"caleb.jaquith@tealium.com","publishedConsent":"[ ]","notes":"v0.10-beta to prod","versionorigin":"202010290903","action":"Published to dev"},"size":"89","status":"Not Published"}},"account":"services-caleb","lastcustomizeid":"0","history":"[ { \"action\" : \"updated_extension\" , \"data\" : { \"id\" : \"10\" , \"name\" : \"RELEASE 1/2\" , \"type\" : \"100040\" , \"kind\" : \"Extension\" , \"operation\" : \"updated\" , \"container\" : \"customizations_10\" , \"tab_name\" : \"customizations\"}}]","profile_action_type":"SaveAs","lastmanageid":"15","test":{},"importable_library":"NONE","revision":"202011040724","publish":{"enable_utf8_encoding":"yes","minify":"yes","smartFTP":{"prod":"preMCDN","dev":"preMCDN","qa":"preMCDN"}},"loadrules":{"2":{"0":{"operator_0":"populated","input_0":"js.test","operator_1":"equals","filter_0":"","filter_1":"test123","input_1":"js.test"},"startDate":"------------","id":"2","containerId":"loadrules_content_160447466027100021","title":"test123","endDate":"------------","constructor":"","status":"active","_id":"2","labels":"","initialize":"","sort":"1","editable":"true"}},"customizations":{"10":{"title":"RELEASE 1/2","id":"100040","status":"active","scope":"preload","constructor":"","advExecOption":"alr","initialize":"","labels":"","codeDevData":{"queueSeq":"107","draftSnippets":{"7a04d78e08e772d2120d15cfebc31b13a3d9cb8dd002560b1aae5d31bf9035e7":{"code":"/**\n *  Scope       : Pre Loader\n *  Condition   : n/a\n *  Description : CMP 1/2 - Preloader component - prevent TiQ from loading if no consent, queue implicitly consented events to retrigger (for new tags only) if explicit decision is made.\n */\n\n/**\n  * @module extension-1\n  *\n  * @description The 'Pre Loader' extension component of the CMP integration, responsible for stopping Tealium iQ from loading/running as appropriate, and making certain\n  * window-scoped functions available to the other components.\n  */\n\n// Tealium iQ runs Pre Loader extensions in global scope, which would make all variables global. We don't want to do that.\n(function avoidGlobalScopeUnlessExplicit () {\n  // set names for key objects and variables to make them easy to change if needed\n\n  var version = 'v0.10-beta'\n\n  // for the consent information in the b object\n  var nameOfVendorOptInArray = 'usercentrics_services_with_consent'\n  var nameOfConsentTypeString = 'usercentrics_consent_type'\n\n  // for the name in the queue\n  var nameOfImplicitConsentArray = '_usercentrics_services_already_processed'\n\n  // name to use when calling utag.handler.trigger to indicate a consent polling call\n  var nameOfConsentPollingEvent = 'tiq_usercentrics_consent_polling'\n\n  var consentTimeoutInterval = 400 // setTimeout interval in MS - rate to poll for new (explicit) consent decision or correctly formed object\n\n  // check for the Tealium Debug cookie, see https://docs.tealium.com/platforms/javascript/debugging/\n  var tiqInDebugMode = /utagdb=true/.test(document.cookie)\n  var tealiumEnvironment = getTealiumEnvironment() || 'prod' // fall back to prod (stops logging) if something goes wrong with the function\n\n  /**\n   * A window-scoped (global) object used to expose selected functionality.\n   *\n   * @namespace tealiumCmpIntegration\n   * @type {object}\n   * @memberof! &lt;global&gt;\n   */\n  window.tealiumCmpIntegration = window.tealiumCmpIntegration || {}\n\n  /**\n   * The name of the CMP (&quot;Usercentrics Vanilla App&quot; in this case).\n   * @name cmpName\n   * @type {string}\n   * @memberof! tealiumCmpIntegration\n   */\n  window.tealiumCmpIntegration.cmpName = 'Usercentrics Vanilla App'\n\n  /**\n   * A map of Usercentrics Data Processing Services to arrays of Tealium iQ tag UIDs, a {@link ServiceToTagMap ServiceToTagMap}\n   * @name map\n   * @type {object}\n   * @memberof! tealiumCmpIntegration\n   */\n  var map = window.tealiumCmpIntegration.map || {}\n\n  /**\n   * A map of Usercentrics Data Processing Services to arrays of Tealium iQ tag UIDs, a {@link TagToServiceMap TagToServiceMap}\n   * @name tagBasedMap\n   * @type {object}\n   * @memberof! tealiumCmpIntegration\n   */\n  generateTagBasedMap() // populates the window-level object for you as well\n\n  /**\n   * The Service Name for Tealium iQ in Usercentrics (used to decide if the TMS is allowed to run).  Uses the Usercentrics standard name if not provided.\n   * @name tiqServiceName\n   * @type {object}\n   * @memberof! tealiumCmpIntegration\n   * @default 'Tealium iQ Tag Management'\n   * @example\nwindow.tealiumCmpIntegration = window.tealiumCmpIntegration || {}\nwindow.tealiumCmpIntegration.tiqServiceName = &quot;Tealium iQ Tag Management&quot;\n   */\n  var tiqServiceName = window.tealiumCmpIntegration.tiqServiceName || 'Tealium iQ Tag Management' // use the standard name here if not set\n\n  /**\n   * The current version designation.\n   * @name version\n   * @type {string}\n   * @memberof! tealiumCmpIntegration\n   */\n  window.tealiumCmpIntegration.version = version\n\n  /**\n   * A [logger helper function]{@link module:extension-1~logger}, to help Tealium iQ users understand and troubleshoot this CMP integration without unneeded logging in production.\n   * @name logger\n   * @type {function}\n   * @memberof! tealiumCmpIntegration\n   */\n  window.tealiumCmpIntegration.logger = logger\n\n  /**\n   * A [helper function]{@link module:extension-1~getCurrentConsentDecision} that returns the current [ConsentDecision]{@link ConsentDecision}.\n   * @name getCurrentConsentDecision\n   * @type {function}\n   * @memberof! tealiumCmpIntegration\n   */\n  window.tealiumCmpIntegration.getCurrentConsentDecision = getCurrentConsentDecision\n\n  /**\n   * A [helper function]{@link module:extension-1~getCurrentUsercentricsSettingsId} that returns the current Usercentrics settingsId.\n   * @name getCurrentUsercentricsSettingsId\n   * @type {function}\n   * @memberof! tealiumCmpIntegration\n   */\n  window.tealiumCmpIntegration.getCurrentUsercentricsSettingsId = getCurrentUsercentricsSettingsId\n\n  /**\n   * Records the status of the [noview]{@link https://docs.tealium.com/platforms/javascript/settings/#noview} setting on page load.\n   * @name isNoviewSet\n   * @type {boolean}\n   * @memberof! tealiumCmpIntegration\n   */\n  window.tealiumCmpIntegration.isNoviewSet = window.utag_cfg_ovrd &amp;&amp; window.utag_cfg_ovrd.noview === true\n\n  /**\n   * The name to use for the [ConsentDecision]{@link ConsentDecision} array when adding it to Tealium's b object on each event.\n   * @name nameOfVendorOptInArray\n   * @type {string}\n   * @memberof! tealiumCmpIntegration\n   */\n  window.tealiumCmpIntegration.nameOfVendorOptInArray = nameOfVendorOptInArray\n\n  /**\n   * The name to use for the current [ConsentDecision]{@link ConsentDecision}'s 'type' attribute when adding it to Tealium's b object on each event.\n   * @name nameOfConsentTypeString\n   * @type {string}\n   * @memberof! tealiumCmpIntegration\n   */\n  window.tealiumCmpIntegration.nameOfConsentTypeString = nameOfConsentTypeString\n\n  /**\n   * The name to use for the array of implicit tags (which have already been fired) in the 'data' property of {@link QueuedEvent QueuedEvent} objects.\n   * @name nameOfImplicitConsentArray\n   * @type {string}\n   * @memberof! tealiumCmpIntegration\n   */\n  window.tealiumCmpIntegration.nameOfImplicitConsentArray = nameOfImplicitConsentArray\n\n  /**\n   * A [helper function]{@link module:extension-1~overrideUtagFunctions} that overrides certain utag functions to allow tags to be blocked based on CMP response.\n   *\n   * Must be called directly after the '##UTGEN##' reference by [editing]{@link https://community.tealiumiq.com/t5/iQ-Tag-Management/Managing-Tag-Templates/ta-p/21713} the 'utag loader' template, as shown in the example.\n   * @name overrideUtagFunctions\n   * @type {function}\n   * @memberof! tealiumCmpIntegration\n   * @example\n// ... utag loader template ...\n\n##UTGEN##\n// override two utag functions for the Usercentrics CMP Integration, to allow tags to be blocked as needed\nwindow.tealiumCmpIntegration &amp;&amp; window.tealiumCmpIntegration.overrideUtagFunctions &amp;&amp; window.tealiumCmpIntegration.overrideUtagFunctions()\n\n// ... utag loader template continues...\n\n   */\n  window.tealiumCmpIntegration.overrideUtagFunctions = overrideUtagFunctions\n\n  /**\n   * A queue for any events that Tealium iQ processes with IMPLICIT consent (to allow those events to be re-processed for new Services in the event of an EXPLICIT consent choice by the user).\n   *\n   * Each element in the queue is a [QueuedEvent]{@link QueuedEvent}\n   * @name implicitEventQueue\n   * @type {array}\n   * @memberof! tealiumCmpIntegration\n   */\n  window.tealiumCmpIntegration.implicitEventQueue = window.tealiumCmpIntegration.implicitEventQueue || []\n\n  /**\n   * A queue for any events that are triggered before Tealium iQ AND Usercentrics have both loaded.\n   *\n   * Each element in the queue is a [QueuedEvent]{@link QueuedEvent}\n   * @name earlyEventQueue\n   * @type {array}\n   * @memberof! tealiumCmpIntegration\n   */\n  window.tealiumCmpIntegration.earlyEventQueue = window.tealiumCmpIntegration.earlyEventQueue || []\n\n  /**\n   * Allows us to make sure we don't log certain messages more than once, especially useful while polling to avoid overwhelming the user.\n   * @function messageNotLoggedYet\n   * @param {*} messageId a string or number to uniquely identify a message for the purposes of deduplication\n   * @returns {boolean} 'true' if the message hasn't been logged yet (and should be logged), otherwise 'false'\n   */\n  var alreadyLoggedMessageIds = {}\n  function messageNotLoggedYet (messageId) {\n    var output = false\n    if (typeof alreadyLoggedMessageIds[messageId] === 'undefined') {\n      alreadyLoggedMessageIds[messageId] = true\n      output = true\n    }\n    return output\n  }\n\n  // if noload is set to 'true', don't interfere, just return to exit this function and allow that setting to stop TiQ load as usual.\n  if (window.utag_cfg_ovrd &amp;&amp; window.utag_cfg_ovrd.noload === true) return false\n\n  logger('CMP integration active - Usercentrics/TiQ' + (tiqInDebugMode ? &quot;\\n\\nDEBUGGING TIP: Use /SENDING|\\\\*\\\\*\\\\*\\\\*/ in the browser console as the 'filter' to show only CMP and tag send notifications.&quot; : '\\n\\nActivate TiQ Debug Mode for more details: https://docs.tealium.com/platforms/javascript/debugging/'), true)\n  var cmpResponse = cmpConsentCheck()\n  // core business/GDPR logic, decides if TiQ should load at all\n  reactToCmpResponse(cmpResponse)\n\n  /**\n   * The core CMP integration logic, which decides if Tealium iQ should be allowed to run, or if it needs to be stopped\n   * until an understandable response that includes permission for Tealium iQ to run is found.\n   *\n   * @function reactToCmpResponse\n   * @param {object} cmpResponse The response from the Usercentrics Vanilla App\n   */\n  function reactToCmpResponse (cmpResponse) {\n    var usercentricsFound = typeof cmpResponse === 'object'\n    var foundWellFormedConsentDecision = checkForWellFormedDecision(cmpResponse)\n    var tagBasedMap = generateTagBasedMap()\n    var foundMapEntryForActiveSetting = Object.keys(tagBasedMap).length &gt; 0\n    var foundExplicitConsent = checkForExplicitConsentDecision(cmpResponse)\n    var tiqIsAllowedToFire = checkForTiqConsent(cmpResponse)\n    var tiqIsLoaded = window.utag &amp;&amp; window.utag.handler &amp;&amp; window.utag.handler.iflag === 1\n\n    if (!usercentricsFound) {\n      /**\n       * CASE A1: no Usercentrics CMS found\n       *\n       * STOP and fire nothing at all\n       * RETRY after a delay\n       */\n      if (messageNotLoggedYet(1)) logger('No Usercentrics CMP found on page.\\n\\nStopping TiQ (no cookies set/removed, no tags fired).\\n\\nPolling for changes.')\n      window.setTimeout(recheckForCmpAndConsent, consentTimeoutInterval)\n      stopTiq()\n    } else if (!foundMapEntryForActiveSetting) {\n      /**\n        * CASE A7: No map found for the current settingsId\n        *\n        * STOP and fire nothing at all. Do not retry.\n        */\n      if (messageNotLoggedYet(2)) logger('No map found for current Usercentrics Setting ID.\\n\\nStopping TiQ (no cookies set/removed, no tags fired).\\n\\nNo retries.')\n      stopTiq()\n    } else if (!foundWellFormedConsentDecision) {\n      /**\n       * CASE A2: Usercentrics CMS found but consent response wasn't well-formed/complete/understandable\n       *\n       * STOP and fire nothing at all\n       * RETRY after a delay\n       */\n      if (messageNotLoggedYet(3)) logger('Found Usercentrics CMP and got response, but didn\\'t understand the response.\\n\\nStopping TiQ (no cookies set/removed, no tags fired).\\n\\nPolling for changes.')\n      window.setTimeout(recheckForCmpAndConsent, consentTimeoutInterval)\n      stopTiq()\n    } else if (!tiqIsAllowedToFire) {\n      /**\n       * CASE A3: Usercentrics CMS found and consent response was well-formed, BUT TiQ didn't have an opt-in\n       *\n       * STOP and fire nothing at all\n       * RETRY after a delay\n       */\n      if (messageNotLoggedYet(4)) logger('Found Usercentrics CMP and got well-formed response, but TiQ isn\\'t allowed to run based on the response.\\n\\nStopping TiQ (no cookies set/removed, no tags fired).\\n\\nPolling for changes.')\n      window.setTimeout(recheckForCmpAndConsent, consentTimeoutInterval)\n      stopTiq()\n    } else if (!foundExplicitConsent) {\n      /**\n       * CASE A4: Usercentrics CMS found AND response was understandable (AND includes an implicit TiQ consent), BUT the user hasn't made an explicit decision yet\n       *\n       * ALLOW TO LOAD for any 'default opt-in' tags (filter logic in Extension B)\n       * RETRY after a delay (in case there's an explicit decision, since implicit decisions usually mean the prompt is displayed)\n       */\n      if (messageNotLoggedYet(5)) logger('Found Usercentrics CMP and got well-formed IMPLICIT response which includes TiQ.\\n\\nAllowing certain tags to fire based on IMPLICIT consent.\\n\\nPolling for changes.')\n      window.setTimeout(recheckForCmpAndConsent, consentTimeoutInterval)\n      if (tiqIsLoaded) {\n        processEarlyQueue()\n      } else {\n        window.setTimeout(recheckForCmpAndConsent, consentTimeoutInterval)\n      }\n      triggerOrQueue()\n    } else if (foundExplicitConsent) {\n      /**\n       * CASE A5: Usercentrics CMS found AND response was understandable, AND the user has made an explicit consent decision AND TiQ is allowed\n       *\n       * ALLOW TO LOAD for any opted-in tags (filter logic in Extension B), do not retry.\n       */\n      if (messageNotLoggedYet(6)) logger('Found Usercentrics CMP and got well-formed EXPLICIT response which includes TiQ.\\n\\nAllowing certain tags to fire based on EXPLICIT consent.\\n\\nNo further polling.')\n      // only call if we've been polling (on initial load, it will load automatically)\n      if (tiqIsLoaded) {\n        processEarlyQueue()\n        processImplicitQueue()\n      } else {\n        window.setTimeout(recheckForCmpAndConsent, consentTimeoutInterval)\n      }\n      triggerOrQueue()\n    } else {\n      /**\n        * CASE A6: Something went wrong with this extension.\n        *\n        * STOP and fire nothing at all. Do not retry.\n        */\n      if (messageNotLoggedYet(7)) logger('Something unexpected went wrong.\\n\\nStopping TiQ (no cookies set/removed, no tags fired).\\n\\nNo retries.')\n      stopTiq()\n    }\n  }\n\n  /**\n   * Override utag.loader.initdata and utag.handler.trigger to allow Tealium iQ Tags to be blocked if the user hasn't consented.\n   *\n   * @function overrideUtagFunctions\n   * @returns {boolean} 'true' if the function was overridden successfully by this request, 'false' if not (because it was already overridden)\n   */\n  function overrideUtagFunctions () {\n    // don't override more than once, assume that if one function has been overridden, both have\n    if (window.utag.handler.trigger.toString().indexOf('tealiumCmpIntegration') !== -1) {\n      return true\n    }\n\n    // the initial view is handled differently than subsequent events\n    // this is safe to to override even if noview is set (because it will never be called in that case)\n    window.utag.loader.initdata_old = window.utag.loader.initdata\n    window.utag.loader.initdata = newUtagLoaderInitdata\n\n    window.utag.handler.trigger_old = window.utag.handler.trigger\n    window.utag.handler.trigger = newUtagHandlerTrigger\n    logger('Overrode utag functions!')\n\n    if (window.utag.handler.trigger.toString().indexOf('tealiumCmpIntegration') !== -1) {\n      return true\n    }\n\n    return false\n  }\n\n  /**\n   * An overridden version of the Tealium iQ function utag.loader.initdata.\n   *\n   * Calls the original function, respects possible noview settings, rechecks the user consent, and calls queueEventWithoutFiringImplicitServices\n   * if only an IMPLICIT consent is found (after recording the IMPLICIT services, to avoid double-firing).\n   *\n   * That same event can then be re-processed for any new Services if an EXPLICIT consent decision later made.\n   *\n   * @function newUtagLoaderInitdata\n   */\n  function newUtagLoaderInitdata () {\n    window.utag.loader.initdata_old()\n    // make sure we don't queue this initial page load twice, and respect the configured noview setting\n    if (!window.tealiumCmpIntegration.isNoviewSet &amp;&amp; !window.tealiumCmpIntegration.alreadyFiredInitialViewEvent) {\n      window.tealiumCmpIntegration.alreadyFiredInitialViewEvent = true\n      var consentedServices = getCurrentConsentDecision()\n      if (consentedServices.type === 'implicit') {\n        window.tealiumCmpIntegration.implicitServices = consentedServices\n        // we don't need to fire implicit services in this case, because TiQ's loading process will fire them\n        queueEventWithoutFiringImplicitServices({\n          event: 'view',\n          data: window.utag.handler.C(window.utag.data)\n        })\n      }\n    }\n  }\n\n  /**\n   * Refresh [tealiumCmpIntegration.tagBasedMap]{@link tealiumCmpIntegration.tagBasedMap} and return that new map, helps smooth out any timing issues between Usercentrics and Tealium iQ load.\n   *\n   * @function generateTagBasedMap\n   * @returns a [TagToServiceMap]{@link TagToServiceMap}\n   */\n  function generateTagBasedMap () {\n    var tagBasedMap = getTagBasedMap(map)\n    window.tealiumCmpIntegration.tagBasedMap = tagBasedMap\n    return tagBasedMap\n  }\n\n  /**\n   * Tealium iQ's utag.handler.trigger normally causes tags to fire. For this integration, we override that function to support blocking tags without consent.\n   *\n   * @function newUtagHandlerTrigger\n   *\n   * @param {*} a can be an object or a string\n   * @param {*} b\n   * @param {*} c\n   */\n  function newUtagHandlerTrigger (a, b, c) {\n    /**\n     * Trigger CASES (utag.handler.trigger override)\n     *\n     * We need to queue the events if we only have implicit consent, to allow a selective retrigger if/when we get an explicit decision.\n     */\n    var isPureConsentEvent = (a === nameOfConsentPollingEvent &amp;&amp; !b &amp;&amp; !c)\n    var isNoviewSet = window.tealiumCmpIntegration.isNoviewSet || true // assume noview if something went wrong with the global, to avoid firing tracking in error\n\n    var consentedServices = getCurrentConsentDecision()\n    var consentType = (consentedServices &amp;&amp; consentedServices.type) || 'none'\n\n    var isUsercentricsReady = consentType === 'implicit' || consentType === 'explicit'\n    var isTealiumReady = window.utag &amp;&amp; window.utag.handler &amp;&amp; window.utag.handler.iflag === 1\n\n    if (!isPureConsentEvent) {\n      logger('utag.handler.trigger called with:\\n\\n' + JSON.stringify(arguments, null, 2))\n    }\n\n    if (!isUsercentricsReady &amp;&amp; !isTealiumReady) {\n      consentedServices.type = 'tealium-and-usercentrics-loading'\n      logger('Waiting for Usercentrics and Tealium to be ready, queueing early event.')\n      queueEarlyEvent(a, b, c)\n      return false\n    } else if (!isUsercentricsReady) {\n      consentedServices.type = 'usercentrics-loading'\n      logger('Usercentrics is still loading, queueing early event')\n      queueEarlyEvent(a, b, c)\n      return false\n    } else if (!isTealiumReady) {\n      consentedServices.type = 'tealium-still-loading'\n      logger('Tealium iQ is still loading, queueing early event')\n      queueEarlyEvent(a, b, c)\n      return false\n    }\n\n    // if an array of tagUids is passed, that forces them to fire regardless of load rules\n    // or consent, so we need to filter that array before allowing it to be processed\n    var hasTagUidArray = c &amp;&amp; typeof c === 'object' &amp;&amp; c.uids &amp;&amp; c.uids &amp;&amp; window.utag.ut.typeOf(c.uids) === 'array'\n    var uidMap = generateTagBasedMap()\n    var allowedTagUids = []\n    var blockedTagUids = []\n    var serviceName\n    var tagUid\n    if (hasTagUidArray) {\n      for (var i = 0; i &lt; c.uids.length; i++) {\n        tagUid = c.uids[i]\n        serviceName = uidMap[tagUid] || '(missing)'\n        // only push consented services into the new array\n        if (consentedServices.indexOf(serviceName) !== -1) {\n          allowedTagUids.push(tagUid)\n        } else {\n          blockedTagUids.push(tagUid)\n        }\n      }\n      // replace the original with the filtered array (can also be empty, if none of them were allowed)\n      logger('Call included tagUid array:\\n\\n' + JSON.stringify(c.uids) + '\\n\\nwhich was replaced by the filtered version:\\n\\n' + JSON.stringify(allowedTagUids))\n      c.originalUids = c.uids.slice() // make a shallow copy\n      c.uids = allowedTagUids\n      c.blockedTagUids = blockedTagUids\n    }\n\n    if (consentType === 'explicit') {\n      /**\n       * CASE T2: expected globals are populated, consent is EXPLICIT\n       *\n       * FIRE allowed tags (explicit)\n       * utag.handler.trigger override PROCESSES the queue, which will include any queued events from CASE A4, making sure not to re-fire any default\n       *   opt-in tags that were already fired for the queued events\n       */\n      // make sure TiQ loads\n      processEarlyQueue()\n      processImplicitQueue()\n      triggerTiqLoad()\n      // fire the current event if it's not just a polling event\n      if (!isPureConsentEvent) {\n        return window.utag.handler.trigger_old(a, b, c)\n      }\n    } else if (consentType === 'implicit') {\n      /**\n       * CASE T3: expected globals are populated, consent is IMPLICIT\n       *\n       * FIRE allowed tags (implicit)\n       * utag.handler.trigger override KEEPS a queue/record that includes\n       *  - the event(s) that were processed based on implicit consent\n       *  - which tags were allowed to process each event (are set to implicit opt-in)\n       */\n      processEarlyQueue()\n      // fire the initial view if appropriate, and queue it\n      triggerTiqLoad()\n      window.tealiumCmpIntegration.implicitServices = consentedServices\n\n      // queue the initial 'view' on pageload if appropriate\n      if (!isNoviewSet &amp;&amp; isTealiumReady &amp;&amp; !window.tealiumCmpIntegration.alreadyFiredInitialViewEvent) {\n        window.tealiumCmpIntegration.alreadyFiredInitialViewEvent = true\n        queueEventAndFireImplicitServices('view', window.utag.handler.C(window.utag.data))\n      }\n      // queue the current event if it exists (and this isn't just consent polling)\n      if (!isPureConsentEvent) {\n        return queueEventAndFireImplicitServices(a, b, c)\n      }\n    } else if (consentType === 'missing-map') {\n      logger('Something went wrong - all tags were blocked because no consent map was found for the active setting ID.')\n      return false\n    } else if (consentType === 'missing-tiq-consent') {\n      logger('Something went wrong - all tags were blocked because no consent was found for &quot;' + tiqServiceName + '&quot;, configured Tealium iQ name.\\n\\nConsent found: ' + JSON.stringify(consentedServices, null, 2))\n      return false\n    } else {\n      /**\n       * CASE T1: expected variables not populated (misconfiguration/error case)\n       *\n       * STOP and fire nothing at all. Do not retry or queue the event.\n       */\n      logger('Something went wrong - all tags were blocked because the consent response was not understood.')\n      return false\n    }\n  }\n\n  /**\n   * Process any queued tracking events from [the early event queue]{@link tealiumCmpIntegration.earlyEventQueue} (can include pageviews) for any currently-consented Services.\n   *\n   * Intended to be called first understandable implicit consent.\n   *\n   * @function processEarlyQueue\n   */\n  function processEarlyQueue () {\n    var queuedEvent\n    window.tealiumCmpIntegration.earlyEventQueue = window.tealiumCmpIntegration.earlyEventQueue || []\n    while (window.tealiumCmpIntegration.earlyEventQueue.length &gt; 0) {\n      // process past events\n      queuedEvent = window.tealiumCmpIntegration.earlyEventQueue.shift()\n      logger('Processing queued early event for currently consented tags: ' + JSON.stringify(queuedEvent, null, 2))\n      window.utag.track(queuedEvent)\n    }\n  }\n\n  /**\n   * Process any queued tracking events from [the global queue]{@link tealiumCmpIntegration.implicitEventQueue} (can include pageviews) for any newly-consented Services.\n   *\n   * Intended to be called on new EXPLICIT consent decision - queued events have already had IMPLICTLY consented tags fired, so those need to be excluded.\n   *\n   * @function processImplicitQueue\n   */\n  function processImplicitQueue () {\n    var alreadyLogged = false\n    var queuedEvent\n    window.tealiumCmpIntegration.implicitEventQueue = window.tealiumCmpIntegration.implicitEventQueue || []\n    while (window.tealiumCmpIntegration.implicitEventQueue.length &gt; 0) {\n      if (!alreadyLogged) {\n        alreadyLogged = true\n        logger('Explicit consent tracking request received - processing past implicitly tracked events (' + window.tealiumCmpIntegration.implicitEventQueue.length + ') for any new explicit tags.')\n      }\n      // process past events\n      queuedEvent = window.tealiumCmpIntegration.implicitEventQueue.shift()\n      logger('Triggering event for explicitly-consented tags: ' + JSON.stringify(queuedEvent))\n      window.utag.track(queuedEvent)\n    }\n  }\n\n  /**\n   * Queue a [tracking event]{@link QueuedEvent} in [the early queue]{@link tealiumCmpIntegration.earlyEventQueue}, without firing any tags.\n   *\n   * Intended to be called for events that triggered before we get an understandable response from Usercentrics.\n   *\n   * @function queueEarlyEvent\n   * @param {*} a the 'a' argument from utag.handler.trigger\n   * @param {*} b the 'b' argument from utag.handler.trigger\n   * @param {*} c the 'c' argument from utag.handler.trigger\n   *\n   */\n  function queueEarlyEvent (a, b, c) {\n    a = a || {}\n\n    // make a copy, in case shared objects are used (like utag_data, or a similar global) - snapshot those\n    if (typeof b === 'object') {\n      b = JSON.parse(JSON.stringify(b))\n    }\n    // convert to a more standard format\n    if (typeof a === 'string') {\n      a = { event: a, data: b || {}, cfg: c }\n    }\n\n    // if there's a tagUid array, don't queue the already-fired tags - instead, swap that with any blocked tags\n    if (a &amp;&amp; a.cfg &amp;&amp; window.utag.ut.typeOf(a.cfg.uids) === 'array') {\n      a.cfg.uids = a.cfg.blockedTagUids.slice()\n    }\n\n    // nothing will be allowed to fire\n    a.data[nameOfImplicitConsentArray] = []\n\n    window.tealiumCmpIntegration.earlyEventQueue = window.tealiumCmpIntegration.earlyEventQueue || []\n    window.tealiumCmpIntegration.earlyEventQueue.push(a)\n    logger('Queued early event!')\n  }\n\n  /**\n   * Queue a [tracking event]{@link QueuedEvent} in [the global queue]{@link tealiumCmpIntegration.implicitEventQueue}, without firing any implictly consented Services.\n   *\n   * Intended to be called for the initial pageview on load, since the load process will have already fired the implicit services.\n   *\n   * @function queueEventWithoutFiringImplicitServices\n   * @param {*} a the 'a' argument from utag.handler.trigger\n   * @param {*} b the 'b' argument from utag.handler.trigger\n   * @param {*} c the 'c' argument from utag.handler.trigger\n   *\n   */\n  function queueEventWithoutFiringImplicitServices (a, b, c) {\n    a = a || {}\n\n    // make a copy, in case shared objects are used (like utag_data, or a similar global) - snapshot those\n    if (typeof b === 'object') {\n      b = JSON.parse(JSON.stringify(b))\n    }\n    // convert to a more standard format\n    if (typeof a === 'string') {\n      a = { event: a, data: b || {}, cfg: c }\n    }\n\n    // if there's a tagUid array, don't queue the already-fired tags - instead, swap that with any blocked tags\n    if (a &amp;&amp; a.cfg &amp;&amp; window.utag.ut.typeOf(a.cfg.uids) === 'array') {\n      a.cfg.uids = a.cfg.blockedTagUids.slice()\n    }\n\n    a.data[nameOfImplicitConsentArray] = window.tealiumCmpIntegration.implicitServices || []\n\n    window.tealiumCmpIntegration.implicitEventQueue = window.tealiumCmpIntegration.implicitEventQueue || []\n    window.tealiumCmpIntegration.implicitEventQueue.push(a)\n  }\n\n  /**\n   * Queue a [tracking event]{@link QueuedEvent} in [the global queue]{@link tealiumCmpIntegration~implicitEventQueue}, without firing any implictly consented Services.\n   *\n   * Intended to be called for all events other than the initial page load.\n   *\n   * @function queueEventAndFireImplicitServices\n   * @param {*} a the 'a' argument from utag.handler.trigger\n   * @param {*} b the 'b' argument from utag.handler.trigger\n   * @param {*} c the 'c' argument from utag.handler.trigger\n   *\n   */\n  function queueEventAndFireImplicitServices (a, b, c) {\n    // fire the implicit tags\n    window.utag.handler.trigger_old(a, b, c)\n    logger('Implicit consent tracking request fired (or queued, if utag hasn\\'t loaded).')\n    return queueEventWithoutFiringImplicitServices(a, b, c)\n  }\n\n  /**\n   * Generate a {@link TagToServiceMap TagToServiceMap} based on a {@link ServiceToTagMap ServiceToTagMap}\n   *\n   * @function getTagBasedMap\n   * @param {object} map a {@link ServiceToTagMap ServiceToTagMap} object\n   * @return {object} a {@link TagToServiceMap TagToServiceMap}\n   */\n  function getTagBasedMap (map) {\n    // generate a lookup based on the tagUid\n    if (typeof map !== 'object') return {}\n    var settingsId = getCurrentUsercentricsSettingsId() || ''\n    if (typeof settingsId !== 'string' || settingsId === '') return {}\n    var settingSpecificMap = map[settingsId] || {}\n    var serviceNames = Object.keys(settingSpecificMap)\n    var uidMap = {}\n    for (var i = 0; i &lt; serviceNames.length; i++) {\n      for (var j = 0; j &lt; settingSpecificMap[serviceNames[i]].length; j++) {\n        uidMap[settingSpecificMap[serviceNames[i]][j]] = serviceNames[i]\n      }\n    }\n    return uidMap\n  }\n\n  /**\n   * Get the current Usercentrics settingsId from the page.\n   *\n   * @returns {string} the Usercentrics settingsId, defaults to an empty string if none is found\n   */\n  function getCurrentUsercentricsSettingsId () {\n    return (window.usercentrics &amp;&amp; window.usercentrics.settingsId) || ''\n  }\n\n  /**\n   * Trigger the core logic with an up-to-date array of objects returned by calling [usercentrics.getConsents]{@link https://docs.usercentrics.com/#/?id=getconsents}\n   * @function recheckForCmpAndConsent\n   */\n  function recheckForCmpAndConsent () {\n    var newConsentResponse = cmpConsentCheck()\n    reactToCmpResponse(newConsentResponse)\n  }\n\n  /**\n   * Call [usercentrics.getConsents]{@link https://docs.usercentrics.com/#/?id=getconsents} to get the current consent decision.\n   * @function cmpConsentCheck\n   */\n  function cmpConsentCheck () {\n    if (!window.usercentrics || typeof window.usercentrics.getConsents !== 'function') return false\n    var cmpConsentArray = window.usercentrics.getConsents()\n    return cmpConsentArray\n  }\n\n  /**\n   * Indicates if Usercentrics has loaded and returned a well-formed indication of user consent.\n   * @function checkForWellFormedDecision\n   * @param cmpConsentArray the array of objects returned by [usercentrics.getConsents]{@link https://docs.usercentrics.com/#/?id=getconsents}.\n   * @returns {boolean} 'true' if the consent decision is well-formed, otherwise 'false'\n   */\n  function checkForWellFormedDecision (cmpConsentArray) {\n    // treat things we don't understand as an opt-out\n    if (toString.call(cmpConsentArray) !== '[object Array]') return false\n    // use the first entry as a proxy for all\n    if (cmpConsentArray &amp;&amp; cmpConsentArray[0] &amp;&amp; typeof cmpConsentArray[0].dataProcessingService === 'string') {\n      return true\n    }\n    return false\n  }\n\n  /**\n   * Indicates if the user has made an EXPLICIT decision\n   * @function checkForExplicitConsentDecision\n   * @param cmpConsentArray the array of objects returned by [usercentrics.getConsents]{@link https://docs.usercentrics.com/#/?id=getconsents}.\n   * @returns {boolean} 'true' if the consent decision is EXPLICIT otherwise 'false'\n   */\n  function checkForExplicitConsentDecision (cmpConsentArray) {\n    // treat things we don't understand as an opt-out\n    if (toString.call(cmpConsentArray) !== '[object Array]') return false\n    // use the first entry as a proxy for all\n    if (cmpConsentArray &amp;&amp; cmpConsentArray[0] &amp;&amp; cmpConsentArray[0].updatedBy === 'explicit') {\n      return true\n    }\n    return false\n  }\n\n  /**\n   * Indicates if Tealium iQ has permission to run (and fire tags).\n   * @function checkForTiqConsent\n   * @param cmpConsentArray the array of objects returned by [usercentrics.getConsents]{@link https://docs.usercentrics.com/#/?id=getconsents}.\n   * @returns {boolean} 'true' if TiQ is allowed to run, otherwise 'false'\n   */\n  function checkForTiqConsent (cmpConsentArray) {\n    var foundOptIn = false\n    // treat things we don't understand as an opt-out\n    if (toString.call(cmpConsentArray) !== '[object Array]') return false\n    // check vendors if there's an object, look for at least one\n    cmpConsentArray.forEach(function (tagInfo) {\n      if (tagInfo.consentStatus === true &amp;&amp; tagInfo.dataProcessingService === tiqServiceName) {\n        foundOptIn = true\n      }\n    })\n    return foundOptIn\n  }\n\n  /**\n   * Create an instance of\n   * @param {array} cmpConsentArray the array of objects returned by calling [usercentrics.getConsents]{@link https://docs.usercentrics.com/#/?id=getconsents}\n   */\n  function getVendorConsentsFromCmpConsentArray (cmpConsentArray) {\n    var vendorArray = []\n\n    var isWellFormed = checkForWellFormedDecision(cmpConsentArray)\n\n    if (!isWellFormed) {\n      vendorArray.type = 'missing-well-formed-response'\n      return []\n    }\n\n    var tagBasedMap = generateTagBasedMap()\n\n    // if there is no mapping for the settings id, we need to change the console output\n    var currentSettingsIdHasMapping = (typeof tagBasedMap === 'object' &amp;&amp; Object.keys(tagBasedMap).length &gt; 0)\n\n    if (!currentSettingsIdHasMapping) {\n      vendorArray.type = 'missing-map'\n      return []\n    }\n\n    cmpConsentArray &amp;&amp; cmpConsentArray.forEach(function (tagConsent) {\n      if (tagConsent.consentStatus === true) {\n        vendorArray.push(tagConsent.dataProcessingService)\n      }\n    })\n    vendorArray.type = checkForExplicitConsentDecision(cmpConsentArray) ? 'explicit' : 'implicit'\n\n    if (checkForTiqConsent(cmpConsentArray) === false) {\n      // change the consent type, but leave the array for debugging purposes\n      vendorArray.type = 'missing-tiq-consent'\n    }\n\n    return vendorArray\n  }\n\n  /**\n   * Get the current consent decision from the CMP for the active Setting\n   * @function getCurrentConsentDecision\n   * @returns a {@link ConsentDecision ConsentDecision}\n   */\n  function getCurrentConsentDecision () {\n    var freshConsent = cmpConsentCheck()\n\n    return getVendorConsentsFromCmpConsentArray(freshConsent)\n  }\n\n  /**\n   *  A conditional logging function - we can't use utag.DB directly because some of our logic needs to be preloader, but we can mimic the same logic so that our logging only displays when TiQ is in debug mode and/or not in Prod, or is explicitly forced.\n   * @function logger\n   * @param {string} message the message to be conditionally shown\n   * @param {boolean} showOutsideDebugMode if 'true', forces the message to shown outside of debug mode, except on Prod\n   */\n  function logger (message, showOutsideDebugMode) {\n    if (typeof tealiumEnvironment === 'undefined' || tealiumEnvironment === 'prod') {\n      // don't allow anything outside of debug mode on prod (disable this flag)\n      showOutsideDebugMode = false\n    }\n\n    if (showOutsideDebugMode || tiqInDebugMode) {\n      message = '\\n' + message + '\\n'\n      var formattedArr = []\n      formattedArr.push('****************')\n      var messageArr = message.split('\\n')\n      messageArr.forEach(function (messageLine) {\n        formattedArr.push('*  ' + messageLine)\n      })\n      formattedArr.push('****************')\n      var outputString = formattedArr.join('\\n')\n      console.log(outputString)\n    }\n  }\n\n  /**\n   * Stops Tealium iQ from loading (the TMS will not load tags or set a cookie if this function is called in Pre Loader), using the {@link https://docs.tealium.com/platforms/javascript/settings/#noload noload} setting\n   * @function stopTiq\n   */\n  function stopTiq () {\n    // logger(&quot;stopTiq function fired&quot;)\n    window.utag_cfg_ovrd = window.utag_cfg_ovrd || {}\n    window.utag_cfg_ovrd.noload = true\n  }\n\n  /**\n   * Allows TiQ to finish loading, intended to be called when a well-formed consent response is received, and that response allows Tealium iQ to run.\n   *\n   * Works by setting {@link https://docs.tealium.com/platforms/javascript/settings/#noload noload} to 'false' and calling Tealium iQ's utag.loader.PINIT method.\n   *\n   * If noload was 'true' and this function runs it must've been set to true by our own {@link module:extension-1~stopTiq stopTiq} function, because otherwise Tealium iQ wouldn't have been allowed to load/poll in the first place.\n   * @function triggerTiqLoad\n   * @returns {boolean} 'true' if Tealium iQ was successfully triggered, 'false' if it wasn't triggered because it's already initiated\n   */\n  function triggerTiqLoad () {\n    // if usercentrics is ready on the first request, TiQ won't have loaded yet at all - let it load naturally\n    if (!window.utag) {\n      return true\n    }\n    // if TiQ has already loaded but these flags aren't truthy, we've interrupted the load and should retrigger it\n    // initial load / view (noview logic handled in utag.handler.trigger function itself)\n    if (!window.utag.handler || !window.utag.handler.iflag) {\n      // we don't need to reload actually, just allow it to finish loading\n      window.utag.cfg.noload = false // safe because this code only runs if it was set to false originally\n      window.utag.loader.PINIT()\n      return true\n    }\n    // already loaded\n    return false\n  }\n\n  /**\n   * If Tealium iQ hasn't loaded, load it (calling utag.handler.trigger in the process), otherwise call utag.handler.trigger.\n   * @function triggerOrQueue\n   */\n  function triggerOrQueue () {\n    var successfullyTriggeredLoadIfNeeded = triggerTiqLoad()\n    if (!successfullyTriggeredLoadIfNeeded) {\n      // explicit consent from polling, but load has already been triggered\n      return window.utag.handler.trigger(nameOfConsentPollingEvent)\n    }\n  }\n  /**\n   * Get the the current Tealium iQ environment.\n   *\n   * Since this runs in Pre Loader, it needs to use regex to recognize the utag.js file in the DOM and read the environment from the file name (there are no utag functions or objects at this point in the load).\n   *\n   * NOTE: This doesn't work correctly when using the the Environment Switcher (because the original script is added to the DOM instead of the new one, and the 307 redirect that's used to pull the new file(s) only changes the response, not the script element itself).\n   *\n   * If you're using the Environment Switcher on Prod and would like to see console output, set the [debug cookie]{@link https://docs.tealium.com/platforms/javascript/debugging/}.\n   *\n   * @function getTealiumEnvironment\n   * @returns {boolean} 'true' if Tealium iQ was successfully triggered, 'false' if it wasn't triggered because it's already initiated\n   */\n  function getTealiumEnvironment () {\n    var allScripts = document.getElementsByTagName('script')\n    var re = /\\/([^/]*)\\/utag\\.js(\\?.*)*$/\n    for (var i = 0; i &lt; allScripts.length; i++) {\n      var result = re.exec(allScripts[i].src) // can be null\n      if (result &amp;&amp; result[1]) { // [1] is the result of the match\n        return result[1]\n      }\n    }\n    return 'prod' // default to guessing we're in prod, just in case we're actually in prod (to avoid logging in Prod)\n  }\n})()\n\n// Document key data structures here for clarity.\n\n/**\n * An array of Usercentrics Service Names that have permission to run (uses the 'dataProcessingService' property from [usercentrics.getConsents]{@link https://docs.usercentrics.com/#/?id=getconsents}).\n *\n * Also includes a 'type' property that indicates whether the consent decision is IMPLICIT or EXPLICT.\n *\n * @static\n * @type {array}\n * @name ConsentDecision\n * @memberof! &lt;global&gt;\n * @property {string} type the type of consent, will be either 'implicit' or 'explicit'\n * @example\nvar exampleConsentDecision = window.tealiumCmpIntegration.getCurrentConsentDecision()\n\nJSON.stringify(exampleConsentDecision)\n// [&quot;Google Analytics&quot;,&quot;Another Tag&quot;,&quot;Tealium iQ Tag Management&quot;]\n\nexampleConsentDecision.type\n// &quot;explicit&quot;\n\nexampleConsentDecision.length\n// 3\n */\n\n/**\n * Assigns Tealium iQ Tags to Usercentrics Service Names. Each service can have multiple tags, but each tag can only have one service.  If the same tag UID appears in multiple Service arrays, only one will be used.\n *\n * The keys for the main object are Setting-IDs from Usercentrics, inside that are key/value pairs where the key is a Service Name from Usercentrics, and the value is an array of TagUIDs from Tealium iQ.\n *\n * This needs to be provided as per the example below, in [tealiumCmpIntegration.map]{@link namespace:tealiumCmpIntegration~map}.\n *\n * An [example Tealium iQ extension]{@link module:example-map} is provided as well.\n *\n * @static\n * @type {object}\n * @name ServiceToTagMap\n * @memberof! &lt;global&gt;\n * @example\nwindow.tealiumCmpIntegration = window.tealiumCmpIntegration || {}\nwindow.tealiumCmpIntegration.map = {\n  'yPyIAIIxY': {\n    'Google Analytics': [6, 8, 10],\n    'Mouseflow': [7, 9],\n    'Another Tag': [11]\n  }\n}\n */\n\n/**\n * A simple lookup, with Tealium iQ tag UIDs as keys and the associated Usercentrics service name as strings as values. Each service can be associated with multiple tags, but each tag can be associated with one service.\n *\n * The example is based on the {@link ServiceToTagMap ServiceToTagMap} example, where the Usercentrics settingsId on the active page is 'yPyIAIIxY'.\n *\n * This object is automatically generated by the [getTagBasedMap]{@link module:extension-1~getTagbasedMap} method, and made available globally in [tealiumCmpIntegration.tagBasedMap]{@link tealiumCmpIntegration~tagBasedMap} for debugging and use within the extensions.\n *\n * @static\n * @type {object}\n * @name TagToServiceMap\n * @memberof! &lt;global&gt;\n * @example\n{\n  6: 'Google Analytics',\n  7: 'Mouseflow',\n  8: 'Google Analytics',\n  9: 'Mouseflow',\n  10: 'Google Analytics',\n  11: 'Another Tag'\n}\n */\n\n/**\n * An object from the [implicitEventQueue]{@link tealiumCmpIntegration.implicitEventQueue} or [earlyEventQueue]{@link tealiumCmpIntegration.earlyEventQueue}, which represents a Tealium iQ tracking event that's been processed based on an IMPLICIT [ConsentDecision]{@link ConsentDecision}\n *\n * Heavily based on the argument passed to [utag.track]{@link https://community.tealiumiq.com/t5/Tealium-iQ-Tag-Management/utag-track-method/td-p/24578}, since it's designed to be processed by that method.\n *\n * Initial pageviews (handled in the [utag.loader.initdata override]{@link module:extension-1~newUtagLoaderInitdata}) will NOT have metadata like cookies, qps, etc - utag.track calls (handled in the [utag.handler.trigger override]{@link module:extension-1~newUtagHandlerTrigger}) will. That's a byproduct of using utag.handler.trigger, which is later in the load - those metadata will be re-read when the queue is processed, and since this queue isn't persisted between pages, it should be fine like that - the only strange behavior will be that any metadata that aren't present on re-read will still be present after the re-read - only values that are still present will be replaced with new values.\n *\n * An alternative approach could be to manually remove 'cp.\\*', 'dom.\\*', 'ut.\\*', 'qp.\\*', 'meta.\\*' and possibly 'tealium_\\*' (except 'tealium_event') from the 'data' object before queueing - that hasn't been done so far.\n *\n * @static\n * @type {array}\n * @name QueuedEvent\n * @memberof! &lt;global&gt;\n * @property {string} event the type of tracking event, generally 'view' for pageviews or 'link' for other events\n * @property {object} data the Universal Data Object associated with the event (from utag_data or the b object)\n * @property {object} cfg an optional configuration object that can have a 'cb' property (for a callback function) and a 'uids' array, which is a list of tag UIDs that should be triggered by the event, regardless of whether load rules are met.\n * @example\n{\n  &quot;event&quot;: &quot;view&quot;,\n  &quot;data&quot;: {\n    &quot;page_type&quot;: &quot;test_virtual_view&quot;,\n    &quot;cp.utag_main_v_id&quot;: &quot;0174492849d50013581219634d6103079004907101274&quot;,\n    &quot;cp.utag_main__sn&quot;: &quot;4&quot;,\n    &quot;cp.utag_main__se&quot;: &quot;4&quot;,\n    &quot;cp.utag_main__ss&quot;: &quot;0&quot;,\n    &quot;cp.utag_main__st&quot;: &quot;1598990152209&quot;,\n    &quot;cp.utag_main_ses_id&quot;: &quot;1598988112353&quot;,\n    &quot;cp.utag_main__pn&quot;: &quot;3&quot;,\n    &quot;cp.utagdb&quot;: &quot;true&quot;,\n    &quot;dom.referrer&quot;: &quot;&quot;,\n    &quot;dom.title&quot;: &quot;Usercentrics Test&quot;,\n    &quot;dom.domain&quot;: &quot;solutions.tealium.net&quot;,\n    &quot;dom.query_string&quot;: &quot;&quot;,\n    &quot;dom.hash&quot;: &quot;&quot;,\n    &quot;dom.url&quot;: &quot;https://solutions.tealium.net/hosted/usercentrics/test-page-standard.html&quot;,\n    &quot;dom.pathname&quot;: &quot;/hosted/usercentrics/test-page-standard.html&quot;,\n    &quot;dom.viewport_height&quot;: 456,\n    &quot;dom.viewport_width&quot;: 1825,\n    &quot;ut.domain&quot;: &quot;tealium.net&quot;,\n    &quot;ut.version&quot;: &quot;ut4.46.202009011921&quot;,\n    &quot;ut.event&quot;: &quot;view&quot;,\n    &quot;ut.visitor_id&quot;: &quot;0174492849d50013581219634d6103079004907101274&quot;,\n    &quot;ut.session_id&quot;: &quot;1598988112353&quot;,\n    &quot;ut.account&quot;: &quot;services-caleb&quot;,\n    &quot;ut.profile&quot;: &quot;usercentrics-by-tag&quot;,\n    &quot;ut.env&quot;: &quot;prod&quot;,\n    &quot;tealium_event&quot;: &quot;view&quot;,\n    &quot;tealium_visitor_id&quot;: &quot;0174492849d50013581219634d6103079004907101274&quot;,\n    &quot;tealium_session_id&quot;: &quot;1598988112353&quot;,\n    &quot;tealium_session_number&quot;: &quot;4&quot;,\n    &quot;tealium_session_event_number&quot;: &quot;4&quot;,\n    &quot;tealium_datasource&quot;: &quot;&quot;,\n    &quot;tealium_account&quot;: &quot;services-caleb&quot;,\n    &quot;tealium_profile&quot;: &quot;usercentrics-by-tag&quot;,\n    &quot;tealium_environment&quot;: &quot;prod&quot;,\n    &quot;tealium_random&quot;: &quot;2085060854215077&quot;,\n    &quot;tealium_library_name&quot;: &quot;utag.js&quot;,\n    &quot;tealium_library_version&quot;: &quot;4.46.0&quot;,\n    &quot;tealium_timestamp_epoch&quot;: 1598988352,\n    &quot;tealium_timestamp_utc&quot;: &quot;2020-09-01T19:25:52.211Z&quot;,\n    &quot;tealium_timestamp_local&quot;: &quot;2020-09-01T21:25:52.211&quot;,\n    &quot;usercentrics_services_with_consent&quot;: [\n      &quot;Mouseflow&quot;,\n      &quot;Tealium iQ Tag Management&quot;,\n      &quot;Usercentrics Consent Management Platform&quot;\n    ],\n    &quot;usercentrics_consent_type&quot;: &quot;implicit&quot;,\n    &quot;_usercentrics_services_already_processed&quot;: [\n      &quot;Mouseflow&quot;,\n      &quot;Tealium iQ Tag Management&quot;,\n      &quot;Usercentrics Consent Management Platform&quot;\n    ]\n  },\n  &quot;cfg&quot;: {\n    &quot;cb&quot;: function myCallback () {console.log(&quot;Callback fired!&quot;)},\n    &quot;uids&quot;: [\n      11\n    ],\n    &quot;originalUids&quot;: [\n      7,\n      11\n    ],\n    &quot;blockedTagUids&quot;: [\n      11\n    ]\n  }\n}\n*/\n","name":"extension-1.js","creationDate":"202008131558","updateDate":"202011040724","updatedBy":"caleb.jaquith@tealium.com","versionControl":{"sourceName":"GitHub","lastSyncTimeStamp":"202011040725","accountName":"jaquith","sourceUrl":"https://github.com/jaquith/usercentrics-integration/blob/release/extensions/extension-1.js","isReadOnly":"true","hashValue":"a33123fde5698c23d941d5c8fdf32dff4bf62e6f","isOutdated":"false","lastSyncSuccess":"true"}},"2fa929d49a80e817505e2e615cdf1845c410c53247af9a8075b45620044e4a12":{"updateDate":"202010051350","creationDate":"202010051350","updatedBy":"caleb.jaquith@tealium.com","code":"// Type your JavaScript code here...","name":"BLANK"}},"draftSeq":"2","promotedSnippets":{"ef260e9aa3c673af240d17a2660480361a8e081d1ffeca2a5ed0e3219fc18567":{"promotedTimestamp":"202011040726","promotedDraftName":"extension-1.js","promotedBy":"caleb.jaquith@tealium.com","code":"/**\n *  Scope       : Pre Loader\n *  Condition   : n/a\n *  Description : CMP 1/2 - Preloader component - prevent TiQ from loading if no consent, queue implicitly consented events to retrigger (for new tags only) if explicit decision is made.\n */\n\n/**\n  * @module extension-1\n  *\n  * @description The 'Pre Loader' extension component of the CMP integration, responsible for stopping Tealium iQ from loading/running as appropriate, and making certain\n  * window-scoped functions available to the other components.\n  */\n\n// Tealium iQ runs Pre Loader extensions in global scope, which would make all variables global. We don't want to do that.\n(function avoidGlobalScopeUnlessExplicit () {\n  // set names for key objects and variables to make them easy to change if needed\n\n  var version = 'v0.10-beta'\n\n  // for the consent information in the b object\n  var nameOfVendorOptInArray = 'usercentrics_services_with_consent'\n  var nameOfConsentTypeString = 'usercentrics_consent_type'\n\n  // for the name in the queue\n  var nameOfImplicitConsentArray = '_usercentrics_services_already_processed'\n\n  // name to use when calling utag.handler.trigger to indicate a consent polling call\n  var nameOfConsentPollingEvent = 'tiq_usercentrics_consent_polling'\n\n  var consentTimeoutInterval = 400 // setTimeout interval in MS - rate to poll for new (explicit) consent decision or correctly formed object\n\n  // check for the Tealium Debug cookie, see https://docs.tealium.com/platforms/javascript/debugging/\n  var tiqInDebugMode = /utagdb=true/.test(document.cookie)\n  var tealiumEnvironment = getTealiumEnvironment() || 'prod' // fall back to prod (stops logging) if something goes wrong with the function\n\n  /**\n   * A window-scoped (global) object used to expose selected functionality.\n   *\n   * @namespace tealiumCmpIntegration\n   * @type {object}\n   * @memberof! &lt;global&gt;\n   */\n  window.tealiumCmpIntegration = window.tealiumCmpIntegration || {}\n\n  /**\n   * The name of the CMP (&quot;Usercentrics Vanilla App&quot; in this case).\n   * @name cmpName\n   * @type {string}\n   * @memberof! tealiumCmpIntegration\n   */\n  window.tealiumCmpIntegration.cmpName = 'Usercentrics Vanilla App'\n\n  /**\n   * A map of Usercentrics Data Processing Services to arrays of Tealium iQ tag UIDs, a {@link ServiceToTagMap ServiceToTagMap}\n   * @name map\n   * @type {object}\n   * @memberof! tealiumCmpIntegration\n   */\n  var map = window.tealiumCmpIntegration.map || {}\n\n  /**\n   * A map of Usercentrics Data Processing Services to arrays of Tealium iQ tag UIDs, a {@link TagToServiceMap TagToServiceMap}\n   * @name tagBasedMap\n   * @type {object}\n   * @memberof! tealiumCmpIntegration\n   */\n  generateTagBasedMap() // populates the window-level object for you as well\n\n  /**\n   * The Service Name for Tealium iQ in Usercentrics (used to decide if the TMS is allowed to run).  Uses the Usercentrics standard name if not provided.\n   * @name tiqServiceName\n   * @type {object}\n   * @memberof! tealiumCmpIntegration\n   * @default 'Tealium iQ Tag Management'\n   * @example\nwindow.tealiumCmpIntegration = window.tealiumCmpIntegration || {}\nwindow.tealiumCmpIntegration.tiqServiceName = &quot;Tealium iQ Tag Management&quot;\n   */\n  var tiqServiceName = window.tealiumCmpIntegration.tiqServiceName || 'Tealium iQ Tag Management' // use the standard name here if not set\n\n  /**\n   * The current version designation.\n   * @name version\n   * @type {string}\n   * @memberof! tealiumCmpIntegration\n   */\n  window.tealiumCmpIntegration.version = version\n\n  /**\n   * A [logger helper function]{@link module:extension-1~logger}, to help Tealium iQ users understand and troubleshoot this CMP integration without unneeded logging in production.\n   * @name logger\n   * @type {function}\n   * @memberof! tealiumCmpIntegration\n   */\n  window.tealiumCmpIntegration.logger = logger\n\n  /**\n   * A [helper function]{@link module:extension-1~getCurrentConsentDecision} that returns the current [ConsentDecision]{@link ConsentDecision}.\n   * @name getCurrentConsentDecision\n   * @type {function}\n   * @memberof! tealiumCmpIntegration\n   */\n  window.tealiumCmpIntegration.getCurrentConsentDecision = getCurrentConsentDecision\n\n  /**\n   * A [helper function]{@link module:extension-1~getCurrentUsercentricsSettingsId} that returns the current Usercentrics settingsId.\n   * @name getCurrentUsercentricsSettingsId\n   * @type {function}\n   * @memberof! tealiumCmpIntegration\n   */\n  window.tealiumCmpIntegration.getCurrentUsercentricsSettingsId = getCurrentUsercentricsSettingsId\n\n  /**\n   * Records the status of the [noview]{@link https://docs.tealium.com/platforms/javascript/settings/#noview} setting on page load.\n   * @name isNoviewSet\n   * @type {boolean}\n   * @memberof! tealiumCmpIntegration\n   */\n  window.tealiumCmpIntegration.isNoviewSet = window.utag_cfg_ovrd &amp;&amp; window.utag_cfg_ovrd.noview === true\n\n  /**\n   * The name to use for the [ConsentDecision]{@link ConsentDecision} array when adding it to Tealium's b object on each event.\n   * @name nameOfVendorOptInArray\n   * @type {string}\n   * @memberof! tealiumCmpIntegration\n   */\n  window.tealiumCmpIntegration.nameOfVendorOptInArray = nameOfVendorOptInArray\n\n  /**\n   * The name to use for the current [ConsentDecision]{@link ConsentDecision}'s 'type' attribute when adding it to Tealium's b object on each event.\n   * @name nameOfConsentTypeString\n   * @type {string}\n   * @memberof! tealiumCmpIntegration\n   */\n  window.tealiumCmpIntegration.nameOfConsentTypeString = nameOfConsentTypeString\n\n  /**\n   * The name to use for the array of implicit tags (which have already been fired) in the 'data' property of {@link QueuedEvent QueuedEvent} objects.\n   * @name nameOfImplicitConsentArray\n   * @type {string}\n   * @memberof! tealiumCmpIntegration\n   */\n  window.tealiumCmpIntegration.nameOfImplicitConsentArray = nameOfImplicitConsentArray\n\n  /**\n   * A [helper function]{@link module:extension-1~overrideUtagFunctions} that overrides certain utag functions to allow tags to be blocked based on CMP response.\n   *\n   * Must be called directly after the '##UTGEN##' reference by [editing]{@link https://community.tealiumiq.com/t5/iQ-Tag-Management/Managing-Tag-Templates/ta-p/21713} the 'utag loader' template, as shown in the example.\n   * @name overrideUtagFunctions\n   * @type {function}\n   * @memberof! tealiumCmpIntegration\n   * @example\n// ... utag loader template ...\n\n##UTGEN##\n// override two utag functions for the Usercentrics CMP Integration, to allow tags to be blocked as needed\nwindow.tealiumCmpIntegration &amp;&amp; window.tealiumCmpIntegration.overrideUtagFunctions &amp;&amp; window.tealiumCmpIntegration.overrideUtagFunctions()\n\n// ... utag loader template continues...\n\n   */\n  window.tealiumCmpIntegration.overrideUtagFunctions = overrideUtagFunctions\n\n  /**\n   * A queue for any events that Tealium iQ processes with IMPLICIT consent (to allow those events to be re-processed for new Services in the event of an EXPLICIT consent choice by the user).\n   *\n   * Each element in the queue is a [QueuedEvent]{@link QueuedEvent}\n   * @name implicitEventQueue\n   * @type {array}\n   * @memberof! tealiumCmpIntegration\n   */\n  window.tealiumCmpIntegration.implicitEventQueue = window.tealiumCmpIntegration.implicitEventQueue || []\n\n  /**\n   * A queue for any events that are triggered before Tealium iQ AND Usercentrics have both loaded.\n   *\n   * Each element in the queue is a [QueuedEvent]{@link QueuedEvent}\n   * @name earlyEventQueue\n   * @type {array}\n   * @memberof! tealiumCmpIntegration\n   */\n  window.tealiumCmpIntegration.earlyEventQueue = window.tealiumCmpIntegration.earlyEventQueue || []\n\n  /**\n   * Allows us to make sure we don't log certain messages more than once, especially useful while polling to avoid overwhelming the user.\n   * @function messageNotLoggedYet\n   * @param {*} messageId a string or number to uniquely identify a message for the purposes of deduplication\n   * @returns {boolean} 'true' if the message hasn't been logged yet (and should be logged), otherwise 'false'\n   */\n  var alreadyLoggedMessageIds = {}\n  function messageNotLoggedYet (messageId) {\n    var output = false\n    if (typeof alreadyLoggedMessageIds[messageId] === 'undefined') {\n      alreadyLoggedMessageIds[messageId] = true\n      output = true\n    }\n    return output\n  }\n\n  // if noload is set to 'true', don't interfere, just return to exit this function and allow that setting to stop TiQ load as usual.\n  if (window.utag_cfg_ovrd &amp;&amp; window.utag_cfg_ovrd.noload === true) return false\n\n  logger('CMP integration active - Usercentrics/TiQ' + (tiqInDebugMode ? &quot;\\n\\nDEBUGGING TIP: Use /SENDING|\\\\*\\\\*\\\\*\\\\*/ in the browser console as the 'filter' to show only CMP and tag send notifications.&quot; : '\\n\\nActivate TiQ Debug Mode for more details: https://docs.tealium.com/platforms/javascript/debugging/'), true)\n  var cmpResponse = cmpConsentCheck()\n  // core business/GDPR logic, decides if TiQ should load at all\n  reactToCmpResponse(cmpResponse)\n\n  /**\n   * The core CMP integration logic, which decides if Tealium iQ should be allowed to run, or if it needs to be stopped\n   * until an understandable response that includes permission for Tealium iQ to run is found.\n   *\n   * @function reactToCmpResponse\n   * @param {object} cmpResponse The response from the Usercentrics Vanilla App\n   */\n  function reactToCmpResponse (cmpResponse) {\n    var usercentricsFound = typeof cmpResponse === 'object'\n    var foundWellFormedConsentDecision = checkForWellFormedDecision(cmpResponse)\n    var tagBasedMap = generateTagBasedMap()\n    var foundMapEntryForActiveSetting = Object.keys(tagBasedMap).length &gt; 0\n    var foundExplicitConsent = checkForExplicitConsentDecision(cmpResponse)\n    var tiqIsAllowedToFire = checkForTiqConsent(cmpResponse)\n    var tiqIsLoaded = window.utag &amp;&amp; window.utag.handler &amp;&amp; window.utag.handler.iflag === 1\n\n    if (!usercentricsFound) {\n      /**\n       * CASE A1: no Usercentrics CMS found\n       *\n       * STOP and fire nothing at all\n       * RETRY after a delay\n       */\n      if (messageNotLoggedYet(1)) logger('No Usercentrics CMP found on page.\\n\\nStopping TiQ (no cookies set/removed, no tags fired).\\n\\nPolling for changes.')\n      window.setTimeout(recheckForCmpAndConsent, consentTimeoutInterval)\n      stopTiq()\n    } else if (!foundMapEntryForActiveSetting) {\n      /**\n        * CASE A7: No map found for the current settingsId\n        *\n        * STOP and fire nothing at all. Do not retry.\n        */\n      if (messageNotLoggedYet(2)) logger('No map found for current Usercentrics Setting ID.\\n\\nStopping TiQ (no cookies set/removed, no tags fired).\\n\\nNo retries.')\n      stopTiq()\n    } else if (!foundWellFormedConsentDecision) {\n      /**\n       * CASE A2: Usercentrics CMS found but consent response wasn't well-formed/complete/understandable\n       *\n       * STOP and fire nothing at all\n       * RETRY after a delay\n       */\n      if (messageNotLoggedYet(3)) logger('Found Usercentrics CMP and got response, but didn\\'t understand the response.\\n\\nStopping TiQ (no cookies set/removed, no tags fired).\\n\\nPolling for changes.')\n      window.setTimeout(recheckForCmpAndConsent, consentTimeoutInterval)\n      stopTiq()\n    } else if (!tiqIsAllowedToFire) {\n      /**\n       * CASE A3: Usercentrics CMS found and consent response was well-formed, BUT TiQ didn't have an opt-in\n       *\n       * STOP and fire nothing at all\n       * RETRY after a delay\n       */\n      if (messageNotLoggedYet(4)) logger('Found Usercentrics CMP and got well-formed response, but TiQ isn\\'t allowed to run based on the response.\\n\\nStopping TiQ (no cookies set/removed, no tags fired).\\n\\nPolling for changes.')\n      window.setTimeout(recheckForCmpAndConsent, consentTimeoutInterval)\n      stopTiq()\n    } else if (!foundExplicitConsent) {\n      /**\n       * CASE A4: Usercentrics CMS found AND response was understandable (AND includes an implicit TiQ consent), BUT the user hasn't made an explicit decision yet\n       *\n       * ALLOW TO LOAD for any 'default opt-in' tags (filter logic in Extension B)\n       * RETRY after a delay (in case there's an explicit decision, since implicit decisions usually mean the prompt is displayed)\n       */\n      if (messageNotLoggedYet(5)) logger('Found Usercentrics CMP and got well-formed IMPLICIT response which includes TiQ.\\n\\nAllowing certain tags to fire based on IMPLICIT consent.\\n\\nPolling for changes.')\n      window.setTimeout(recheckForCmpAndConsent, consentTimeoutInterval)\n      if (tiqIsLoaded) {\n        processEarlyQueue()\n      } else {\n        window.setTimeout(recheckForCmpAndConsent, consentTimeoutInterval)\n      }\n      triggerOrQueue()\n    } else if (foundExplicitConsent) {\n      /**\n       * CASE A5: Usercentrics CMS found AND response was understandable, AND the user has made an explicit consent decision AND TiQ is allowed\n       *\n       * ALLOW TO LOAD for any opted-in tags (filter logic in Extension B), do not retry.\n       */\n      if (messageNotLoggedYet(6)) logger('Found Usercentrics CMP and got well-formed EXPLICIT response which includes TiQ.\\n\\nAllowing certain tags to fire based on EXPLICIT consent.\\n\\nNo further polling.')\n      // only call if we've been polling (on initial load, it will load automatically)\n      if (tiqIsLoaded) {\n        processEarlyQueue()\n        processImplicitQueue()\n      } else {\n        window.setTimeout(recheckForCmpAndConsent, consentTimeoutInterval)\n      }\n      triggerOrQueue()\n    } else {\n      /**\n        * CASE A6: Something went wrong with this extension.\n        *\n        * STOP and fire nothing at all. Do not retry.\n        */\n      if (messageNotLoggedYet(7)) logger('Something unexpected went wrong.\\n\\nStopping TiQ (no cookies set/removed, no tags fired).\\n\\nNo retries.')\n      stopTiq()\n    }\n  }\n\n  /**\n   * Override utag.loader.initdata and utag.handler.trigger to allow Tealium iQ Tags to be blocked if the user hasn't consented.\n   *\n   * @function overrideUtagFunctions\n   * @returns {boolean} 'true' if the function was overridden successfully by this request, 'false' if not (because it was already overridden)\n   */\n  function overrideUtagFunctions () {\n    // don't override more than once, assume that if one function has been overridden, both have\n    if (window.utag.handler.trigger.toString().indexOf('tealiumCmpIntegration') !== -1) {\n      return true\n    }\n\n    // the initial view is handled differently than subsequent events\n    // this is safe to to override even if noview is set (because it will never be called in that case)\n    window.utag.loader.initdata_old = window.utag.loader.initdata\n    window.utag.loader.initdata = newUtagLoaderInitdata\n\n    window.utag.handler.trigger_old = window.utag.handler.trigger\n    window.utag.handler.trigger = newUtagHandlerTrigger\n    logger('Overrode utag functions!')\n\n    if (window.utag.handler.trigger.toString().indexOf('tealiumCmpIntegration') !== -1) {\n      return true\n    }\n\n    return false\n  }\n\n  /**\n   * An overridden version of the Tealium iQ function utag.loader.initdata.\n   *\n   * Calls the original function, respects possible noview settings, rechecks the user consent, and calls queueEventWithoutFiringImplicitServices\n   * if only an IMPLICIT consent is found (after recording the IMPLICIT services, to avoid double-firing).\n   *\n   * That same event can then be re-processed for any new Services if an EXPLICIT consent decision later made.\n   *\n   * @function newUtagLoaderInitdata\n   */\n  function newUtagLoaderInitdata () {\n    window.utag.loader.initdata_old()\n    // make sure we don't queue this initial page load twice, and respect the configured noview setting\n    if (!window.tealiumCmpIntegration.isNoviewSet &amp;&amp; !window.tealiumCmpIntegration.alreadyFiredInitialViewEvent) {\n      window.tealiumCmpIntegration.alreadyFiredInitialViewEvent = true\n      var consentedServices = getCurrentConsentDecision()\n      if (consentedServices.type === 'implicit') {\n        window.tealiumCmpIntegration.implicitServices = consentedServices\n        // we don't need to fire implicit services in this case, because TiQ's loading process will fire them\n        queueEventWithoutFiringImplicitServices({\n          event: 'view',\n          data: window.utag.handler.C(window.utag.data)\n        })\n      }\n    }\n  }\n\n  /**\n   * Refresh [tealiumCmpIntegration.tagBasedMap]{@link tealiumCmpIntegration.tagBasedMap} and return that new map, helps smooth out any timing issues between Usercentrics and Tealium iQ load.\n   *\n   * @function generateTagBasedMap\n   * @returns a [TagToServiceMap]{@link TagToServiceMap}\n   */\n  function generateTagBasedMap () {\n    var tagBasedMap = getTagBasedMap(map)\n    window.tealiumCmpIntegration.tagBasedMap = tagBasedMap\n    return tagBasedMap\n  }\n\n  /**\n   * Tealium iQ's utag.handler.trigger normally causes tags to fire. For this integration, we override that function to support blocking tags without consent.\n   *\n   * @function newUtagHandlerTrigger\n   *\n   * @param {*} a can be an object or a string\n   * @param {*} b\n   * @param {*} c\n   */\n  function newUtagHandlerTrigger (a, b, c) {\n    /**\n     * Trigger CASES (utag.handler.trigger override)\n     *\n     * We need to queue the events if we only have implicit consent, to allow a selective retrigger if/when we get an explicit decision.\n     */\n    var isPureConsentEvent = (a === nameOfConsentPollingEvent &amp;&amp; !b &amp;&amp; !c)\n    var isNoviewSet = window.tealiumCmpIntegration.isNoviewSet || true // assume noview if something went wrong with the global, to avoid firing tracking in error\n\n    var consentedServices = getCurrentConsentDecision()\n    var consentType = (consentedServices &amp;&amp; consentedServices.type) || 'none'\n\n    var isUsercentricsReady = consentType === 'implicit' || consentType === 'explicit'\n    var isTealiumReady = window.utag &amp;&amp; window.utag.handler &amp;&amp; window.utag.handler.iflag === 1\n\n    if (!isPureConsentEvent) {\n      logger('utag.handler.trigger called with:\\n\\n' + JSON.stringify(arguments, null, 2))\n    }\n\n    if (!isUsercentricsReady &amp;&amp; !isTealiumReady) {\n      consentedServices.type = 'tealium-and-usercentrics-loading'\n      logger('Waiting for Usercentrics and Tealium to be ready, queueing early event.')\n      queueEarlyEvent(a, b, c)\n      return false\n    } else if (!isUsercentricsReady) {\n      consentedServices.type = 'usercentrics-loading'\n      logger('Usercentrics is still loading, queueing early event')\n      queueEarlyEvent(a, b, c)\n      return false\n    } else if (!isTealiumReady) {\n      consentedServices.type = 'tealium-still-loading'\n      logger('Tealium iQ is still loading, queueing early event')\n      queueEarlyEvent(a, b, c)\n      return false\n    }\n\n    // if an array of tagUids is passed, that forces them to fire regardless of load rules\n    // or consent, so we need to filter that array before allowing it to be processed\n    var hasTagUidArray = c &amp;&amp; typeof c === 'object' &amp;&amp; c.uids &amp;&amp; c.uids &amp;&amp; window.utag.ut.typeOf(c.uids) === 'array'\n    var uidMap = generateTagBasedMap()\n    var allowedTagUids = []\n    var blockedTagUids = []\n    var serviceName\n    var tagUid\n    if (hasTagUidArray) {\n      for (var i = 0; i &lt; c.uids.length; i++) {\n        tagUid = c.uids[i]\n        serviceName = uidMap[tagUid] || '(missing)'\n        // only push consented services into the new array\n        if (consentedServices.indexOf(serviceName) !== -1) {\n          allowedTagUids.push(tagUid)\n        } else {\n          blockedTagUids.push(tagUid)\n        }\n      }\n      // replace the original with the filtered array (can also be empty, if none of them were allowed)\n      logger('Call included tagUid array:\\n\\n' + JSON.stringify(c.uids) + '\\n\\nwhich was replaced by the filtered version:\\n\\n' + JSON.stringify(allowedTagUids))\n      c.originalUids = c.uids.slice() // make a shallow copy\n      c.uids = allowedTagUids\n      c.blockedTagUids = blockedTagUids\n    }\n\n    if (consentType === 'explicit') {\n      /**\n       * CASE T2: expected globals are populated, consent is EXPLICIT\n       *\n       * FIRE allowed tags (explicit)\n       * utag.handler.trigger override PROCESSES the queue, which will include any queued events from CASE A4, making sure not to re-fire any default\n       *   opt-in tags that were already fired for the queued events\n       */\n      // make sure TiQ loads\n      processEarlyQueue()\n      processImplicitQueue()\n      triggerTiqLoad()\n      // fire the current event if it's not just a polling event\n      if (!isPureConsentEvent) {\n        return window.utag.handler.trigger_old(a, b, c)\n      }\n    } else if (consentType === 'implicit') {\n      /**\n       * CASE T3: expected globals are populated, consent is IMPLICIT\n       *\n       * FIRE allowed tags (implicit)\n       * utag.handler.trigger override KEEPS a queue/record that includes\n       *  - the event(s) that were processed based on implicit consent\n       *  - which tags were allowed to process each event (are set to implicit opt-in)\n       */\n      processEarlyQueue()\n      // fire the initial view if appropriate, and queue it\n      triggerTiqLoad()\n      window.tealiumCmpIntegration.implicitServices = consentedServices\n\n      // queue the initial 'view' on pageload if appropriate\n      if (!isNoviewSet &amp;&amp; isTealiumReady &amp;&amp; !window.tealiumCmpIntegration.alreadyFiredInitialViewEvent) {\n        window.tealiumCmpIntegration.alreadyFiredInitialViewEvent = true\n        queueEventAndFireImplicitServices('view', window.utag.handler.C(window.utag.data))\n      }\n      // queue the current event if it exists (and this isn't just consent polling)\n      if (!isPureConsentEvent) {\n        return queueEventAndFireImplicitServices(a, b, c)\n      }\n    } else if (consentType === 'missing-map') {\n      logger('Something went wrong - all tags were blocked because no consent map was found for the active setting ID.')\n      return false\n    } else if (consentType === 'missing-tiq-consent') {\n      logger('Something went wrong - all tags were blocked because no consent was found for &quot;' + tiqServiceName + '&quot;, configured Tealium iQ name.\\n\\nConsent found: ' + JSON.stringify(consentedServices, null, 2))\n      return false\n    } else {\n      /**\n       * CASE T1: expected variables not populated (misconfiguration/error case)\n       *\n       * STOP and fire nothing at all. Do not retry or queue the event.\n       */\n      logger('Something went wrong - all tags were blocked because the consent response was not understood.')\n      return false\n    }\n  }\n\n  /**\n   * Process any queued tracking events from [the early event queue]{@link tealiumCmpIntegration.earlyEventQueue} (can include pageviews) for any currently-consented Services.\n   *\n   * Intended to be called first understandable implicit consent.\n   *\n   * @function processEarlyQueue\n   */\n  function processEarlyQueue () {\n    var queuedEvent\n    window.tealiumCmpIntegration.earlyEventQueue = window.tealiumCmpIntegration.earlyEventQueue || []\n    while (window.tealiumCmpIntegration.earlyEventQueue.length &gt; 0) {\n      // process past events\n      queuedEvent = window.tealiumCmpIntegration.earlyEventQueue.shift()\n      logger('Processing queued early event for currently consented tags: ' + JSON.stringify(queuedEvent, null, 2))\n      window.utag.track(queuedEvent)\n    }\n  }\n\n  /**\n   * Process any queued tracking events from [the global queue]{@link tealiumCmpIntegration.implicitEventQueue} (can include pageviews) for any newly-consented Services.\n   *\n   * Intended to be called on new EXPLICIT consent decision - queued events have already had IMPLICTLY consented tags fired, so those need to be excluded.\n   *\n   * @function processImplicitQueue\n   */\n  function processImplicitQueue () {\n    var alreadyLogged = false\n    var queuedEvent\n    window.tealiumCmpIntegration.implicitEventQueue = window.tealiumCmpIntegration.implicitEventQueue || []\n    while (window.tealiumCmpIntegration.implicitEventQueue.length &gt; 0) {\n      if (!alreadyLogged) {\n        alreadyLogged = true\n        logger('Explicit consent tracking request received - processing past implicitly tracked events (' + window.tealiumCmpIntegration.implicitEventQueue.length + ') for any new explicit tags.')\n      }\n      // process past events\n      queuedEvent = window.tealiumCmpIntegration.implicitEventQueue.shift()\n      logger('Triggering event for explicitly-consented tags: ' + JSON.stringify(queuedEvent))\n      window.utag.track(queuedEvent)\n    }\n  }\n\n  /**\n   * Queue a [tracking event]{@link QueuedEvent} in [the early queue]{@link tealiumCmpIntegration.earlyEventQueue}, without firing any tags.\n   *\n   * Intended to be called for events that triggered before we get an understandable response from Usercentrics.\n   *\n   * @function queueEarlyEvent\n   * @param {*} a the 'a' argument from utag.handler.trigger\n   * @param {*} b the 'b' argument from utag.handler.trigger\n   * @param {*} c the 'c' argument from utag.handler.trigger\n   *\n   */\n  function queueEarlyEvent (a, b, c) {\n    a = a || {}\n\n    // make a copy, in case shared objects are used (like utag_data, or a similar global) - snapshot those\n    if (typeof b === 'object') {\n      b = JSON.parse(JSON.stringify(b))\n    }\n    // convert to a more standard format\n    if (typeof a === 'string') {\n      a = { event: a, data: b || {}, cfg: c }\n    }\n\n    // if there's a tagUid array, don't queue the already-fired tags - instead, swap that with any blocked tags\n    if (a &amp;&amp; a.cfg &amp;&amp; window.utag.ut.typeOf(a.cfg.uids) === 'array') {\n      a.cfg.uids = a.cfg.blockedTagUids.slice()\n    }\n\n    // nothing will be allowed to fire\n    a.data[nameOfImplicitConsentArray] = []\n\n    window.tealiumCmpIntegration.earlyEventQueue = window.tealiumCmpIntegration.earlyEventQueue || []\n    window.tealiumCmpIntegration.earlyEventQueue.push(a)\n    logger('Queued early event!')\n  }\n\n  /**\n   * Queue a [tracking event]{@link QueuedEvent} in [the global queue]{@link tealiumCmpIntegration.implicitEventQueue}, without firing any implictly consented Services.\n   *\n   * Intended to be called for the initial pageview on load, since the load process will have already fired the implicit services.\n   *\n   * @function queueEventWithoutFiringImplicitServices\n   * @param {*} a the 'a' argument from utag.handler.trigger\n   * @param {*} b the 'b' argument from utag.handler.trigger\n   * @param {*} c the 'c' argument from utag.handler.trigger\n   *\n   */\n  function queueEventWithoutFiringImplicitServices (a, b, c) {\n    a = a || {}\n\n    // make a copy, in case shared objects are used (like utag_data, or a similar global) - snapshot those\n    if (typeof b === 'object') {\n      b = JSON.parse(JSON.stringify(b))\n    }\n    // convert to a more standard format\n    if (typeof a === 'string') {\n      a = { event: a, data: b || {}, cfg: c }\n    }\n\n    // if there's a tagUid array, don't queue the already-fired tags - instead, swap that with any blocked tags\n    if (a &amp;&amp; a.cfg &amp;&amp; window.utag.ut.typeOf(a.cfg.uids) === 'array') {\n      a.cfg.uids = a.cfg.blockedTagUids.slice()\n    }\n\n    a.data[nameOfImplicitConsentArray] = window.tealiumCmpIntegration.implicitServices || []\n\n    window.tealiumCmpIntegration.implicitEventQueue = window.tealiumCmpIntegration.implicitEventQueue || []\n    window.tealiumCmpIntegration.implicitEventQueue.push(a)\n  }\n\n  /**\n   * Queue a [tracking event]{@link QueuedEvent} in [the global queue]{@link tealiumCmpIntegration~implicitEventQueue}, without firing any implictly consented Services.\n   *\n   * Intended to be called for all events other than the initial page load.\n   *\n   * @function queueEventAndFireImplicitServices\n   * @param {*} a the 'a' argument from utag.handler.trigger\n   * @param {*} b the 'b' argument from utag.handler.trigger\n   * @param {*} c the 'c' argument from utag.handler.trigger\n   *\n   */\n  function queueEventAndFireImplicitServices (a, b, c) {\n    // fire the implicit tags\n    window.utag.handler.trigger_old(a, b, c)\n    logger('Implicit consent tracking request fired (or queued, if utag hasn\\'t loaded).')\n    return queueEventWithoutFiringImplicitServices(a, b, c)\n  }\n\n  /**\n   * Generate a {@link TagToServiceMap TagToServiceMap} based on a {@link ServiceToTagMap ServiceToTagMap}\n   *\n   * @function getTagBasedMap\n   * @param {object} map a {@link ServiceToTagMap ServiceToTagMap} object\n   * @return {object} a {@link TagToServiceMap TagToServiceMap}\n   */\n  function getTagBasedMap (map) {\n    // generate a lookup based on the tagUid\n    if (typeof map !== 'object') return {}\n    var settingsId = getCurrentUsercentricsSettingsId() || ''\n    if (typeof settingsId !== 'string' || settingsId === '') return {}\n    var settingSpecificMap = map[settingsId] || {}\n    var serviceNames = Object.keys(settingSpecificMap)\n    var uidMap = {}\n    for (var i = 0; i &lt; serviceNames.length; i++) {\n      for (var j = 0; j &lt; settingSpecificMap[serviceNames[i]].length; j++) {\n        uidMap[settingSpecificMap[serviceNames[i]][j]] = serviceNames[i]\n      }\n    }\n    return uidMap\n  }\n\n  /**\n   * Get the current Usercentrics settingsId from the page.\n   *\n   * @returns {string} the Usercentrics settingsId, defaults to an empty string if none is found\n   */\n  function getCurrentUsercentricsSettingsId () {\n    return (window.usercentrics &amp;&amp; window.usercentrics.settingsId) || ''\n  }\n\n  /**\n   * Trigger the core logic with an up-to-date array of objects returned by calling [usercentrics.getConsents]{@link https://docs.usercentrics.com/#/?id=getconsents}\n   * @function recheckForCmpAndConsent\n   */\n  function recheckForCmpAndConsent () {\n    var newConsentResponse = cmpConsentCheck()\n    reactToCmpResponse(newConsentResponse)\n  }\n\n  /**\n   * Call [usercentrics.getConsents]{@link https://docs.usercentrics.com/#/?id=getconsents} to get the current consent decision.\n   * @function cmpConsentCheck\n   */\n  function cmpConsentCheck () {\n    if (!window.usercentrics || typeof window.usercentrics.getConsents !== 'function') return false\n    var cmpConsentArray = window.usercentrics.getConsents()\n    return cmpConsentArray\n  }\n\n  /**\n   * Indicates if Usercentrics has loaded and returned a well-formed indication of user consent.\n   * @function checkForWellFormedDecision\n   * @param cmpConsentArray the array of objects returned by [usercentrics.getConsents]{@link https://docs.usercentrics.com/#/?id=getconsents}.\n   * @returns {boolean} 'true' if the consent decision is well-formed, otherwise 'false'\n   */\n  function checkForWellFormedDecision (cmpConsentArray) {\n    // treat things we don't understand as an opt-out\n    if (toString.call(cmpConsentArray) !== '[object Array]') return false\n    // use the first entry as a proxy for all\n    if (cmpConsentArray &amp;&amp; cmpConsentArray[0] &amp;&amp; typeof cmpConsentArray[0].dataProcessingService === 'string') {\n      return true\n    }\n    return false\n  }\n\n  /**\n   * Indicates if the user has made an EXPLICIT decision\n   * @function checkForExplicitConsentDecision\n   * @param cmpConsentArray the array of objects returned by [usercentrics.getConsents]{@link https://docs.usercentrics.com/#/?id=getconsents}.\n   * @returns {boolean} 'true' if the consent decision is EXPLICIT otherwise 'false'\n   */\n  function checkForExplicitConsentDecision (cmpConsentArray) {\n    // treat things we don't understand as an opt-out\n    if (toString.call(cmpConsentArray) !== '[object Array]') return false\n    // use the first entry as a proxy for all\n    if (cmpConsentArray &amp;&amp; cmpConsentArray[0] &amp;&amp; cmpConsentArray[0].updatedBy === 'explicit') {\n      return true\n    }\n    return false\n  }\n\n  /**\n   * Indicates if Tealium iQ has permission to run (and fire tags).\n   * @function checkForTiqConsent\n   * @param cmpConsentArray the array of objects returned by [usercentrics.getConsents]{@link https://docs.usercentrics.com/#/?id=getconsents}.\n   * @returns {boolean} 'true' if TiQ is allowed to run, otherwise 'false'\n   */\n  function checkForTiqConsent (cmpConsentArray) {\n    var foundOptIn = false\n    // treat things we don't understand as an opt-out\n    if (toString.call(cmpConsentArray) !== '[object Array]') return false\n    // check vendors if there's an object, look for at least one\n    cmpConsentArray.forEach(function (tagInfo) {\n      if (tagInfo.consentStatus === true &amp;&amp; tagInfo.dataProcessingService === tiqServiceName) {\n        foundOptIn = true\n      }\n    })\n    return foundOptIn\n  }\n\n  /**\n   * Create an instance of\n   * @param {array} cmpConsentArray the array of objects returned by calling [usercentrics.getConsents]{@link https://docs.usercentrics.com/#/?id=getconsents}\n   */\n  function getVendorConsentsFromCmpConsentArray (cmpConsentArray) {\n    var vendorArray = []\n\n    var isWellFormed = checkForWellFormedDecision(cmpConsentArray)\n\n    if (!isWellFormed) {\n      vendorArray.type = 'missing-well-formed-response'\n      return []\n    }\n\n    var tagBasedMap = generateTagBasedMap()\n\n    // if there is no mapping for the settings id, we need to change the console output\n    var currentSettingsIdHasMapping = (typeof tagBasedMap === 'object' &amp;&amp; Object.keys(tagBasedMap).length &gt; 0)\n\n    if (!currentSettingsIdHasMapping) {\n      vendorArray.type = 'missing-map'\n      return []\n    }\n\n    cmpConsentArray &amp;&amp; cmpConsentArray.forEach(function (tagConsent) {\n      if (tagConsent.consentStatus === true) {\n        vendorArray.push(tagConsent.dataProcessingService)\n      }\n    })\n    vendorArray.type = checkForExplicitConsentDecision(cmpConsentArray) ? 'explicit' : 'implicit'\n\n    if (checkForTiqConsent(cmpConsentArray) === false) {\n      // change the consent type, but leave the array for debugging purposes\n      vendorArray.type = 'missing-tiq-consent'\n    }\n\n    return vendorArray\n  }\n\n  /**\n   * Get the current consent decision from the CMP for the active Setting\n   * @function getCurrentConsentDecision\n   * @returns a {@link ConsentDecision ConsentDecision}\n   */\n  function getCurrentConsentDecision () {\n    var freshConsent = cmpConsentCheck()\n\n    return getVendorConsentsFromCmpConsentArray(freshConsent)\n  }\n\n  /**\n   *  A conditional logging function - we can't use utag.DB directly because some of our logic needs to be preloader, but we can mimic the same logic so that our logging only displays when TiQ is in debug mode and/or not in Prod, or is explicitly forced.\n   * @function logger\n   * @param {string} message the message to be conditionally shown\n   * @param {boolean} showOutsideDebugMode if 'true', forces the message to shown outside of debug mode, except on Prod\n   */\n  function logger (message, showOutsideDebugMode) {\n    if (typeof tealiumEnvironment === 'undefined' || tealiumEnvironment === 'prod') {\n      // don't allow anything outside of debug mode on prod (disable this flag)\n      showOutsideDebugMode = false\n    }\n\n    if (showOutsideDebugMode || tiqInDebugMode) {\n      message = '\\n' + message + '\\n'\n      var formattedArr = []\n      formattedArr.push('****************')\n      var messageArr = message.split('\\n')\n      messageArr.forEach(function (messageLine) {\n        formattedArr.push('*  ' + messageLine)\n      })\n      formattedArr.push('****************')\n      var outputString = formattedArr.join('\\n')\n      console.log(outputString)\n    }\n  }\n\n  /**\n   * Stops Tealium iQ from loading (the TMS will not load tags or set a cookie if this function is called in Pre Loader), using the {@link https://docs.tealium.com/platforms/javascript/settings/#noload noload} setting\n   * @function stopTiq\n   */\n  function stopTiq () {\n    // logger(&quot;stopTiq function fired&quot;)\n    window.utag_cfg_ovrd = window.utag_cfg_ovrd || {}\n    window.utag_cfg_ovrd.noload = true\n  }\n\n  /**\n   * Allows TiQ to finish loading, intended to be called when a well-formed consent response is received, and that response allows Tealium iQ to run.\n   *\n   * Works by setting {@link https://docs.tealium.com/platforms/javascript/settings/#noload noload} to 'false' and calling Tealium iQ's utag.loader.PINIT method.\n   *\n   * If noload was 'true' and this function runs it must've been set to true by our own {@link module:extension-1~stopTiq stopTiq} function, because otherwise Tealium iQ wouldn't have been allowed to load/poll in the first place.\n   * @function triggerTiqLoad\n   * @returns {boolean} 'true' if Tealium iQ was successfully triggered, 'false' if it wasn't triggered because it's already initiated\n   */\n  function triggerTiqLoad () {\n    // if usercentrics is ready on the first request, TiQ won't have loaded yet at all - let it load naturally\n    if (!window.utag) {\n      return true\n    }\n    // if TiQ has already loaded but these flags aren't truthy, we've interrupted the load and should retrigger it\n    // initial load / view (noview logic handled in utag.handler.trigger function itself)\n    if (!window.utag.handler || !window.utag.handler.iflag) {\n      // we don't need to reload actually, just allow it to finish loading\n      window.utag.cfg.noload = false // safe because this code only runs if it was set to false originally\n      window.utag.loader.PINIT()\n      return true\n    }\n    // already loaded\n    return false\n  }\n\n  /**\n   * If Tealium iQ hasn't loaded, load it (calling utag.handler.trigger in the process), otherwise call utag.handler.trigger.\n   * @function triggerOrQueue\n   */\n  function triggerOrQueue () {\n    var successfullyTriggeredLoadIfNeeded = triggerTiqLoad()\n    if (!successfullyTriggeredLoadIfNeeded) {\n      // explicit consent from polling, but load has already been triggered\n      return window.utag.handler.trigger(nameOfConsentPollingEvent)\n    }\n  }\n  /**\n   * Get the the current Tealium iQ environment.\n   *\n   * Since this runs in Pre Loader, it needs to use regex to recognize the utag.js file in the DOM and read the environment from the file name (there are no utag functions or objects at this point in the load).\n   *\n   * NOTE: This doesn't work correctly when using the the Environment Switcher (because the original script is added to the DOM instead of the new one, and the 307 redirect that's used to pull the new file(s) only changes the response, not the script element itself).\n   *\n   * If you're using the Environment Switcher on Prod and would like to see console output, set the [debug cookie]{@link https://docs.tealium.com/platforms/javascript/debugging/}.\n   *\n   * @function getTealiumEnvironment\n   * @returns {boolean} 'true' if Tealium iQ was successfully triggered, 'false' if it wasn't triggered because it's already initiated\n   */\n  function getTealiumEnvironment () {\n    var allScripts = document.getElementsByTagName('script')\n    var re = /\\/([^/]*)\\/utag\\.js(\\?.*)*$/\n    for (var i = 0; i &lt; allScripts.length; i++) {\n      var result = re.exec(allScripts[i].src) // can be null\n      if (result &amp;&amp; result[1]) { // [1] is the result of the match\n        return result[1]\n      }\n    }\n    return 'prod' // default to guessing we're in prod, just in case we're actually in prod (to avoid logging in Prod)\n  }\n})()\n\n// Document key data structures here for clarity.\n\n/**\n * An array of Usercentrics Service Names that have permission to run (uses the 'dataProcessingService' property from [usercentrics.getConsents]{@link https://docs.usercentrics.com/#/?id=getconsents}).\n *\n * Also includes a 'type' property that indicates whether the consent decision is IMPLICIT or EXPLICT.\n *\n * @static\n * @type {array}\n * @name ConsentDecision\n * @memberof! &lt;global&gt;\n * @property {string} type the type of consent, will be either 'implicit' or 'explicit'\n * @example\nvar exampleConsentDecision = window.tealiumCmpIntegration.getCurrentConsentDecision()\n\nJSON.stringify(exampleConsentDecision)\n// [&quot;Google Analytics&quot;,&quot;Another Tag&quot;,&quot;Tealium iQ Tag Management&quot;]\n\nexampleConsentDecision.type\n// &quot;explicit&quot;\n\nexampleConsentDecision.length\n// 3\n */\n\n/**\n * Assigns Tealium iQ Tags to Usercentrics Service Names. Each service can have multiple tags, but each tag can only have one service.  If the same tag UID appears in multiple Service arrays, only one will be used.\n *\n * The keys for the main object are Setting-IDs from Usercentrics, inside that are key/value pairs where the key is a Service Name from Usercentrics, and the value is an array of TagUIDs from Tealium iQ.\n *\n * This needs to be provided as per the example below, in [tealiumCmpIntegration.map]{@link namespace:tealiumCmpIntegration~map}.\n *\n * An [example Tealium iQ extension]{@link module:example-map} is provided as well.\n *\n * @static\n * @type {object}\n * @name ServiceToTagMap\n * @memberof! &lt;global&gt;\n * @example\nwindow.tealiumCmpIntegration = window.tealiumCmpIntegration || {}\nwindow.tealiumCmpIntegration.map = {\n  'yPyIAIIxY': {\n    'Google Analytics': [6, 8, 10],\n    'Mouseflow': [7, 9],\n    'Another Tag': [11]\n  }\n}\n */\n\n/**\n * A simple lookup, with Tealium iQ tag UIDs as keys and the associated Usercentrics service name as strings as values. Each service can be associated with multiple tags, but each tag can be associated with one service.\n *\n * The example is based on the {@link ServiceToTagMap ServiceToTagMap} example, where the Usercentrics settingsId on the active page is 'yPyIAIIxY'.\n *\n * This object is automatically generated by the [getTagBasedMap]{@link module:extension-1~getTagbasedMap} method, and made available globally in [tealiumCmpIntegration.tagBasedMap]{@link tealiumCmpIntegration~tagBasedMap} for debugging and use within the extensions.\n *\n * @static\n * @type {object}\n * @name TagToServiceMap\n * @memberof! &lt;global&gt;\n * @example\n{\n  6: 'Google Analytics',\n  7: 'Mouseflow',\n  8: 'Google Analytics',\n  9: 'Mouseflow',\n  10: 'Google Analytics',\n  11: 'Another Tag'\n}\n */\n\n/**\n * An object from the [implicitEventQueue]{@link tealiumCmpIntegration.implicitEventQueue} or [earlyEventQueue]{@link tealiumCmpIntegration.earlyEventQueue}, which represents a Tealium iQ tracking event that's been processed based on an IMPLICIT [ConsentDecision]{@link ConsentDecision}\n *\n * Heavily based on the argument passed to [utag.track]{@link https://community.tealiumiq.com/t5/Tealium-iQ-Tag-Management/utag-track-method/td-p/24578}, since it's designed to be processed by that method.\n *\n * Initial pageviews (handled in the [utag.loader.initdata override]{@link module:extension-1~newUtagLoaderInitdata}) will NOT have metadata like cookies, qps, etc - utag.track calls (handled in the [utag.handler.trigger override]{@link module:extension-1~newUtagHandlerTrigger}) will. That's a byproduct of using utag.handler.trigger, which is later in the load - those metadata will be re-read when the queue is processed, and since this queue isn't persisted between pages, it should be fine like that - the only strange behavior will be that any metadata that aren't present on re-read will still be present after the re-read - only values that are still present will be replaced with new values.\n *\n * An alternative approach could be to manually remove 'cp.\\*', 'dom.\\*', 'ut.\\*', 'qp.\\*', 'meta.\\*' and possibly 'tealium_\\*' (except 'tealium_event') from the 'data' object before queueing - that hasn't been done so far.\n *\n * @static\n * @type {array}\n * @name QueuedEvent\n * @memberof! &lt;global&gt;\n * @property {string} event the type of tracking event, generally 'view' for pageviews or 'link' for other events\n * @property {object} data the Universal Data Object associated with the event (from utag_data or the b object)\n * @property {object} cfg an optional configuration object that can have a 'cb' property (for a callback function) and a 'uids' array, which is a list of tag UIDs that should be triggered by the event, regardless of whether load rules are met.\n * @example\n{\n  &quot;event&quot;: &quot;view&quot;,\n  &quot;data&quot;: {\n    &quot;page_type&quot;: &quot;test_virtual_view&quot;,\n    &quot;cp.utag_main_v_id&quot;: &quot;0174492849d50013581219634d6103079004907101274&quot;,\n    &quot;cp.utag_main__sn&quot;: &quot;4&quot;,\n    &quot;cp.utag_main__se&quot;: &quot;4&quot;,\n    &quot;cp.utag_main__ss&quot;: &quot;0&quot;,\n    &quot;cp.utag_main__st&quot;: &quot;1598990152209&quot;,\n    &quot;cp.utag_main_ses_id&quot;: &quot;1598988112353&quot;,\n    &quot;cp.utag_main__pn&quot;: &quot;3&quot;,\n    &quot;cp.utagdb&quot;: &quot;true&quot;,\n    &quot;dom.referrer&quot;: &quot;&quot;,\n    &quot;dom.title&quot;: &quot;Usercentrics Test&quot;,\n    &quot;dom.domain&quot;: &quot;solutions.tealium.net&quot;,\n    &quot;dom.query_string&quot;: &quot;&quot;,\n    &quot;dom.hash&quot;: &quot;&quot;,\n    &quot;dom.url&quot;: &quot;https://solutions.tealium.net/hosted/usercentrics/test-page-standard.html&quot;,\n    &quot;dom.pathname&quot;: &quot;/hosted/usercentrics/test-page-standard.html&quot;,\n    &quot;dom.viewport_height&quot;: 456,\n    &quot;dom.viewport_width&quot;: 1825,\n    &quot;ut.domain&quot;: &quot;tealium.net&quot;,\n    &quot;ut.version&quot;: &quot;ut4.46.202009011921&quot;,\n    &quot;ut.event&quot;: &quot;view&quot;,\n    &quot;ut.visitor_id&quot;: &quot;0174492849d50013581219634d6103079004907101274&quot;,\n    &quot;ut.session_id&quot;: &quot;1598988112353&quot;,\n    &quot;ut.account&quot;: &quot;services-caleb&quot;,\n    &quot;ut.profile&quot;: &quot;usercentrics-by-tag&quot;,\n    &quot;ut.env&quot;: &quot;prod&quot;,\n    &quot;tealium_event&quot;: &quot;view&quot;,\n    &quot;tealium_visitor_id&quot;: &quot;0174492849d50013581219634d6103079004907101274&quot;,\n    &quot;tealium_session_id&quot;: &quot;1598988112353&quot;,\n    &quot;tealium_session_number&quot;: &quot;4&quot;,\n    &quot;tealium_session_event_number&quot;: &quot;4&quot;,\n    &quot;tealium_datasource&quot;: &quot;&quot;,\n    &quot;tealium_account&quot;: &quot;services-caleb&quot;,\n    &quot;tealium_profile&quot;: &quot;usercentrics-by-tag&quot;,\n    &quot;tealium_environment&quot;: &quot;prod&quot;,\n    &quot;tealium_random&quot;: &quot;2085060854215077&quot;,\n    &quot;tealium_library_name&quot;: &quot;utag.js&quot;,\n    &quot;tealium_library_version&quot;: &quot;4.46.0&quot;,\n    &quot;tealium_timestamp_epoch&quot;: 1598988352,\n    &quot;tealium_timestamp_utc&quot;: &quot;2020-09-01T19:25:52.211Z&quot;,\n    &quot;tealium_timestamp_local&quot;: &quot;2020-09-01T21:25:52.211&quot;,\n    &quot;usercentrics_services_with_consent&quot;: [\n      &quot;Mouseflow&quot;,\n      &quot;Tealium iQ Tag Management&quot;,\n      &quot;Usercentrics Consent Management Platform&quot;\n    ],\n    &quot;usercentrics_consent_type&quot;: &quot;implicit&quot;,\n    &quot;_usercentrics_services_already_processed&quot;: [\n      &quot;Mouseflow&quot;,\n      &quot;Tealium iQ Tag Management&quot;,\n      &quot;Usercentrics Consent Management Platform&quot;\n    ]\n  },\n  &quot;cfg&quot;: {\n    &quot;cb&quot;: function myCallback () {console.log(&quot;Callback fired!&quot;)},\n    &quot;uids&quot;: [\n      11\n    ],\n    &quot;originalUids&quot;: [\n      7,\n      11\n    ],\n    &quot;blockedTagUids&quot;: [\n      11\n    ]\n  }\n}\n*/\n","name":"dev"},"6754af9632a2745e85c293e5aac0863370d9bd3330b9938c00cadfd215227d77":{"code":"/**\n *  Scope       : Pre Loader\n *  Condition   : n/a\n *  Description : CMP 1/2 - Preloader component - prevent TiQ from loading if no consent, queue implicitly consented events to retrigger (for new tags only) if explicit decision is made.\n */\n\n/**\n  * @module extension-1\n  *\n  * @description The 'Pre Loader' extension component of the CMP integration, responsible for stopping Tealium iQ from loading/running as appropriate, and making certain\n  * window-scoped functions available to the other components.\n  */\n\n// Tealium iQ runs Pre Loader extensions in global scope, which would make all variables global. We don't want to do that.\n(function avoidGlobalScopeUnlessExplicit () {\n  // set names for key objects and variables to make them easy to change if needed\n\n  var version = 'v0.10-beta'\n\n  // for the consent information in the b object\n  var nameOfVendorOptInArray = 'usercentrics_services_with_consent'\n  var nameOfConsentTypeString = 'usercentrics_consent_type'\n\n  // for the name in the queue\n  var nameOfImplicitConsentArray = '_usercentrics_services_already_processed'\n\n  // name to use when calling utag.handler.trigger to indicate a consent polling call\n  var nameOfConsentPollingEvent = 'tiq_usercentrics_consent_polling'\n\n  var consentTimeoutInterval = 400 // setTimeout interval in MS - rate to poll for new (explicit) consent decision or correctly formed object\n\n  // check for the Tealium Debug cookie, see https://docs.tealium.com/platforms/javascript/debugging/\n  var tiqInDebugMode = /utagdb=true/.test(document.cookie)\n  var tealiumEnvironment = getTealiumEnvironment() || 'prod' // fall back to prod (stops logging) if something goes wrong with the function\n\n  /**\n   * A window-scoped (global) object used to expose selected functionality.\n   *\n   * @namespace tealiumCmpIntegration\n   * @type {object}\n   * @memberof! &lt;global&gt;\n   */\n  window.tealiumCmpIntegration = window.tealiumCmpIntegration || {}\n\n  /**\n   * The name of the CMP (&quot;Usercentrics Vanilla App&quot; in this case).\n   * @name cmpName\n   * @type {string}\n   * @memberof! tealiumCmpIntegration\n   */\n  window.tealiumCmpIntegration.cmpName = 'Usercentrics Vanilla App'\n\n  /**\n   * A map of Usercentrics Data Processing Services to arrays of Tealium iQ tag UIDs, a {@link ServiceToTagMap ServiceToTagMap}\n   * @name map\n   * @type {object}\n   * @memberof! tealiumCmpIntegration\n   */\n  var map = window.tealiumCmpIntegration.map || {}\n\n  /**\n   * A map of Usercentrics Data Processing Services to arrays of Tealium iQ tag UIDs, a {@link TagToServiceMap TagToServiceMap}\n   * @name tagBasedMap\n   * @type {object}\n   * @memberof! tealiumCmpIntegration\n   */\n  generateTagBasedMap() // populates the window-level object for you as well\n\n  /**\n   * The Service Name for Tealium iQ in Usercentrics (used to decide if the TMS is allowed to run).  Uses the Usercentrics standard name if not provided.\n   * @name tiqServiceName\n   * @type {object}\n   * @memberof! tealiumCmpIntegration\n   * @default 'Tealium iQ Tag Management'\n   * @example\nwindow.tealiumCmpIntegration = window.tealiumCmpIntegration || {}\nwindow.tealiumCmpIntegration.tiqServiceName = &quot;Tealium iQ Tag Management&quot;\n   */\n  var tiqServiceName = window.tealiumCmpIntegration.tiqServiceName || 'Tealium iQ Tag Management' // use the standard name here if not set\n\n  /**\n   * The current version designation.\n   * @name version\n   * @type {string}\n   * @memberof! tealiumCmpIntegration\n   */\n  window.tealiumCmpIntegration.version = version\n\n  /**\n   * A [logger helper function]{@link module:extension-1~logger}, to help Tealium iQ users understand and troubleshoot this CMP integration without unneeded logging in production.\n   * @name logger\n   * @type {function}\n   * @memberof! tealiumCmpIntegration\n   */\n  window.tealiumCmpIntegration.logger = logger\n\n  /**\n   * A [helper function]{@link module:extension-1~getCurrentConsentDecision} that returns the current [ConsentDecision]{@link ConsentDecision}.\n   * @name getCurrentConsentDecision\n   * @type {function}\n   * @memberof! tealiumCmpIntegration\n   */\n  window.tealiumCmpIntegration.getCurrentConsentDecision = getCurrentConsentDecision\n\n  /**\n   * A [helper function]{@link module:extension-1~getCurrentUsercentricsSettingsId} that returns the current Usercentrics settingsId.\n   * @name getCurrentUsercentricsSettingsId\n   * @type {function}\n   * @memberof! tealiumCmpIntegration\n   */\n  window.tealiumCmpIntegration.getCurrentUsercentricsSettingsId = getCurrentUsercentricsSettingsId\n\n  /**\n   * Records the status of the [noview]{@link https://docs.tealium.com/platforms/javascript/settings/#noview} setting on page load.\n   * @name isNoviewSet\n   * @type {boolean}\n   * @memberof! tealiumCmpIntegration\n   */\n  window.tealiumCmpIntegration.isNoviewSet = window.utag_cfg_ovrd &amp;&amp; window.utag_cfg_ovrd.noview === true\n\n  /**\n   * The name to use for the [ConsentDecision]{@link ConsentDecision} array when adding it to Tealium's b object on each event.\n   * @name nameOfVendorOptInArray\n   * @type {string}\n   * @memberof! tealiumCmpIntegration\n   */\n  window.tealiumCmpIntegration.nameOfVendorOptInArray = nameOfVendorOptInArray\n\n  /**\n   * The name to use for the current [ConsentDecision]{@link ConsentDecision}'s 'type' attribute when adding it to Tealium's b object on each event.\n   * @name nameOfConsentTypeString\n   * @type {string}\n   * @memberof! tealiumCmpIntegration\n   */\n  window.tealiumCmpIntegration.nameOfConsentTypeString = nameOfConsentTypeString\n\n  /**\n   * The name to use for the array of implicit tags (which have already been fired) in the 'data' property of {@link QueuedEvent QueuedEvent} objects.\n   * @name nameOfImplicitConsentArray\n   * @type {string}\n   * @memberof! tealiumCmpIntegration\n   */\n  window.tealiumCmpIntegration.nameOfImplicitConsentArray = nameOfImplicitConsentArray\n\n  /**\n   * A [helper function]{@link module:extension-1~overrideUtagFunctions} that overrides certain utag functions to allow tags to be blocked based on CMP response.\n   *\n   * Must be called directly after the '##UTGEN##' reference by [editing]{@link https://community.tealiumiq.com/t5/iQ-Tag-Management/Managing-Tag-Templates/ta-p/21713} the 'utag loader' template, as shown in the example.\n   * @name overrideUtagFunctions\n   * @type {function}\n   * @memberof! tealiumCmpIntegration\n   * @example\n// ... utag loader template ...\n\n##UTGEN##\n// override two utag functions for the Usercentrics CMP Integration, to allow tags to be blocked as needed\nwindow.tealiumCmpIntegration &amp;&amp; window.tealiumCmpIntegration.overrideUtagFunctions &amp;&amp; window.tealiumCmpIntegration.overrideUtagFunctions()\n\n// ... utag loader template continues...\n\n   */\n  window.tealiumCmpIntegration.overrideUtagFunctions = overrideUtagFunctions\n\n  /**\n   * A queue for any events that Tealium iQ processes with IMPLICIT consent (to allow those events to be re-processed for new Services in the event of an EXPLICIT consent choice by the user).\n   *\n   * Each element in the queue is a [QueuedEvent]{@link QueuedEvent}\n   * @name implicitEventQueue\n   * @type {array}\n   * @memberof! tealiumCmpIntegration\n   */\n  window.tealiumCmpIntegration.implicitEventQueue = window.tealiumCmpIntegration.implicitEventQueue || []\n\n  /**\n   * A queue for any events that are triggered before Tealium iQ AND Usercentrics have both loaded.\n   *\n   * Each element in the queue is a [QueuedEvent]{@link QueuedEvent}\n   * @name earlyEventQueue\n   * @type {array}\n   * @memberof! tealiumCmpIntegration\n   */\n  window.tealiumCmpIntegration.earlyEventQueue = window.tealiumCmpIntegration.earlyEventQueue || []\n\n  /**\n   * Allows us to make sure we don't log certain messages more than once, especially useful while polling to avoid overwhelming the user.\n   * @function messageNotLoggedYet\n   * @param {*} messageId a string or number to uniquely identify a message for the purposes of deduplication\n   * @returns {boolean} 'true' if the message hasn't been logged yet (and should be logged), otherwise 'false'\n   */\n  var alreadyLoggedMessageIds = {}\n  function messageNotLoggedYet (messageId) {\n    var output = false\n    if (typeof alreadyLoggedMessageIds[messageId] === 'undefined') {\n      alreadyLoggedMessageIds[messageId] = true\n      output = true\n    }\n    return output\n  }\n\n  // if noload is set to 'true', don't interfere, just return to exit this function and allow that setting to stop TiQ load as usual.\n  if (window.utag_cfg_ovrd &amp;&amp; window.utag_cfg_ovrd.noload === true) return false\n\n  logger('CMP integration active - Usercentrics/TiQ' + (tiqInDebugMode ? &quot;\\n\\nDEBUGGING TIP: Use /SENDING|\\\\*\\\\*\\\\*\\\\*/ in the browser console as the 'filter' to show only CMP and tag send notifications.&quot; : '\\n\\nActivate TiQ Debug Mode for more details: https://docs.tealium.com/platforms/javascript/debugging/'), true)\n  var cmpResponse = cmpConsentCheck()\n  // core business/GDPR logic, decides if TiQ should load at all\n  reactToCmpResponse(cmpResponse)\n\n  /**\n   * The core CMP integration logic, which decides if Tealium iQ should be allowed to run, or if it needs to be stopped\n   * until an understandable response that includes permission for Tealium iQ to run is found.\n   *\n   * @function reactToCmpResponse\n   * @param {object} cmpResponse The response from the Usercentrics Vanilla App\n   */\n  function reactToCmpResponse (cmpResponse) {\n    var usercentricsFound = typeof cmpResponse === 'object'\n    var foundWellFormedConsentDecision = checkForWellFormedDecision(cmpResponse)\n    var tagBasedMap = generateTagBasedMap()\n    var foundMapEntryForActiveSetting = Object.keys(tagBasedMap).length &gt; 0\n    var foundExplicitConsent = checkForExplicitConsentDecision(cmpResponse)\n    var tiqIsAllowedToFire = checkForTiqConsent(cmpResponse)\n    var tiqIsLoaded = window.utag &amp;&amp; window.utag.handler &amp;&amp; window.utag.handler.iflag === 1\n\n    if (!usercentricsFound) {\n      /**\n       * CASE A1: no Usercentrics CMS found\n       *\n       * STOP and fire nothing at all\n       * RETRY after a delay\n       */\n      if (messageNotLoggedYet(1)) logger('No Usercentrics CMP found on page.\\n\\nStopping TiQ (no cookies set/removed, no tags fired).\\n\\nPolling for changes.')\n      window.setTimeout(recheckForCmpAndConsent, consentTimeoutInterval)\n      stopTiq()\n    } else if (!foundMapEntryForActiveSetting) {\n      /**\n        * CASE A7: No map found for the current settingsId\n        *\n        * STOP and fire nothing at all. Do not retry.\n        */\n      if (messageNotLoggedYet(2)) logger('No map found for current Usercentrics Setting ID.\\n\\nStopping TiQ (no cookies set/removed, no tags fired).\\n\\nNo retries.')\n      stopTiq()\n    } else if (!foundWellFormedConsentDecision) {\n      /**\n       * CASE A2: Usercentrics CMS found but consent response wasn't well-formed/complete/understandable\n       *\n       * STOP and fire nothing at all\n       * RETRY after a delay\n       */\n      if (messageNotLoggedYet(3)) logger('Found Usercentrics CMP and got response, but didn\\'t understand the response.\\n\\nStopping TiQ (no cookies set/removed, no tags fired).\\n\\nPolling for changes.')\n      window.setTimeout(recheckForCmpAndConsent, consentTimeoutInterval)\n      stopTiq()\n    } else if (!tiqIsAllowedToFire) {\n      /**\n       * CASE A3: Usercentrics CMS found and consent response was well-formed, BUT TiQ didn't have an opt-in\n       *\n       * STOP and fire nothing at all\n       * RETRY after a delay\n       */\n      if (messageNotLoggedYet(4)) logger('Found Usercentrics CMP and got well-formed response, but TiQ isn\\'t allowed to run based on the response.\\n\\nStopping TiQ (no cookies set/removed, no tags fired).\\n\\nPolling for changes.')\n      window.setTimeout(recheckForCmpAndConsent, consentTimeoutInterval)\n      stopTiq()\n    } else if (!foundExplicitConsent) {\n      /**\n       * CASE A4: Usercentrics CMS found AND response was understandable (AND includes an implicit TiQ consent), BUT the user hasn't made an explicit decision yet\n       *\n       * ALLOW TO LOAD for any 'default opt-in' tags (filter logic in Extension B)\n       * RETRY after a delay (in case there's an explicit decision, since implicit decisions usually mean the prompt is displayed)\n       */\n      if (messageNotLoggedYet(5)) logger('Found Usercentrics CMP and got well-formed IMPLICIT response which includes TiQ.\\n\\nAllowing certain tags to fire based on IMPLICIT consent.\\n\\nPolling for changes.')\n      window.setTimeout(recheckForCmpAndConsent, consentTimeoutInterval)\n      if (tiqIsLoaded) {\n        processEarlyQueue()\n      } else {\n        window.setTimeout(recheckForCmpAndConsent, consentTimeoutInterval)\n      }\n      triggerOrQueue()\n    } else if (foundExplicitConsent) {\n      /**\n       * CASE A5: Usercentrics CMS found AND response was understandable, AND the user has made an explicit consent decision AND TiQ is allowed\n       *\n       * ALLOW TO LOAD for any opted-in tags (filter logic in Extension B), do not retry.\n       */\n      if (messageNotLoggedYet(6)) logger('Found Usercentrics CMP and got well-formed EXPLICIT response which includes TiQ.\\n\\nAllowing certain tags to fire based on EXPLICIT consent.\\n\\nNo further polling.')\n      // only call if we've been polling (on initial load, it will load automatically)\n      if (tiqIsLoaded) {\n        processEarlyQueue()\n        processImplicitQueue()\n      } else {\n        window.setTimeout(recheckForCmpAndConsent, consentTimeoutInterval)\n      }\n      triggerOrQueue()\n    } else {\n      /**\n        * CASE A6: Something went wrong with this extension.\n        *\n        * STOP and fire nothing at all. Do not retry.\n        */\n      if (messageNotLoggedYet(7)) logger('Something unexpected went wrong.\\n\\nStopping TiQ (no cookies set/removed, no tags fired).\\n\\nNo retries.')\n      stopTiq()\n    }\n  }\n\n  /**\n   * Override utag.loader.initdata and utag.handler.trigger to allow Tealium iQ Tags to be blocked if the user hasn't consented.\n   *\n   * @function overrideUtagFunctions\n   * @returns {boolean} 'true' if the function was overridden successfully by this request, 'false' if not (because it was already overridden)\n   */\n  function overrideUtagFunctions () {\n    // don't override more than once, assume that if one function has been overridden, both have\n    if (window.utag.handler.trigger.toString().indexOf('tealiumCmpIntegration') !== -1) {\n      return true\n    }\n\n    // the initial view is handled differently than subsequent events\n    // this is safe to to override even if noview is set (because it will never be called in that case)\n    window.utag.loader.initdata_old = window.utag.loader.initdata\n    window.utag.loader.initdata = newUtagLoaderInitdata\n\n    window.utag.handler.trigger_old = window.utag.handler.trigger\n    window.utag.handler.trigger = newUtagHandlerTrigger\n    logger('Overrode utag functions!')\n\n    if (window.utag.handler.trigger.toString().indexOf('tealiumCmpIntegration') !== -1) {\n      return true\n    }\n\n    return false\n  }\n\n  /**\n   * An overridden version of the Tealium iQ function utag.loader.initdata.\n   *\n   * Calls the original function, respects possible noview settings, rechecks the user consent, and calls queueEventWithoutFiringImplicitServices\n   * if only an IMPLICIT consent is found (after recording the IMPLICIT services, to avoid double-firing).\n   *\n   * That same event can then be re-processed for any new Services if an EXPLICIT consent decision later made.\n   *\n   * @function newUtagLoaderInitdata\n   */\n  function newUtagLoaderInitdata () {\n    window.utag.loader.initdata_old()\n    // make sure we don't queue this initial page load twice, and respect the configured noview setting\n    if (!window.tealiumCmpIntegration.isNoviewSet &amp;&amp; !window.tealiumCmpIntegration.alreadyFiredInitialViewEvent) {\n      window.tealiumCmpIntegration.alreadyFiredInitialViewEvent = true\n      var consentedServices = getCurrentConsentDecision()\n      if (consentedServices.type === 'implicit') {\n        window.tealiumCmpIntegration.implicitServices = consentedServices\n        // we don't need to fire implicit services in this case, because TiQ's loading process will fire them\n        queueEventWithoutFiringImplicitServices({\n          event: 'view',\n          data: window.utag.handler.C(window.utag.data)\n        })\n      }\n    }\n  }\n\n  /**\n   * Refresh [tealiumCmpIntegration.tagBasedMap]{@link tealiumCmpIntegration.tagBasedMap} and return that new map, helps smooth out any timing issues between Usercentrics and Tealium iQ load.\n   *\n   * @function generateTagBasedMap\n   * @returns a [TagToServiceMap]{@link TagToServiceMap}\n   */\n  function generateTagBasedMap () {\n    var tagBasedMap = getTagBasedMap(map)\n    window.tealiumCmpIntegration.tagBasedMap = tagBasedMap\n    return tagBasedMap\n  }\n\n  /**\n   * Tealium iQ's utag.handler.trigger normally causes tags to fire. For this integration, we override that function to support blocking tags without consent.\n   *\n   * @function newUtagHandlerTrigger\n   *\n   * @param {*} a can be an object or a string\n   * @param {*} b\n   * @param {*} c\n   */\n  function newUtagHandlerTrigger (a, b, c) {\n    /**\n     * Trigger CASES (utag.handler.trigger override)\n     *\n     * We need to queue the events if we only have implicit consent, to allow a selective retrigger if/when we get an explicit decision.\n     */\n    var isPureConsentEvent = (a === nameOfConsentPollingEvent &amp;&amp; !b &amp;&amp; !c)\n    var isNoviewSet = window.tealiumCmpIntegration.isNoviewSet || true // assume noview if something went wrong with the global, to avoid firing tracking in error\n\n    var consentedServices = getCurrentConsentDecision()\n    var consentType = (consentedServices &amp;&amp; consentedServices.type) || 'none'\n\n    var isUsercentricsReady = consentType === 'implicit' || consentType === 'explicit'\n    var isTealiumReady = window.utag &amp;&amp; window.utag.handler &amp;&amp; window.utag.handler.iflag === 1\n\n    if (!isPureConsentEvent) {\n      logger('utag.handler.trigger called with:\\n\\n' + JSON.stringify(arguments, null, 2))\n    }\n\n    if (!isUsercentricsReady &amp;&amp; !isTealiumReady) {\n      consentedServices.type = 'tealium-and-usercentrics-loading'\n      logger('Waiting for Usercentrics and Tealium to be ready, queueing early event.')\n      queueEarlyEvent(a, b, c)\n      return false\n    } else if (!isUsercentricsReady) {\n      consentedServices.type = 'usercentrics-loading'\n      logger('Usercentrics is still loading, queueing early event')\n      queueEarlyEvent(a, b, c)\n      return false\n    } else if (!isTealiumReady) {\n      consentedServices.type = 'tealium-still-loading'\n      logger('Tealium iQ is still loading, queueing early event')\n      queueEarlyEvent(a, b, c)\n      return false\n    }\n\n    // if an array of tagUids is passed, that forces them to fire regardless of load rules\n    // or consent, so we need to filter that array before allowing it to be processed\n    var hasTagUidArray = c &amp;&amp; typeof c === 'object' &amp;&amp; c.uids &amp;&amp; c.uids &amp;&amp; window.utag.ut.typeOf(c.uids) === 'array'\n    var uidMap = generateTagBasedMap()\n    var allowedTagUids = []\n    var blockedTagUids = []\n    var serviceName\n    var tagUid\n    if (hasTagUidArray) {\n      for (var i = 0; i &lt; c.uids.length; i++) {\n        tagUid = c.uids[i]\n        serviceName = uidMap[tagUid] || '(missing)'\n        // only push consented services into the new array\n        if (consentedServices.indexOf(serviceName) !== -1) {\n          allowedTagUids.push(tagUid)\n        } else {\n          blockedTagUids.push(tagUid)\n        }\n      }\n      // replace the original with the filtered array (can also be empty, if none of them were allowed)\n      logger('Call included tagUid array:\\n\\n' + JSON.stringify(c.uids) + '\\n\\nwhich was replaced by the filtered version:\\n\\n' + JSON.stringify(allowedTagUids))\n      c.originalUids = c.uids.slice() // make a shallow copy\n      c.uids = allowedTagUids\n      c.blockedTagUids = blockedTagUids\n    }\n\n    if (consentType === 'explicit') {\n      /**\n       * CASE T2: expected globals are populated, consent is EXPLICIT\n       *\n       * FIRE allowed tags (explicit)\n       * utag.handler.trigger override PROCESSES the queue, which will include any queued events from CASE A4, making sure not to re-fire any default\n       *   opt-in tags that were already fired for the queued events\n       */\n      // make sure TiQ loads\n      processEarlyQueue()\n      processImplicitQueue()\n      triggerTiqLoad()\n      // fire the current event if it's not just a polling event\n      if (!isPureConsentEvent) {\n        return window.utag.handler.trigger_old(a, b, c)\n      }\n    } else if (consentType === 'implicit') {\n      /**\n       * CASE T3: expected globals are populated, consent is IMPLICIT\n       *\n       * FIRE allowed tags (implicit)\n       * utag.handler.trigger override KEEPS a queue/record that includes\n       *  - the event(s) that were processed based on implicit consent\n       *  - which tags were allowed to process each event (are set to implicit opt-in)\n       */\n      processEarlyQueue()\n      // fire the initial view if appropriate, and queue it\n      triggerTiqLoad()\n      window.tealiumCmpIntegration.implicitServices = consentedServices\n\n      // queue the initial 'view' on pageload if appropriate\n      if (!isNoviewSet &amp;&amp; isTealiumReady &amp;&amp; !window.tealiumCmpIntegration.alreadyFiredInitialViewEvent) {\n        window.tealiumCmpIntegration.alreadyFiredInitialViewEvent = true\n        queueEventAndFireImplicitServices('view', window.utag.handler.C(window.utag.data))\n      }\n      // queue the current event if it exists (and this isn't just consent polling)\n      if (!isPureConsentEvent) {\n        return queueEventAndFireImplicitServices(a, b, c)\n      }\n    } else if (consentType === 'missing-map') {\n      logger('Something went wrong - all tags were blocked because no consent map was found for the active setting ID.')\n      return false\n    } else if (consentType === 'missing-tiq-consent') {\n      logger('Something went wrong - all tags were blocked because no consent was found for &quot;' + tiqServiceName + '&quot;, configured Tealium iQ name.\\n\\nConsent found: ' + JSON.stringify(consentedServices, null, 2))\n      return false\n    } else {\n      /**\n       * CASE T1: expected variables not populated (misconfiguration/error case)\n       *\n       * STOP and fire nothing at all. Do not retry or queue the event.\n       */\n      logger('Something went wrong - all tags were blocked because the consent response was not understood.')\n      return false\n    }\n  }\n\n  /**\n   * Process any queued tracking events from [the early event queue]{@link tealiumCmpIntegration.earlyEventQueue} (can include pageviews) for any currently-consented Services.\n   *\n   * Intended to be called first understandable implicit consent.\n   *\n   * @function processEarlyQueue\n   */\n  function processEarlyQueue () {\n    var queuedEvent\n    window.tealiumCmpIntegration.earlyEventQueue = window.tealiumCmpIntegration.earlyEventQueue || []\n    while (window.tealiumCmpIntegration.earlyEventQueue.length &gt; 0) {\n      // process past events\n      queuedEvent = window.tealiumCmpIntegration.earlyEventQueue.shift()\n      logger('Processing queued early event for currently consented tags: ' + JSON.stringify(queuedEvent, null, 2))\n      window.utag.track(queuedEvent)\n    }\n  }\n\n  /**\n   * Process any queued tracking events from [the global queue]{@link tealiumCmpIntegration.implicitEventQueue} (can include pageviews) for any newly-consented Services.\n   *\n   * Intended to be called on new EXPLICIT consent decision - queued events have already had IMPLICTLY consented tags fired, so those need to be excluded.\n   *\n   * @function processImplicitQueue\n   */\n  function processImplicitQueue () {\n    var alreadyLogged = false\n    var queuedEvent\n    window.tealiumCmpIntegration.implicitEventQueue = window.tealiumCmpIntegration.implicitEventQueue || []\n    while (window.tealiumCmpIntegration.implicitEventQueue.length &gt; 0) {\n      if (!alreadyLogged) {\n        alreadyLogged = true\n        logger('Explicit consent tracking request received - processing past implicitly tracked events (' + window.tealiumCmpIntegration.implicitEventQueue.length + ') for any new explicit tags.')\n      }\n      // process past events\n      queuedEvent = window.tealiumCmpIntegration.implicitEventQueue.shift()\n      logger('Triggering event for explicitly-consented tags: ' + JSON.stringify(queuedEvent))\n      window.utag.track(queuedEvent)\n    }\n  }\n\n  /**\n   * Queue a [tracking event]{@link QueuedEvent} in [the early queue]{@link tealiumCmpIntegration.earlyEventQueue}, without firing any tags.\n   *\n   * Intended to be called for events that triggered before we get an understandable response from Usercentrics.\n   *\n   * @function queueEarlyEvent\n   * @param {*} a the 'a' argument from utag.handler.trigger\n   * @param {*} b the 'b' argument from utag.handler.trigger\n   * @param {*} c the 'c' argument from utag.handler.trigger\n   *\n   */\n  function queueEarlyEvent (a, b, c) {\n    a = a || {}\n\n    // make a copy, in case shared objects are used (like utag_data, or a similar global) - snapshot those\n    if (typeof b === 'object') {\n      b = JSON.parse(JSON.stringify(b))\n    }\n    // convert to a more standard format\n    if (typeof a === 'string') {\n      a = { event: a, data: b || {}, cfg: c }\n    }\n\n    // if there's a tagUid array, don't queue the already-fired tags - instead, swap that with any blocked tags\n    if (a &amp;&amp; a.cfg &amp;&amp; window.utag.ut.typeOf(a.cfg.uids) === 'array') {\n      a.cfg.uids = a.cfg.blockedTagUids.slice()\n    }\n\n    // nothing will be allowed to fire\n    a.data[nameOfImplicitConsentArray] = []\n\n    window.tealiumCmpIntegration.earlyEventQueue = window.tealiumCmpIntegration.earlyEventQueue || []\n    window.tealiumCmpIntegration.earlyEventQueue.push(a)\n    logger('Queued early event!')\n  }\n\n  /**\n   * Queue a [tracking event]{@link QueuedEvent} in [the global queue]{@link tealiumCmpIntegration.implicitEventQueue}, without firing any implictly consented Services.\n   *\n   * Intended to be called for the initial pageview on load, since the load process will have already fired the implicit services.\n   *\n   * @function queueEventWithoutFiringImplicitServices\n   * @param {*} a the 'a' argument from utag.handler.trigger\n   * @param {*} b the 'b' argument from utag.handler.trigger\n   * @param {*} c the 'c' argument from utag.handler.trigger\n   *\n   */\n  function queueEventWithoutFiringImplicitServices (a, b, c) {\n    a = a || {}\n\n    // make a copy, in case shared objects are used (like utag_data, or a similar global) - snapshot those\n    if (typeof b === 'object') {\n      b = JSON.parse(JSON.stringify(b))\n    }\n    // convert to a more standard format\n    if (typeof a === 'string') {\n      a = { event: a, data: b || {}, cfg: c }\n    }\n\n    // if there's a tagUid array, don't queue the already-fired tags - instead, swap that with any blocked tags\n    if (a &amp;&amp; a.cfg &amp;&amp; window.utag.ut.typeOf(a.cfg.uids) === 'array') {\n      a.cfg.uids = a.cfg.blockedTagUids.slice()\n    }\n\n    a.data[nameOfImplicitConsentArray] = window.tealiumCmpIntegration.implicitServices || []\n\n    window.tealiumCmpIntegration.implicitEventQueue = window.tealiumCmpIntegration.implicitEventQueue || []\n    window.tealiumCmpIntegration.implicitEventQueue.push(a)\n  }\n\n  /**\n   * Queue a [tracking event]{@link QueuedEvent} in [the global queue]{@link tealiumCmpIntegration~implicitEventQueue}, without firing any implictly consented Services.\n   *\n   * Intended to be called for all events other than the initial page load.\n   *\n   * @function queueEventAndFireImplicitServices\n   * @param {*} a the 'a' argument from utag.handler.trigger\n   * @param {*} b the 'b' argument from utag.handler.trigger\n   * @param {*} c the 'c' argument from utag.handler.trigger\n   *\n   */\n  function queueEventAndFireImplicitServices (a, b, c) {\n    // fire the implicit tags\n    window.utag.handler.trigger_old(a, b, c)\n    logger('Implicit consent tracking request fired (or queued, if utag hasn\\'t loaded).')\n    return queueEventWithoutFiringImplicitServices(a, b, c)\n  }\n\n  /**\n   * Generate a {@link TagToServiceMap TagToServiceMap} based on a {@link ServiceToTagMap ServiceToTagMap}\n   *\n   * @function getTagBasedMap\n   * @param {object} map a {@link ServiceToTagMap ServiceToTagMap} object\n   * @return {object} a {@link TagToServiceMap TagToServiceMap}\n   */\n  function getTagBasedMap (map) {\n    // generate a lookup based on the tagUid\n    if (typeof map !== 'object') return {}\n    var settingsId = getCurrentUsercentricsSettingsId() || ''\n    if (typeof settingsId !== 'string' || settingsId === '') return {}\n    var settingSpecificMap = map[settingsId] || {}\n    var serviceNames = Object.keys(settingSpecificMap)\n    var uidMap = {}\n    for (var i = 0; i &lt; serviceNames.length; i++) {\n      for (var j = 0; j &lt; settingSpecificMap[serviceNames[i]].length; j++) {\n        uidMap[settingSpecificMap[serviceNames[i]][j]] = serviceNames[i]\n      }\n    }\n    return uidMap\n  }\n\n  /**\n   * Get the current Usercentrics settingsId from the page.\n   *\n   * @returns {string} the Usercentrics settingsId, defaults to an empty string if none is found\n   */\n  function getCurrentUsercentricsSettingsId () {\n    return (window.usercentrics &amp;&amp; window.usercentrics.settingsId) || ''\n  }\n\n  /**\n   * Trigger the core logic with an up-to-date array of objects returned by calling [usercentrics.getConsents]{@link https://docs.usercentrics.com/#/?id=getconsents}\n   * @function recheckForCmpAndConsent\n   */\n  function recheckForCmpAndConsent () {\n    var newConsentResponse = cmpConsentCheck()\n    reactToCmpResponse(newConsentResponse)\n  }\n\n  /**\n   * Call [usercentrics.getConsents]{@link https://docs.usercentrics.com/#/?id=getconsents} to get the current consent decision.\n   * @function cmpConsentCheck\n   */\n  function cmpConsentCheck () {\n    if (!window.usercentrics || typeof window.usercentrics.getConsents !== 'function') return false\n    var cmpConsentArray = window.usercentrics.getConsents()\n    return cmpConsentArray\n  }\n\n  /**\n   * Indicates if Usercentrics has loaded and returned a well-formed indication of user consent.\n   * @function checkForWellFormedDecision\n   * @param cmpConsentArray the array of objects returned by [usercentrics.getConsents]{@link https://docs.usercentrics.com/#/?id=getconsents}.\n   * @returns {boolean} 'true' if the consent decision is well-formed, otherwise 'false'\n   */\n  function checkForWellFormedDecision (cmpConsentArray) {\n    // treat things we don't understand as an opt-out\n    if (toString.call(cmpConsentArray) !== '[object Array]') return false\n    // use the first entry as a proxy for all\n    if (cmpConsentArray &amp;&amp; cmpConsentArray[0] &amp;&amp; typeof cmpConsentArray[0].dataProcessingService === 'string') {\n      return true\n    }\n    return false\n  }\n\n  /**\n   * Indicates if the user has made an EXPLICIT decision\n   * @function checkForExplicitConsentDecision\n   * @param cmpConsentArray the array of objects returned by [usercentrics.getConsents]{@link https://docs.usercentrics.com/#/?id=getconsents}.\n   * @returns {boolean} 'true' if the consent decision is EXPLICIT otherwise 'false'\n   */\n  function checkForExplicitConsentDecision (cmpConsentArray) {\n    // treat things we don't understand as an opt-out\n    if (toString.call(cmpConsentArray) !== '[object Array]') return false\n    // use the first entry as a proxy for all\n    if (cmpConsentArray &amp;&amp; cmpConsentArray[0] &amp;&amp; cmpConsentArray[0].updatedBy === 'explicit') {\n      return true\n    }\n    return false\n  }\n\n  /**\n   * Indicates if Tealium iQ has permission to run (and fire tags).\n   * @function checkForTiqConsent\n   * @param cmpConsentArray the array of objects returned by [usercentrics.getConsents]{@link https://docs.usercentrics.com/#/?id=getconsents}.\n   * @returns {boolean} 'true' if TiQ is allowed to run, otherwise 'false'\n   */\n  function checkForTiqConsent (cmpConsentArray) {\n    var foundOptIn = false\n    // treat things we don't understand as an opt-out\n    if (toString.call(cmpConsentArray) !== '[object Array]') return false\n    // check vendors if there's an object, look for at least one\n    cmpConsentArray.forEach(function (tagInfo) {\n      if (tagInfo.consentStatus === true &amp;&amp; tagInfo.dataProcessingService === tiqServiceName) {\n        foundOptIn = true\n      }\n    })\n    return foundOptIn\n  }\n\n  /**\n   * Create an instance of\n   * @param {array} cmpConsentArray the array of objects returned by calling [usercentrics.getConsents]{@link https://docs.usercentrics.com/#/?id=getconsents}\n   */\n  function getVendorConsentsFromCmpConsentArray (cmpConsentArray) {\n    var vendorArray = []\n\n    var isWellFormed = checkForWellFormedDecision(cmpConsentArray)\n\n    if (!isWellFormed) {\n      vendorArray.type = 'missing-well-formed-response'\n      return []\n    }\n\n    var tagBasedMap = generateTagBasedMap()\n\n    // if there is no mapping for the settings id, we need to change the console output\n    var currentSettingsIdHasMapping = (typeof tagBasedMap === 'object' &amp;&amp; Object.keys(tagBasedMap).length &gt; 0)\n\n    if (!currentSettingsIdHasMapping) {\n      vendorArray.type = 'missing-map'\n      return []\n    }\n\n    cmpConsentArray &amp;&amp; cmpConsentArray.forEach(function (tagConsent) {\n      if (tagConsent.consentStatus === true) {\n        vendorArray.push(tagConsent.dataProcessingService)\n      }\n    })\n    vendorArray.type = checkForExplicitConsentDecision(cmpConsentArray) ? 'explicit' : 'implicit'\n\n    if (checkForTiqConsent(cmpConsentArray) === false) {\n      // change the consent type, but leave the array for debugging purposes\n      vendorArray.type = 'missing-tiq-consent'\n    }\n\n    return vendorArray\n  }\n\n  /**\n   * Get the current consent decision from the CMP for the active Setting\n   * @function getCurrentConsentDecision\n   * @returns a {@link ConsentDecision ConsentDecision}\n   */\n  function getCurrentConsentDecision () {\n    var freshConsent = cmpConsentCheck()\n\n    return getVendorConsentsFromCmpConsentArray(freshConsent)\n  }\n\n  /**\n   *  A conditional logging function - we can't use utag.DB directly because some of our logic needs to be preloader, but we can mimic the same logic so that our logging only displays when TiQ is in debug mode and/or not in Prod, or is explicitly forced.\n   * @function logger\n   * @param {string} message the message to be conditionally shown\n   * @param {boolean} showOutsideDebugMode if 'true', forces the message to shown outside of debug mode, except on Prod\n   */\n  function logger (message, showOutsideDebugMode) {\n    if (typeof tealiumEnvironment === 'undefined' || tealiumEnvironment === 'prod') {\n      // don't allow anything outside of debug mode on prod (disable this flag)\n      showOutsideDebugMode = false\n    }\n\n    if (showOutsideDebugMode || tiqInDebugMode) {\n      message = '\\n' + message + '\\n'\n      var formattedArr = []\n      formattedArr.push('****************')\n      var messageArr = message.split('\\n')\n      messageArr.forEach(function (messageLine) {\n        formattedArr.push('*  ' + messageLine)\n      })\n      formattedArr.push('****************')\n      var outputString = formattedArr.join('\\n')\n      console.log(outputString)\n    }\n  }\n\n  /**\n   * Stops Tealium iQ from loading (the TMS will not load tags or set a cookie if this function is called in Pre Loader), using the {@link https://docs.tealium.com/platforms/javascript/settings/#noload noload} setting\n   * @function stopTiq\n   */\n  function stopTiq () {\n    // logger(&quot;stopTiq function fired&quot;)\n    window.utag_cfg_ovrd = window.utag_cfg_ovrd || {}\n    window.utag_cfg_ovrd.noload = true\n  }\n\n  /**\n   * Allows TiQ to finish loading, intended to be called when a well-formed consent response is received, and that response allows Tealium iQ to run.\n   *\n   * Works by setting {@link https://docs.tealium.com/platforms/javascript/settings/#noload noload} to 'false' and calling Tealium iQ's utag.loader.PINIT method.\n   *\n   * If noload was 'true' and this function runs it must've been set to true by our own {@link module:extension-1~stopTiq stopTiq} function, because otherwise Tealium iQ wouldn't have been allowed to load/poll in the first place.\n   * @function triggerTiqLoad\n   * @returns {boolean} 'true' if Tealium iQ was successfully triggered, 'false' if it wasn't triggered because it's already initiated\n   */\n  function triggerTiqLoad () {\n    // if usercentrics is ready on the first request, TiQ won't have loaded yet at all - let it load naturally\n    if (!window.utag) {\n      return true\n    }\n    // if TiQ has already loaded but these flags aren't truthy, we've interrupted the load and should retrigger it\n    // initial load / view (noview logic handled in utag.handler.trigger function itself)\n    if (!window.utag.handler || !window.utag.handler.iflag) {\n      // we don't need to reload actually, just allow it to finish loading\n      window.utag.cfg.noload = false // safe because this code only runs if it was set to false originally\n      window.utag.loader.PINIT()\n      return true\n    }\n    // already loaded\n    return false\n  }\n\n  /**\n   * If Tealium iQ hasn't loaded, load it (calling utag.handler.trigger in the process), otherwise call utag.handler.trigger.\n   * @function triggerOrQueue\n   */\n  function triggerOrQueue () {\n    var successfullyTriggeredLoadIfNeeded = triggerTiqLoad()\n    if (!successfullyTriggeredLoadIfNeeded) {\n      // explicit consent from polling, but load has already been triggered\n      return window.utag.handler.trigger(nameOfConsentPollingEvent)\n    }\n  }\n  /**\n   * Get the the current Tealium iQ environment.\n   *\n   * Since this runs in Pre Loader, it needs to use regex to recognize the utag.js file in the DOM and read the environment from the file name (there are no utag functions or objects at this point in the load).\n   *\n   * NOTE: This doesn't work correctly when using the the Environment Switcher (because the original script is added to the DOM instead of the new one, and the 307 redirect that's used to pull the new file(s) only changes the response, not the script element itself).\n   *\n   * If you're using the Environment Switcher on Prod and would like to see console output, set the [debug cookie]{@link https://docs.tealium.com/platforms/javascript/debugging/}.\n   *\n   * @function getTealiumEnvironment\n   * @returns {boolean} 'true' if Tealium iQ was successfully triggered, 'false' if it wasn't triggered because it's already initiated\n   */\n  function getTealiumEnvironment () {\n    var allScripts = document.getElementsByTagName('script')\n    var re = /\\/([^/]*)\\/utag\\.js(\\?.*)*$/\n    for (var i = 0; i &lt; allScripts.length; i++) {\n      var result = re.exec(allScripts[i].src) // can be null\n      if (result &amp;&amp; result[1]) { // [1] is the result of the match\n        return result[1]\n      }\n    }\n    return 'prod' // default to guessing we're in prod, just in case we're actually in prod (to avoid logging in Prod)\n  }\n})()\n\n// Document key data structures here for clarity.\n\n/**\n * An array of Usercentrics Service Names that have permission to run (uses the 'dataProcessingService' property from [usercentrics.getConsents]{@link https://docs.usercentrics.com/#/?id=getconsents}).\n *\n * Also includes a 'type' property that indicates whether the consent decision is IMPLICIT or EXPLICT.\n *\n * @static\n * @type {array}\n * @name ConsentDecision\n * @memberof! &lt;global&gt;\n * @property {string} type the type of consent, will be either 'implicit' or 'explicit'\n * @example\nvar exampleConsentDecision = window.tealiumCmpIntegration.getCurrentConsentDecision()\n\nJSON.stringify(exampleConsentDecision)\n// [&quot;Google Analytics&quot;,&quot;Another Tag&quot;,&quot;Tealium iQ Tag Management&quot;]\n\nexampleConsentDecision.type\n// &quot;explicit&quot;\n\nexampleConsentDecision.length\n// 3\n */\n\n/**\n * Assigns Tealium iQ Tags to Usercentrics Service Names. Each service can have multiple tags, but each tag can only have one service.  If the same tag UID appears in multiple Service arrays, only one will be used.\n *\n * The keys for the main object are Setting-IDs from Usercentrics, inside that are key/value pairs where the key is a Service Name from Usercentrics, and the value is an array of TagUIDs from Tealium iQ.\n *\n * This needs to be provided as per the example below, in [tealiumCmpIntegration.map]{@link namespace:tealiumCmpIntegration~map}.\n *\n * An [example Tealium iQ extension]{@link module:example-map} is provided as well.\n *\n * @static\n * @type {object}\n * @name ServiceToTagMap\n * @memberof! &lt;global&gt;\n * @example\nwindow.tealiumCmpIntegration = window.tealiumCmpIntegration || {}\nwindow.tealiumCmpIntegration.map = {\n  'yPyIAIIxY': {\n    'Google Analytics': [6, 8, 10],\n    'Mouseflow': [7, 9],\n    'Another Tag': [11]\n  }\n}\n */\n\n/**\n * A simple lookup, with Tealium iQ tag UIDs as keys and the associated Usercentrics service name as strings as values. Each service can be associated with multiple tags, but each tag can be associated with one service.\n *\n * The example is based on the {@link ServiceToTagMap ServiceToTagMap} example, where the Usercentrics settingsId on the active page is 'yPyIAIIxY'.\n *\n * This object is automatically generated by the [getTagBasedMap]{@link module:extension-1~getTagbasedMap} method, and made available globally in [tealiumCmpIntegration.tagBasedMap]{@link tealiumCmpIntegration~tagBasedMap} for debugging and use within the extensions.\n *\n * @static\n * @type {object}\n * @name TagToServiceMap\n * @memberof! &lt;global&gt;\n * @example\n{\n  6: 'Google Analytics',\n  7: 'Mouseflow',\n  8: 'Google Analytics',\n  9: 'Mouseflow',\n  10: 'Google Analytics',\n  11: 'Another Tag'\n}\n */\n\n/**\n * An object from the [implicitEventQueue]{@link tealiumCmpIntegration.implicitEventQueue} or [earlyEventQueue]{@link tealiumCmpIntegration.earlyEventQueue}, which represents a Tealium iQ tracking event that's been processed based on an IMPLICIT [ConsentDecision]{@link ConsentDecision}\n *\n * Heavily based on the argument passed to [utag.track]{@link https://community.tealiumiq.com/t5/Tealium-iQ-Tag-Management/utag-track-method/td-p/24578}, since it's designed to be processed by that method.\n *\n * Initial pageviews (handled in the [utag.loader.initdata override]{@link module:extension-1~newUtagLoaderInitdata}) will NOT have metadata like cookies, qps, etc - utag.track calls (handled in the [utag.handler.trigger override]{@link module:extension-1~newUtagHandlerTrigger}) will. That's a byproduct of using utag.handler.trigger, which is later in the load - those metadata will be re-read when the queue is processed, and since this queue isn't persisted between pages, it should be fine like that - the only strange behavior will be that any metadata that aren't present on re-read will still be present after the re-read - only values that are still present will be replaced with new values.\n *\n * An alternative approach could be to manually remove 'cp.\\*', 'dom.\\*', 'ut.\\*', 'qp.\\*', 'meta.\\*' and possibly 'tealium_\\*' (except 'tealium_event') from the 'data' object before queueing - that hasn't been done so far.\n *\n * @static\n * @type {array}\n * @name QueuedEvent\n * @memberof! &lt;global&gt;\n * @property {string} event the type of tracking event, generally 'view' for pageviews or 'link' for other events\n * @property {object} data the Universal Data Object associated with the event (from utag_data or the b object)\n * @property {object} cfg an optional configuration object that can have a 'cb' property (for a callback function) and a 'uids' array, which is a list of tag UIDs that should be triggered by the event, regardless of whether load rules are met.\n * @example\n{\n  &quot;event&quot;: &quot;view&quot;,\n  &quot;data&quot;: {\n    &quot;page_type&quot;: &quot;test_virtual_view&quot;,\n    &quot;cp.utag_main_v_id&quot;: &quot;0174492849d50013581219634d6103079004907101274&quot;,\n    &quot;cp.utag_main__sn&quot;: &quot;4&quot;,\n    &quot;cp.utag_main__se&quot;: &quot;4&quot;,\n    &quot;cp.utag_main__ss&quot;: &quot;0&quot;,\n    &quot;cp.utag_main__st&quot;: &quot;1598990152209&quot;,\n    &quot;cp.utag_main_ses_id&quot;: &quot;1598988112353&quot;,\n    &quot;cp.utag_main__pn&quot;: &quot;3&quot;,\n    &quot;cp.utagdb&quot;: &quot;true&quot;,\n    &quot;dom.referrer&quot;: &quot;&quot;,\n    &quot;dom.title&quot;: &quot;Usercentrics Test&quot;,\n    &quot;dom.domain&quot;: &quot;solutions.tealium.net&quot;,\n    &quot;dom.query_string&quot;: &quot;&quot;,\n    &quot;dom.hash&quot;: &quot;&quot;,\n    &quot;dom.url&quot;: &quot;https://solutions.tealium.net/hosted/usercentrics/test-page-standard.html&quot;,\n    &quot;dom.pathname&quot;: &quot;/hosted/usercentrics/test-page-standard.html&quot;,\n    &quot;dom.viewport_height&quot;: 456,\n    &quot;dom.viewport_width&quot;: 1825,\n    &quot;ut.domain&quot;: &quot;tealium.net&quot;,\n    &quot;ut.version&quot;: &quot;ut4.46.202009011921&quot;,\n    &quot;ut.event&quot;: &quot;view&quot;,\n    &quot;ut.visitor_id&quot;: &quot;0174492849d50013581219634d6103079004907101274&quot;,\n    &quot;ut.session_id&quot;: &quot;1598988112353&quot;,\n    &quot;ut.account&quot;: &quot;services-caleb&quot;,\n    &quot;ut.profile&quot;: &quot;usercentrics-by-tag&quot;,\n    &quot;ut.env&quot;: &quot;prod&quot;,\n    &quot;tealium_event&quot;: &quot;view&quot;,\n    &quot;tealium_visitor_id&quot;: &quot;0174492849d50013581219634d6103079004907101274&quot;,\n    &quot;tealium_session_id&quot;: &quot;1598988112353&quot;,\n    &quot;tealium_session_number&quot;: &quot;4&quot;,\n    &quot;tealium_session_event_number&quot;: &quot;4&quot;,\n    &quot;tealium_datasource&quot;: &quot;&quot;,\n    &quot;tealium_account&quot;: &quot;services-caleb&quot;,\n    &quot;tealium_profile&quot;: &quot;usercentrics-by-tag&quot;,\n    &quot;tealium_environment&quot;: &quot;prod&quot;,\n    &quot;tealium_random&quot;: &quot;2085060854215077&quot;,\n    &quot;tealium_library_name&quot;: &quot;utag.js&quot;,\n    &quot;tealium_library_version&quot;: &quot;4.46.0&quot;,\n    &quot;tealium_timestamp_epoch&quot;: 1598988352,\n    &quot;tealium_timestamp_utc&quot;: &quot;2020-09-01T19:25:52.211Z&quot;,\n    &quot;tealium_timestamp_local&quot;: &quot;2020-09-01T21:25:52.211&quot;,\n    &quot;usercentrics_services_with_consent&quot;: [\n      &quot;Mouseflow&quot;,\n      &quot;Tealium iQ Tag Management&quot;,\n      &quot;Usercentrics Consent Management Platform&quot;\n    ],\n    &quot;usercentrics_consent_type&quot;: &quot;implicit&quot;,\n    &quot;_usercentrics_services_already_processed&quot;: [\n      &quot;Mouseflow&quot;,\n      &quot;Tealium iQ Tag Management&quot;,\n      &quot;Usercentrics Consent Management Platform&quot;\n    ]\n  },\n  &quot;cfg&quot;: {\n    &quot;cb&quot;: function myCallback () {console.log(&quot;Callback fired!&quot;)},\n    &quot;uids&quot;: [\n      11\n    ],\n    &quot;originalUids&quot;: [\n      7,\n      11\n    ],\n    &quot;blockedTagUids&quot;: [\n      11\n    ]\n  }\n}\n*/\n","name":"prod","promotedDraftName":"extension-1.js","promotedTimestamp":"202011040726","promotedBy":"caleb.jaquith@tealium.com"},"3f3ef786b34d6dd716e1812c8b74a7a0e1f05aa5f3230588f6f5bcd00c6c8392":{"promotedBy":"caleb.jaquith@tealium.com","promotedDraftName":"extension-1.js","promotedTimestamp":"202011040726","name":"qa","code":"/**\n *  Scope       : Pre Loader\n *  Condition   : n/a\n *  Description : CMP 1/2 - Preloader component - prevent TiQ from loading if no consent, queue implicitly consented events to retrigger (for new tags only) if explicit decision is made.\n */\n\n/**\n  * @module extension-1\n  *\n  * @description The 'Pre Loader' extension component of the CMP integration, responsible for stopping Tealium iQ from loading/running as appropriate, and making certain\n  * window-scoped functions available to the other components.\n  */\n\n// Tealium iQ runs Pre Loader extensions in global scope, which would make all variables global. We don't want to do that.\n(function avoidGlobalScopeUnlessExplicit () {\n  // set names for key objects and variables to make them easy to change if needed\n\n  var version = 'v0.10-beta'\n\n  // for the consent information in the b object\n  var nameOfVendorOptInArray = 'usercentrics_services_with_consent'\n  var nameOfConsentTypeString = 'usercentrics_consent_type'\n\n  // for the name in the queue\n  var nameOfImplicitConsentArray = '_usercentrics_services_already_processed'\n\n  // name to use when calling utag.handler.trigger to indicate a consent polling call\n  var nameOfConsentPollingEvent = 'tiq_usercentrics_consent_polling'\n\n  var consentTimeoutInterval = 400 // setTimeout interval in MS - rate to poll for new (explicit) consent decision or correctly formed object\n\n  // check for the Tealium Debug cookie, see https://docs.tealium.com/platforms/javascript/debugging/\n  var tiqInDebugMode = /utagdb=true/.test(document.cookie)\n  var tealiumEnvironment = getTealiumEnvironment() || 'prod' // fall back to prod (stops logging) if something goes wrong with the function\n\n  /**\n   * A window-scoped (global) object used to expose selected functionality.\n   *\n   * @namespace tealiumCmpIntegration\n   * @type {object}\n   * @memberof! &lt;global&gt;\n   */\n  window.tealiumCmpIntegration = window.tealiumCmpIntegration || {}\n\n  /**\n   * The name of the CMP (&quot;Usercentrics Vanilla App&quot; in this case).\n   * @name cmpName\n   * @type {string}\n   * @memberof! tealiumCmpIntegration\n   */\n  window.tealiumCmpIntegration.cmpName = 'Usercentrics Vanilla App'\n\n  /**\n   * A map of Usercentrics Data Processing Services to arrays of Tealium iQ tag UIDs, a {@link ServiceToTagMap ServiceToTagMap}\n   * @name map\n   * @type {object}\n   * @memberof! tealiumCmpIntegration\n   */\n  var map = window.tealiumCmpIntegration.map || {}\n\n  /**\n   * A map of Usercentrics Data Processing Services to arrays of Tealium iQ tag UIDs, a {@link TagToServiceMap TagToServiceMap}\n   * @name tagBasedMap\n   * @type {object}\n   * @memberof! tealiumCmpIntegration\n   */\n  generateTagBasedMap() // populates the window-level object for you as well\n\n  /**\n   * The Service Name for Tealium iQ in Usercentrics (used to decide if the TMS is allowed to run).  Uses the Usercentrics standard name if not provided.\n   * @name tiqServiceName\n   * @type {object}\n   * @memberof! tealiumCmpIntegration\n   * @default 'Tealium iQ Tag Management'\n   * @example\nwindow.tealiumCmpIntegration = window.tealiumCmpIntegration || {}\nwindow.tealiumCmpIntegration.tiqServiceName = &quot;Tealium iQ Tag Management&quot;\n   */\n  var tiqServiceName = window.tealiumCmpIntegration.tiqServiceName || 'Tealium iQ Tag Management' // use the standard name here if not set\n\n  /**\n   * The current version designation.\n   * @name version\n   * @type {string}\n   * @memberof! tealiumCmpIntegration\n   */\n  window.tealiumCmpIntegration.version = version\n\n  /**\n   * A [logger helper function]{@link module:extension-1~logger}, to help Tealium iQ users understand and troubleshoot this CMP integration without unneeded logging in production.\n   * @name logger\n   * @type {function}\n   * @memberof! tealiumCmpIntegration\n   */\n  window.tealiumCmpIntegration.logger = logger\n\n  /**\n   * A [helper function]{@link module:extension-1~getCurrentConsentDecision} that returns the current [ConsentDecision]{@link ConsentDecision}.\n   * @name getCurrentConsentDecision\n   * @type {function}\n   * @memberof! tealiumCmpIntegration\n   */\n  window.tealiumCmpIntegration.getCurrentConsentDecision = getCurrentConsentDecision\n\n  /**\n   * A [helper function]{@link module:extension-1~getCurrentUsercentricsSettingsId} that returns the current Usercentrics settingsId.\n   * @name getCurrentUsercentricsSettingsId\n   * @type {function}\n   * @memberof! tealiumCmpIntegration\n   */\n  window.tealiumCmpIntegration.getCurrentUsercentricsSettingsId = getCurrentUsercentricsSettingsId\n\n  /**\n   * Records the status of the [noview]{@link https://docs.tealium.com/platforms/javascript/settings/#noview} setting on page load.\n   * @name isNoviewSet\n   * @type {boolean}\n   * @memberof! tealiumCmpIntegration\n   */\n  window.tealiumCmpIntegration.isNoviewSet = window.utag_cfg_ovrd &amp;&amp; window.utag_cfg_ovrd.noview === true\n\n  /**\n   * The name to use for the [ConsentDecision]{@link ConsentDecision} array when adding it to Tealium's b object on each event.\n   * @name nameOfVendorOptInArray\n   * @type {string}\n   * @memberof! tealiumCmpIntegration\n   */\n  window.tealiumCmpIntegration.nameOfVendorOptInArray = nameOfVendorOptInArray\n\n  /**\n   * The name to use for the current [ConsentDecision]{@link ConsentDecision}'s 'type' attribute when adding it to Tealium's b object on each event.\n   * @name nameOfConsentTypeString\n   * @type {string}\n   * @memberof! tealiumCmpIntegration\n   */\n  window.tealiumCmpIntegration.nameOfConsentTypeString = nameOfConsentTypeString\n\n  /**\n   * The name to use for the array of implicit tags (which have already been fired) in the 'data' property of {@link QueuedEvent QueuedEvent} objects.\n   * @name nameOfImplicitConsentArray\n   * @type {string}\n   * @memberof! tealiumCmpIntegration\n   */\n  window.tealiumCmpIntegration.nameOfImplicitConsentArray = nameOfImplicitConsentArray\n\n  /**\n   * A [helper function]{@link module:extension-1~overrideUtagFunctions} that overrides certain utag functions to allow tags to be blocked based on CMP response.\n   *\n   * Must be called directly after the '##UTGEN##' reference by [editing]{@link https://community.tealiumiq.com/t5/iQ-Tag-Management/Managing-Tag-Templates/ta-p/21713} the 'utag loader' template, as shown in the example.\n   * @name overrideUtagFunctions\n   * @type {function}\n   * @memberof! tealiumCmpIntegration\n   * @example\n// ... utag loader template ...\n\n##UTGEN##\n// override two utag functions for the Usercentrics CMP Integration, to allow tags to be blocked as needed\nwindow.tealiumCmpIntegration &amp;&amp; window.tealiumCmpIntegration.overrideUtagFunctions &amp;&amp; window.tealiumCmpIntegration.overrideUtagFunctions()\n\n// ... utag loader template continues...\n\n   */\n  window.tealiumCmpIntegration.overrideUtagFunctions = overrideUtagFunctions\n\n  /**\n   * A queue for any events that Tealium iQ processes with IMPLICIT consent (to allow those events to be re-processed for new Services in the event of an EXPLICIT consent choice by the user).\n   *\n   * Each element in the queue is a [QueuedEvent]{@link QueuedEvent}\n   * @name implicitEventQueue\n   * @type {array}\n   * @memberof! tealiumCmpIntegration\n   */\n  window.tealiumCmpIntegration.implicitEventQueue = window.tealiumCmpIntegration.implicitEventQueue || []\n\n  /**\n   * A queue for any events that are triggered before Tealium iQ AND Usercentrics have both loaded.\n   *\n   * Each element in the queue is a [QueuedEvent]{@link QueuedEvent}\n   * @name earlyEventQueue\n   * @type {array}\n   * @memberof! tealiumCmpIntegration\n   */\n  window.tealiumCmpIntegration.earlyEventQueue = window.tealiumCmpIntegration.earlyEventQueue || []\n\n  /**\n   * Allows us to make sure we don't log certain messages more than once, especially useful while polling to avoid overwhelming the user.\n   * @function messageNotLoggedYet\n   * @param {*} messageId a string or number to uniquely identify a message for the purposes of deduplication\n   * @returns {boolean} 'true' if the message hasn't been logged yet (and should be logged), otherwise 'false'\n   */\n  var alreadyLoggedMessageIds = {}\n  function messageNotLoggedYet (messageId) {\n    var output = false\n    if (typeof alreadyLoggedMessageIds[messageId] === 'undefined') {\n      alreadyLoggedMessageIds[messageId] = true\n      output = true\n    }\n    return output\n  }\n\n  // if noload is set to 'true', don't interfere, just return to exit this function and allow that setting to stop TiQ load as usual.\n  if (window.utag_cfg_ovrd &amp;&amp; window.utag_cfg_ovrd.noload === true) return false\n\n  logger('CMP integration active - Usercentrics/TiQ' + (tiqInDebugMode ? &quot;\\n\\nDEBUGGING TIP: Use /SENDING|\\\\*\\\\*\\\\*\\\\*/ in the browser console as the 'filter' to show only CMP and tag send notifications.&quot; : '\\n\\nActivate TiQ Debug Mode for more details: https://docs.tealium.com/platforms/javascript/debugging/'), true)\n  var cmpResponse = cmpConsentCheck()\n  // core business/GDPR logic, decides if TiQ should load at all\n  reactToCmpResponse(cmpResponse)\n\n  /**\n   * The core CMP integration logic, which decides if Tealium iQ should be allowed to run, or if it needs to be stopped\n   * until an understandable response that includes permission for Tealium iQ to run is found.\n   *\n   * @function reactToCmpResponse\n   * @param {object} cmpResponse The response from the Usercentrics Vanilla App\n   */\n  function reactToCmpResponse (cmpResponse) {\n    var usercentricsFound = typeof cmpResponse === 'object'\n    var foundWellFormedConsentDecision = checkForWellFormedDecision(cmpResponse)\n    var tagBasedMap = generateTagBasedMap()\n    var foundMapEntryForActiveSetting = Object.keys(tagBasedMap).length &gt; 0\n    var foundExplicitConsent = checkForExplicitConsentDecision(cmpResponse)\n    var tiqIsAllowedToFire = checkForTiqConsent(cmpResponse)\n    var tiqIsLoaded = window.utag &amp;&amp; window.utag.handler &amp;&amp; window.utag.handler.iflag === 1\n\n    if (!usercentricsFound) {\n      /**\n       * CASE A1: no Usercentrics CMS found\n       *\n       * STOP and fire nothing at all\n       * RETRY after a delay\n       */\n      if (messageNotLoggedYet(1)) logger('No Usercentrics CMP found on page.\\n\\nStopping TiQ (no cookies set/removed, no tags fired).\\n\\nPolling for changes.')\n      window.setTimeout(recheckForCmpAndConsent, consentTimeoutInterval)\n      stopTiq()\n    } else if (!foundMapEntryForActiveSetting) {\n      /**\n        * CASE A7: No map found for the current settingsId\n        *\n        * STOP and fire nothing at all. Do not retry.\n        */\n      if (messageNotLoggedYet(2)) logger('No map found for current Usercentrics Setting ID.\\n\\nStopping TiQ (no cookies set/removed, no tags fired).\\n\\nNo retries.')\n      stopTiq()\n    } else if (!foundWellFormedConsentDecision) {\n      /**\n       * CASE A2: Usercentrics CMS found but consent response wasn't well-formed/complete/understandable\n       *\n       * STOP and fire nothing at all\n       * RETRY after a delay\n       */\n      if (messageNotLoggedYet(3)) logger('Found Usercentrics CMP and got response, but didn\\'t understand the response.\\n\\nStopping TiQ (no cookies set/removed, no tags fired).\\n\\nPolling for changes.')\n      window.setTimeout(recheckForCmpAndConsent, consentTimeoutInterval)\n      stopTiq()\n    } else if (!tiqIsAllowedToFire) {\n      /**\n       * CASE A3: Usercentrics CMS found and consent response was well-formed, BUT TiQ didn't have an opt-in\n       *\n       * STOP and fire nothing at all\n       * RETRY after a delay\n       */\n      if (messageNotLoggedYet(4)) logger('Found Usercentrics CMP and got well-formed response, but TiQ isn\\'t allowed to run based on the response.\\n\\nStopping TiQ (no cookies set/removed, no tags fired).\\n\\nPolling for changes.')\n      window.setTimeout(recheckForCmpAndConsent, consentTimeoutInterval)\n      stopTiq()\n    } else if (!foundExplicitConsent) {\n      /**\n       * CASE A4: Usercentrics CMS found AND response was understandable (AND includes an implicit TiQ consent), BUT the user hasn't made an explicit decision yet\n       *\n       * ALLOW TO LOAD for any 'default opt-in' tags (filter logic in Extension B)\n       * RETRY after a delay (in case there's an explicit decision, since implicit decisions usually mean the prompt is displayed)\n       */\n      if (messageNotLoggedYet(5)) logger('Found Usercentrics CMP and got well-formed IMPLICIT response which includes TiQ.\\n\\nAllowing certain tags to fire based on IMPLICIT consent.\\n\\nPolling for changes.')\n      window.setTimeout(recheckForCmpAndConsent, consentTimeoutInterval)\n      if (tiqIsLoaded) {\n        processEarlyQueue()\n      } else {\n        window.setTimeout(recheckForCmpAndConsent, consentTimeoutInterval)\n      }\n      triggerOrQueue()\n    } else if (foundExplicitConsent) {\n      /**\n       * CASE A5: Usercentrics CMS found AND response was understandable, AND the user has made an explicit consent decision AND TiQ is allowed\n       *\n       * ALLOW TO LOAD for any opted-in tags (filter logic in Extension B), do not retry.\n       */\n      if (messageNotLoggedYet(6)) logger('Found Usercentrics CMP and got well-formed EXPLICIT response which includes TiQ.\\n\\nAllowing certain tags to fire based on EXPLICIT consent.\\n\\nNo further polling.')\n      // only call if we've been polling (on initial load, it will load automatically)\n      if (tiqIsLoaded) {\n        processEarlyQueue()\n        processImplicitQueue()\n      } else {\n        window.setTimeout(recheckForCmpAndConsent, consentTimeoutInterval)\n      }\n      triggerOrQueue()\n    } else {\n      /**\n        * CASE A6: Something went wrong with this extension.\n        *\n        * STOP and fire nothing at all. Do not retry.\n        */\n      if (messageNotLoggedYet(7)) logger('Something unexpected went wrong.\\n\\nStopping TiQ (no cookies set/removed, no tags fired).\\n\\nNo retries.')\n      stopTiq()\n    }\n  }\n\n  /**\n   * Override utag.loader.initdata and utag.handler.trigger to allow Tealium iQ Tags to be blocked if the user hasn't consented.\n   *\n   * @function overrideUtagFunctions\n   * @returns {boolean} 'true' if the function was overridden successfully by this request, 'false' if not (because it was already overridden)\n   */\n  function overrideUtagFunctions () {\n    // don't override more than once, assume that if one function has been overridden, both have\n    if (window.utag.handler.trigger.toString().indexOf('tealiumCmpIntegration') !== -1) {\n      return true\n    }\n\n    // the initial view is handled differently than subsequent events\n    // this is safe to to override even if noview is set (because it will never be called in that case)\n    window.utag.loader.initdata_old = window.utag.loader.initdata\n    window.utag.loader.initdata = newUtagLoaderInitdata\n\n    window.utag.handler.trigger_old = window.utag.handler.trigger\n    window.utag.handler.trigger = newUtagHandlerTrigger\n    logger('Overrode utag functions!')\n\n    if (window.utag.handler.trigger.toString().indexOf('tealiumCmpIntegration') !== -1) {\n      return true\n    }\n\n    return false\n  }\n\n  /**\n   * An overridden version of the Tealium iQ function utag.loader.initdata.\n   *\n   * Calls the original function, respects possible noview settings, rechecks the user consent, and calls queueEventWithoutFiringImplicitServices\n   * if only an IMPLICIT consent is found (after recording the IMPLICIT services, to avoid double-firing).\n   *\n   * That same event can then be re-processed for any new Services if an EXPLICIT consent decision later made.\n   *\n   * @function newUtagLoaderInitdata\n   */\n  function newUtagLoaderInitdata () {\n    window.utag.loader.initdata_old()\n    // make sure we don't queue this initial page load twice, and respect the configured noview setting\n    if (!window.tealiumCmpIntegration.isNoviewSet &amp;&amp; !window.tealiumCmpIntegration.alreadyFiredInitialViewEvent) {\n      window.tealiumCmpIntegration.alreadyFiredInitialViewEvent = true\n      var consentedServices = getCurrentConsentDecision()\n      if (consentedServices.type === 'implicit') {\n        window.tealiumCmpIntegration.implicitServices = consentedServices\n        // we don't need to fire implicit services in this case, because TiQ's loading process will fire them\n        queueEventWithoutFiringImplicitServices({\n          event: 'view',\n          data: window.utag.handler.C(window.utag.data)\n        })\n      }\n    }\n  }\n\n  /**\n   * Refresh [tealiumCmpIntegration.tagBasedMap]{@link tealiumCmpIntegration.tagBasedMap} and return that new map, helps smooth out any timing issues between Usercentrics and Tealium iQ load.\n   *\n   * @function generateTagBasedMap\n   * @returns a [TagToServiceMap]{@link TagToServiceMap}\n   */\n  function generateTagBasedMap () {\n    var tagBasedMap = getTagBasedMap(map)\n    window.tealiumCmpIntegration.tagBasedMap = tagBasedMap\n    return tagBasedMap\n  }\n\n  /**\n   * Tealium iQ's utag.handler.trigger normally causes tags to fire. For this integration, we override that function to support blocking tags without consent.\n   *\n   * @function newUtagHandlerTrigger\n   *\n   * @param {*} a can be an object or a string\n   * @param {*} b\n   * @param {*} c\n   */\n  function newUtagHandlerTrigger (a, b, c) {\n    /**\n     * Trigger CASES (utag.handler.trigger override)\n     *\n     * We need to queue the events if we only have implicit consent, to allow a selective retrigger if/when we get an explicit decision.\n     */\n    var isPureConsentEvent = (a === nameOfConsentPollingEvent &amp;&amp; !b &amp;&amp; !c)\n    var isNoviewSet = window.tealiumCmpIntegration.isNoviewSet || true // assume noview if something went wrong with the global, to avoid firing tracking in error\n\n    var consentedServices = getCurrentConsentDecision()\n    var consentType = (consentedServices &amp;&amp; consentedServices.type) || 'none'\n\n    var isUsercentricsReady = consentType === 'implicit' || consentType === 'explicit'\n    var isTealiumReady = window.utag &amp;&amp; window.utag.handler &amp;&amp; window.utag.handler.iflag === 1\n\n    if (!isPureConsentEvent) {\n      logger('utag.handler.trigger called with:\\n\\n' + JSON.stringify(arguments, null, 2))\n    }\n\n    if (!isUsercentricsReady &amp;&amp; !isTealiumReady) {\n      consentedServices.type = 'tealium-and-usercentrics-loading'\n      logger('Waiting for Usercentrics and Tealium to be ready, queueing early event.')\n      queueEarlyEvent(a, b, c)\n      return false\n    } else if (!isUsercentricsReady) {\n      consentedServices.type = 'usercentrics-loading'\n      logger('Usercentrics is still loading, queueing early event')\n      queueEarlyEvent(a, b, c)\n      return false\n    } else if (!isTealiumReady) {\n      consentedServices.type = 'tealium-still-loading'\n      logger('Tealium iQ is still loading, queueing early event')\n      queueEarlyEvent(a, b, c)\n      return false\n    }\n\n    // if an array of tagUids is passed, that forces them to fire regardless of load rules\n    // or consent, so we need to filter that array before allowing it to be processed\n    var hasTagUidArray = c &amp;&amp; typeof c === 'object' &amp;&amp; c.uids &amp;&amp; c.uids &amp;&amp; window.utag.ut.typeOf(c.uids) === 'array'\n    var uidMap = generateTagBasedMap()\n    var allowedTagUids = []\n    var blockedTagUids = []\n    var serviceName\n    var tagUid\n    if (hasTagUidArray) {\n      for (var i = 0; i &lt; c.uids.length; i++) {\n        tagUid = c.uids[i]\n        serviceName = uidMap[tagUid] || '(missing)'\n        // only push consented services into the new array\n        if (consentedServices.indexOf(serviceName) !== -1) {\n          allowedTagUids.push(tagUid)\n        } else {\n          blockedTagUids.push(tagUid)\n        }\n      }\n      // replace the original with the filtered array (can also be empty, if none of them were allowed)\n      logger('Call included tagUid array:\\n\\n' + JSON.stringify(c.uids) + '\\n\\nwhich was replaced by the filtered version:\\n\\n' + JSON.stringify(allowedTagUids))\n      c.originalUids = c.uids.slice() // make a shallow copy\n      c.uids = allowedTagUids\n      c.blockedTagUids = blockedTagUids\n    }\n\n    if (consentType === 'explicit') {\n      /**\n       * CASE T2: expected globals are populated, consent is EXPLICIT\n       *\n       * FIRE allowed tags (explicit)\n       * utag.handler.trigger override PROCESSES the queue, which will include any queued events from CASE A4, making sure not to re-fire any default\n       *   opt-in tags that were already fired for the queued events\n       */\n      // make sure TiQ loads\n      processEarlyQueue()\n      processImplicitQueue()\n      triggerTiqLoad()\n      // fire the current event if it's not just a polling event\n      if (!isPureConsentEvent) {\n        return window.utag.handler.trigger_old(a, b, c)\n      }\n    } else if (consentType === 'implicit') {\n      /**\n       * CASE T3: expected globals are populated, consent is IMPLICIT\n       *\n       * FIRE allowed tags (implicit)\n       * utag.handler.trigger override KEEPS a queue/record that includes\n       *  - the event(s) that were processed based on implicit consent\n       *  - which tags were allowed to process each event (are set to implicit opt-in)\n       */\n      processEarlyQueue()\n      // fire the initial view if appropriate, and queue it\n      triggerTiqLoad()\n      window.tealiumCmpIntegration.implicitServices = consentedServices\n\n      // queue the initial 'view' on pageload if appropriate\n      if (!isNoviewSet &amp;&amp; isTealiumReady &amp;&amp; !window.tealiumCmpIntegration.alreadyFiredInitialViewEvent) {\n        window.tealiumCmpIntegration.alreadyFiredInitialViewEvent = true\n        queueEventAndFireImplicitServices('view', window.utag.handler.C(window.utag.data))\n      }\n      // queue the current event if it exists (and this isn't just consent polling)\n      if (!isPureConsentEvent) {\n        return queueEventAndFireImplicitServices(a, b, c)\n      }\n    } else if (consentType === 'missing-map') {\n      logger('Something went wrong - all tags were blocked because no consent map was found for the active setting ID.')\n      return false\n    } else if (consentType === 'missing-tiq-consent') {\n      logger('Something went wrong - all tags were blocked because no consent was found for &quot;' + tiqServiceName + '&quot;, configured Tealium iQ name.\\n\\nConsent found: ' + JSON.stringify(consentedServices, null, 2))\n      return false\n    } else {\n      /**\n       * CASE T1: expected variables not populated (misconfiguration/error case)\n       *\n       * STOP and fire nothing at all. Do not retry or queue the event.\n       */\n      logger('Something went wrong - all tags were blocked because the consent response was not understood.')\n      return false\n    }\n  }\n\n  /**\n   * Process any queued tracking events from [the early event queue]{@link tealiumCmpIntegration.earlyEventQueue} (can include pageviews) for any currently-consented Services.\n   *\n   * Intended to be called first understandable implicit consent.\n   *\n   * @function processEarlyQueue\n   */\n  function processEarlyQueue () {\n    var queuedEvent\n    window.tealiumCmpIntegration.earlyEventQueue = window.tealiumCmpIntegration.earlyEventQueue || []\n    while (window.tealiumCmpIntegration.earlyEventQueue.length &gt; 0) {\n      // process past events\n      queuedEvent = window.tealiumCmpIntegration.earlyEventQueue.shift()\n      logger('Processing queued early event for currently consented tags: ' + JSON.stringify(queuedEvent, null, 2))\n      window.utag.track(queuedEvent)\n    }\n  }\n\n  /**\n   * Process any queued tracking events from [the global queue]{@link tealiumCmpIntegration.implicitEventQueue} (can include pageviews) for any newly-consented Services.\n   *\n   * Intended to be called on new EXPLICIT consent decision - queued events have already had IMPLICTLY consented tags fired, so those need to be excluded.\n   *\n   * @function processImplicitQueue\n   */\n  function processImplicitQueue () {\n    var alreadyLogged = false\n    var queuedEvent\n    window.tealiumCmpIntegration.implicitEventQueue = window.tealiumCmpIntegration.implicitEventQueue || []\n    while (window.tealiumCmpIntegration.implicitEventQueue.length &gt; 0) {\n      if (!alreadyLogged) {\n        alreadyLogged = true\n        logger('Explicit consent tracking request received - processing past implicitly tracked events (' + window.tealiumCmpIntegration.implicitEventQueue.length + ') for any new explicit tags.')\n      }\n      // process past events\n      queuedEvent = window.tealiumCmpIntegration.implicitEventQueue.shift()\n      logger('Triggering event for explicitly-consented tags: ' + JSON.stringify(queuedEvent))\n      window.utag.track(queuedEvent)\n    }\n  }\n\n  /**\n   * Queue a [tracking event]{@link QueuedEvent} in [the early queue]{@link tealiumCmpIntegration.earlyEventQueue}, without firing any tags.\n   *\n   * Intended to be called for events that triggered before we get an understandable response from Usercentrics.\n   *\n   * @function queueEarlyEvent\n   * @param {*} a the 'a' argument from utag.handler.trigger\n   * @param {*} b the 'b' argument from utag.handler.trigger\n   * @param {*} c the 'c' argument from utag.handler.trigger\n   *\n   */\n  function queueEarlyEvent (a, b, c) {\n    a = a || {}\n\n    // make a copy, in case shared objects are used (like utag_data, or a similar global) - snapshot those\n    if (typeof b === 'object') {\n      b = JSON.parse(JSON.stringify(b))\n    }\n    // convert to a more standard format\n    if (typeof a === 'string') {\n      a = { event: a, data: b || {}, cfg: c }\n    }\n\n    // if there's a tagUid array, don't queue the already-fired tags - instead, swap that with any blocked tags\n    if (a &amp;&amp; a.cfg &amp;&amp; window.utag.ut.typeOf(a.cfg.uids) === 'array') {\n      a.cfg.uids = a.cfg.blockedTagUids.slice()\n    }\n\n    // nothing will be allowed to fire\n    a.data[nameOfImplicitConsentArray] = []\n\n    window.tealiumCmpIntegration.earlyEventQueue = window.tealiumCmpIntegration.earlyEventQueue || []\n    window.tealiumCmpIntegration.earlyEventQueue.push(a)\n    logger('Queued early event!')\n  }\n\n  /**\n   * Queue a [tracking event]{@link QueuedEvent} in [the global queue]{@link tealiumCmpIntegration.implicitEventQueue}, without firing any implictly consented Services.\n   *\n   * Intended to be called for the initial pageview on load, since the load process will have already fired the implicit services.\n   *\n   * @function queueEventWithoutFiringImplicitServices\n   * @param {*} a the 'a' argument from utag.handler.trigger\n   * @param {*} b the 'b' argument from utag.handler.trigger\n   * @param {*} c the 'c' argument from utag.handler.trigger\n   *\n   */\n  function queueEventWithoutFiringImplicitServices (a, b, c) {\n    a = a || {}\n\n    // make a copy, in case shared objects are used (like utag_data, or a similar global) - snapshot those\n    if (typeof b === 'object') {\n      b = JSON.parse(JSON.stringify(b))\n    }\n    // convert to a more standard format\n    if (typeof a === 'string') {\n      a = { event: a, data: b || {}, cfg: c }\n    }\n\n    // if there's a tagUid array, don't queue the already-fired tags - instead, swap that with any blocked tags\n    if (a &amp;&amp; a.cfg &amp;&amp; window.utag.ut.typeOf(a.cfg.uids) === 'array') {\n      a.cfg.uids = a.cfg.blockedTagUids.slice()\n    }\n\n    a.data[nameOfImplicitConsentArray] = window.tealiumCmpIntegration.implicitServices || []\n\n    window.tealiumCmpIntegration.implicitEventQueue = window.tealiumCmpIntegration.implicitEventQueue || []\n    window.tealiumCmpIntegration.implicitEventQueue.push(a)\n  }\n\n  /**\n   * Queue a [tracking event]{@link QueuedEvent} in [the global queue]{@link tealiumCmpIntegration~implicitEventQueue}, without firing any implictly consented Services.\n   *\n   * Intended to be called for all events other than the initial page load.\n   *\n   * @function queueEventAndFireImplicitServices\n   * @param {*} a the 'a' argument from utag.handler.trigger\n   * @param {*} b the 'b' argument from utag.handler.trigger\n   * @param {*} c the 'c' argument from utag.handler.trigger\n   *\n   */\n  function queueEventAndFireImplicitServices (a, b, c) {\n    // fire the implicit tags\n    window.utag.handler.trigger_old(a, b, c)\n    logger('Implicit consent tracking request fired (or queued, if utag hasn\\'t loaded).')\n    return queueEventWithoutFiringImplicitServices(a, b, c)\n  }\n\n  /**\n   * Generate a {@link TagToServiceMap TagToServiceMap} based on a {@link ServiceToTagMap ServiceToTagMap}\n   *\n   * @function getTagBasedMap\n   * @param {object} map a {@link ServiceToTagMap ServiceToTagMap} object\n   * @return {object} a {@link TagToServiceMap TagToServiceMap}\n   */\n  function getTagBasedMap (map) {\n    // generate a lookup based on the tagUid\n    if (typeof map !== 'object') return {}\n    var settingsId = getCurrentUsercentricsSettingsId() || ''\n    if (typeof settingsId !== 'string' || settingsId === '') return {}\n    var settingSpecificMap = map[settingsId] || {}\n    var serviceNames = Object.keys(settingSpecificMap)\n    var uidMap = {}\n    for (var i = 0; i &lt; serviceNames.length; i++) {\n      for (var j = 0; j &lt; settingSpecificMap[serviceNames[i]].length; j++) {\n        uidMap[settingSpecificMap[serviceNames[i]][j]] = serviceNames[i]\n      }\n    }\n    return uidMap\n  }\n\n  /**\n   * Get the current Usercentrics settingsId from the page.\n   *\n   * @returns {string} the Usercentrics settingsId, defaults to an empty string if none is found\n   */\n  function getCurrentUsercentricsSettingsId () {\n    return (window.usercentrics &amp;&amp; window.usercentrics.settingsId) || ''\n  }\n\n  /**\n   * Trigger the core logic with an up-to-date array of objects returned by calling [usercentrics.getConsents]{@link https://docs.usercentrics.com/#/?id=getconsents}\n   * @function recheckForCmpAndConsent\n   */\n  function recheckForCmpAndConsent () {\n    var newConsentResponse = cmpConsentCheck()\n    reactToCmpResponse(newConsentResponse)\n  }\n\n  /**\n   * Call [usercentrics.getConsents]{@link https://docs.usercentrics.com/#/?id=getconsents} to get the current consent decision.\n   * @function cmpConsentCheck\n   */\n  function cmpConsentCheck () {\n    if (!window.usercentrics || typeof window.usercentrics.getConsents !== 'function') return false\n    var cmpConsentArray = window.usercentrics.getConsents()\n    return cmpConsentArray\n  }\n\n  /**\n   * Indicates if Usercentrics has loaded and returned a well-formed indication of user consent.\n   * @function checkForWellFormedDecision\n   * @param cmpConsentArray the array of objects returned by [usercentrics.getConsents]{@link https://docs.usercentrics.com/#/?id=getconsents}.\n   * @returns {boolean} 'true' if the consent decision is well-formed, otherwise 'false'\n   */\n  function checkForWellFormedDecision (cmpConsentArray) {\n    // treat things we don't understand as an opt-out\n    if (toString.call(cmpConsentArray) !== '[object Array]') return false\n    // use the first entry as a proxy for all\n    if (cmpConsentArray &amp;&amp; cmpConsentArray[0] &amp;&amp; typeof cmpConsentArray[0].dataProcessingService === 'string') {\n      return true\n    }\n    return false\n  }\n\n  /**\n   * Indicates if the user has made an EXPLICIT decision\n   * @function checkForExplicitConsentDecision\n   * @param cmpConsentArray the array of objects returned by [usercentrics.getConsents]{@link https://docs.usercentrics.com/#/?id=getconsents}.\n   * @returns {boolean} 'true' if the consent decision is EXPLICIT otherwise 'false'\n   */\n  function checkForExplicitConsentDecision (cmpConsentArray) {\n    // treat things we don't understand as an opt-out\n    if (toString.call(cmpConsentArray) !== '[object Array]') return false\n    // use the first entry as a proxy for all\n    if (cmpConsentArray &amp;&amp; cmpConsentArray[0] &amp;&amp; cmpConsentArray[0].updatedBy === 'explicit') {\n      return true\n    }\n    return false\n  }\n\n  /**\n   * Indicates if Tealium iQ has permission to run (and fire tags).\n   * @function checkForTiqConsent\n   * @param cmpConsentArray the array of objects returned by [usercentrics.getConsents]{@link https://docs.usercentrics.com/#/?id=getconsents}.\n   * @returns {boolean} 'true' if TiQ is allowed to run, otherwise 'false'\n   */\n  function checkForTiqConsent (cmpConsentArray) {\n    var foundOptIn = false\n    // treat things we don't understand as an opt-out\n    if (toString.call(cmpConsentArray) !== '[object Array]') return false\n    // check vendors if there's an object, look for at least one\n    cmpConsentArray.forEach(function (tagInfo) {\n      if (tagInfo.consentStatus === true &amp;&amp; tagInfo.dataProcessingService === tiqServiceName) {\n        foundOptIn = true\n      }\n    })\n    return foundOptIn\n  }\n\n  /**\n   * Create an instance of\n   * @param {array} cmpConsentArray the array of objects returned by calling [usercentrics.getConsents]{@link https://docs.usercentrics.com/#/?id=getconsents}\n   */\n  function getVendorConsentsFromCmpConsentArray (cmpConsentArray) {\n    var vendorArray = []\n\n    var isWellFormed = checkForWellFormedDecision(cmpConsentArray)\n\n    if (!isWellFormed) {\n      vendorArray.type = 'missing-well-formed-response'\n      return []\n    }\n\n    var tagBasedMap = generateTagBasedMap()\n\n    // if there is no mapping for the settings id, we need to change the console output\n    var currentSettingsIdHasMapping = (typeof tagBasedMap === 'object' &amp;&amp; Object.keys(tagBasedMap).length &gt; 0)\n\n    if (!currentSettingsIdHasMapping) {\n      vendorArray.type = 'missing-map'\n      return []\n    }\n\n    cmpConsentArray &amp;&amp; cmpConsentArray.forEach(function (tagConsent) {\n      if (tagConsent.consentStatus === true) {\n        vendorArray.push(tagConsent.dataProcessingService)\n      }\n    })\n    vendorArray.type = checkForExplicitConsentDecision(cmpConsentArray) ? 'explicit' : 'implicit'\n\n    if (checkForTiqConsent(cmpConsentArray) === false) {\n      // change the consent type, but leave the array for debugging purposes\n      vendorArray.type = 'missing-tiq-consent'\n    }\n\n    return vendorArray\n  }\n\n  /**\n   * Get the current consent decision from the CMP for the active Setting\n   * @function getCurrentConsentDecision\n   * @returns a {@link ConsentDecision ConsentDecision}\n   */\n  function getCurrentConsentDecision () {\n    var freshConsent = cmpConsentCheck()\n\n    return getVendorConsentsFromCmpConsentArray(freshConsent)\n  }\n\n  /**\n   *  A conditional logging function - we can't use utag.DB directly because some of our logic needs to be preloader, but we can mimic the same logic so that our logging only displays when TiQ is in debug mode and/or not in Prod, or is explicitly forced.\n   * @function logger\n   * @param {string} message the message to be conditionally shown\n   * @param {boolean} showOutsideDebugMode if 'true', forces the message to shown outside of debug mode, except on Prod\n   */\n  function logger (message, showOutsideDebugMode) {\n    if (typeof tealiumEnvironment === 'undefined' || tealiumEnvironment === 'prod') {\n      // don't allow anything outside of debug mode on prod (disable this flag)\n      showOutsideDebugMode = false\n    }\n\n    if (showOutsideDebugMode || tiqInDebugMode) {\n      message = '\\n' + message + '\\n'\n      var formattedArr = []\n      formattedArr.push('****************')\n      var messageArr = message.split('\\n')\n      messageArr.forEach(function (messageLine) {\n        formattedArr.push('*  ' + messageLine)\n      })\n      formattedArr.push('****************')\n      var outputString = formattedArr.join('\\n')\n      console.log(outputString)\n    }\n  }\n\n  /**\n   * Stops Tealium iQ from loading (the TMS will not load tags or set a cookie if this function is called in Pre Loader), using the {@link https://docs.tealium.com/platforms/javascript/settings/#noload noload} setting\n   * @function stopTiq\n   */\n  function stopTiq () {\n    // logger(&quot;stopTiq function fired&quot;)\n    window.utag_cfg_ovrd = window.utag_cfg_ovrd || {}\n    window.utag_cfg_ovrd.noload = true\n  }\n\n  /**\n   * Allows TiQ to finish loading, intended to be called when a well-formed consent response is received, and that response allows Tealium iQ to run.\n   *\n   * Works by setting {@link https://docs.tealium.com/platforms/javascript/settings/#noload noload} to 'false' and calling Tealium iQ's utag.loader.PINIT method.\n   *\n   * If noload was 'true' and this function runs it must've been set to true by our own {@link module:extension-1~stopTiq stopTiq} function, because otherwise Tealium iQ wouldn't have been allowed to load/poll in the first place.\n   * @function triggerTiqLoad\n   * @returns {boolean} 'true' if Tealium iQ was successfully triggered, 'false' if it wasn't triggered because it's already initiated\n   */\n  function triggerTiqLoad () {\n    // if usercentrics is ready on the first request, TiQ won't have loaded yet at all - let it load naturally\n    if (!window.utag) {\n      return true\n    }\n    // if TiQ has already loaded but these flags aren't truthy, we've interrupted the load and should retrigger it\n    // initial load / view (noview logic handled in utag.handler.trigger function itself)\n    if (!window.utag.handler || !window.utag.handler.iflag) {\n      // we don't need to reload actually, just allow it to finish loading\n      window.utag.cfg.noload = false // safe because this code only runs if it was set to false originally\n      window.utag.loader.PINIT()\n      return true\n    }\n    // already loaded\n    return false\n  }\n\n  /**\n   * If Tealium iQ hasn't loaded, load it (calling utag.handler.trigger in the process), otherwise call utag.handler.trigger.\n   * @function triggerOrQueue\n   */\n  function triggerOrQueue () {\n    var successfullyTriggeredLoadIfNeeded = triggerTiqLoad()\n    if (!successfullyTriggeredLoadIfNeeded) {\n      // explicit consent from polling, but load has already been triggered\n      return window.utag.handler.trigger(nameOfConsentPollingEvent)\n    }\n  }\n  /**\n   * Get the the current Tealium iQ environment.\n   *\n   * Since this runs in Pre Loader, it needs to use regex to recognize the utag.js file in the DOM and read the environment from the file name (there are no utag functions or objects at this point in the load).\n   *\n   * NOTE: This doesn't work correctly when using the the Environment Switcher (because the original script is added to the DOM instead of the new one, and the 307 redirect that's used to pull the new file(s) only changes the response, not the script element itself).\n   *\n   * If you're using the Environment Switcher on Prod and would like to see console output, set the [debug cookie]{@link https://docs.tealium.com/platforms/javascript/debugging/}.\n   *\n   * @function getTealiumEnvironment\n   * @returns {boolean} 'true' if Tealium iQ was successfully triggered, 'false' if it wasn't triggered because it's already initiated\n   */\n  function getTealiumEnvironment () {\n    var allScripts = document.getElementsByTagName('script')\n    var re = /\\/([^/]*)\\/utag\\.js(\\?.*)*$/\n    for (var i = 0; i &lt; allScripts.length; i++) {\n      var result = re.exec(allScripts[i].src) // can be null\n      if (result &amp;&amp; result[1]) { // [1] is the result of the match\n        return result[1]\n      }\n    }\n    return 'prod' // default to guessing we're in prod, just in case we're actually in prod (to avoid logging in Prod)\n  }\n})()\n\n// Document key data structures here for clarity.\n\n/**\n * An array of Usercentrics Service Names that have permission to run (uses the 'dataProcessingService' property from [usercentrics.getConsents]{@link https://docs.usercentrics.com/#/?id=getconsents}).\n *\n * Also includes a 'type' property that indicates whether the consent decision is IMPLICIT or EXPLICT.\n *\n * @static\n * @type {array}\n * @name ConsentDecision\n * @memberof! &lt;global&gt;\n * @property {string} type the type of consent, will be either 'implicit' or 'explicit'\n * @example\nvar exampleConsentDecision = window.tealiumCmpIntegration.getCurrentConsentDecision()\n\nJSON.stringify(exampleConsentDecision)\n// [&quot;Google Analytics&quot;,&quot;Another Tag&quot;,&quot;Tealium iQ Tag Management&quot;]\n\nexampleConsentDecision.type\n// &quot;explicit&quot;\n\nexampleConsentDecision.length\n// 3\n */\n\n/**\n * Assigns Tealium iQ Tags to Usercentrics Service Names. Each service can have multiple tags, but each tag can only have one service.  If the same tag UID appears in multiple Service arrays, only one will be used.\n *\n * The keys for the main object are Setting-IDs from Usercentrics, inside that are key/value pairs where the key is a Service Name from Usercentrics, and the value is an array of TagUIDs from Tealium iQ.\n *\n * This needs to be provided as per the example below, in [tealiumCmpIntegration.map]{@link namespace:tealiumCmpIntegration~map}.\n *\n * An [example Tealium iQ extension]{@link module:example-map} is provided as well.\n *\n * @static\n * @type {object}\n * @name ServiceToTagMap\n * @memberof! &lt;global&gt;\n * @example\nwindow.tealiumCmpIntegration = window.tealiumCmpIntegration || {}\nwindow.tealiumCmpIntegration.map = {\n  'yPyIAIIxY': {\n    'Google Analytics': [6, 8, 10],\n    'Mouseflow': [7, 9],\n    'Another Tag': [11]\n  }\n}\n */\n\n/**\n * A simple lookup, with Tealium iQ tag UIDs as keys and the associated Usercentrics service name as strings as values. Each service can be associated with multiple tags, but each tag can be associated with one service.\n *\n * The example is based on the {@link ServiceToTagMap ServiceToTagMap} example, where the Usercentrics settingsId on the active page is 'yPyIAIIxY'.\n *\n * This object is automatically generated by the [getTagBasedMap]{@link module:extension-1~getTagbasedMap} method, and made available globally in [tealiumCmpIntegration.tagBasedMap]{@link tealiumCmpIntegration~tagBasedMap} for debugging and use within the extensions.\n *\n * @static\n * @type {object}\n * @name TagToServiceMap\n * @memberof! &lt;global&gt;\n * @example\n{\n  6: 'Google Analytics',\n  7: 'Mouseflow',\n  8: 'Google Analytics',\n  9: 'Mouseflow',\n  10: 'Google Analytics',\n  11: 'Another Tag'\n}\n */\n\n/**\n * An object from the [implicitEventQueue]{@link tealiumCmpIntegration.implicitEventQueue} or [earlyEventQueue]{@link tealiumCmpIntegration.earlyEventQueue}, which represents a Tealium iQ tracking event that's been processed based on an IMPLICIT [ConsentDecision]{@link ConsentDecision}\n *\n * Heavily based on the argument passed to [utag.track]{@link https://community.tealiumiq.com/t5/Tealium-iQ-Tag-Management/utag-track-method/td-p/24578}, since it's designed to be processed by that method.\n *\n * Initial pageviews (handled in the [utag.loader.initdata override]{@link module:extension-1~newUtagLoaderInitdata}) will NOT have metadata like cookies, qps, etc - utag.track calls (handled in the [utag.handler.trigger override]{@link module:extension-1~newUtagHandlerTrigger}) will. That's a byproduct of using utag.handler.trigger, which is later in the load - those metadata will be re-read when the queue is processed, and since this queue isn't persisted between pages, it should be fine like that - the only strange behavior will be that any metadata that aren't present on re-read will still be present after the re-read - only values that are still present will be replaced with new values.\n *\n * An alternative approach could be to manually remove 'cp.\\*', 'dom.\\*', 'ut.\\*', 'qp.\\*', 'meta.\\*' and possibly 'tealium_\\*' (except 'tealium_event') from the 'data' object before queueing - that hasn't been done so far.\n *\n * @static\n * @type {array}\n * @name QueuedEvent\n * @memberof! &lt;global&gt;\n * @property {string} event the type of tracking event, generally 'view' for pageviews or 'link' for other events\n * @property {object} data the Universal Data Object associated with the event (from utag_data or the b object)\n * @property {object} cfg an optional configuration object that can have a 'cb' property (for a callback function) and a 'uids' array, which is a list of tag UIDs that should be triggered by the event, regardless of whether load rules are met.\n * @example\n{\n  &quot;event&quot;: &quot;view&quot;,\n  &quot;data&quot;: {\n    &quot;page_type&quot;: &quot;test_virtual_view&quot;,\n    &quot;cp.utag_main_v_id&quot;: &quot;0174492849d50013581219634d6103079004907101274&quot;,\n    &quot;cp.utag_main__sn&quot;: &quot;4&quot;,\n    &quot;cp.utag_main__se&quot;: &quot;4&quot;,\n    &quot;cp.utag_main__ss&quot;: &quot;0&quot;,\n    &quot;cp.utag_main__st&quot;: &quot;1598990152209&quot;,\n    &quot;cp.utag_main_ses_id&quot;: &quot;1598988112353&quot;,\n    &quot;cp.utag_main__pn&quot;: &quot;3&quot;,\n    &quot;cp.utagdb&quot;: &quot;true&quot;,\n    &quot;dom.referrer&quot;: &quot;&quot;,\n    &quot;dom.title&quot;: &quot;Usercentrics Test&quot;,\n    &quot;dom.domain&quot;: &quot;solutions.tealium.net&quot;,\n    &quot;dom.query_string&quot;: &quot;&quot;,\n    &quot;dom.hash&quot;: &quot;&quot;,\n    &quot;dom.url&quot;: &quot;https://solutions.tealium.net/hosted/usercentrics/test-page-standard.html&quot;,\n    &quot;dom.pathname&quot;: &quot;/hosted/usercentrics/test-page-standard.html&quot;,\n    &quot;dom.viewport_height&quot;: 456,\n    &quot;dom.viewport_width&quot;: 1825,\n    &quot;ut.domain&quot;: &quot;tealium.net&quot;,\n    &quot;ut.version&quot;: &quot;ut4.46.202009011921&quot;,\n    &quot;ut.event&quot;: &quot;view&quot;,\n    &quot;ut.visitor_id&quot;: &quot;0174492849d50013581219634d6103079004907101274&quot;,\n    &quot;ut.session_id&quot;: &quot;1598988112353&quot;,\n    &quot;ut.account&quot;: &quot;services-caleb&quot;,\n    &quot;ut.profile&quot;: &quot;usercentrics-by-tag&quot;,\n    &quot;ut.env&quot;: &quot;prod&quot;,\n    &quot;tealium_event&quot;: &quot;view&quot;,\n    &quot;tealium_visitor_id&quot;: &quot;0174492849d50013581219634d6103079004907101274&quot;,\n    &quot;tealium_session_id&quot;: &quot;1598988112353&quot;,\n    &quot;tealium_session_number&quot;: &quot;4&quot;,\n    &quot;tealium_session_event_number&quot;: &quot;4&quot;,\n    &quot;tealium_datasource&quot;: &quot;&quot;,\n    &quot;tealium_account&quot;: &quot;services-caleb&quot;,\n    &quot;tealium_profile&quot;: &quot;usercentrics-by-tag&quot;,\n    &quot;tealium_environment&quot;: &quot;prod&quot;,\n    &quot;tealium_random&quot;: &quot;2085060854215077&quot;,\n    &quot;tealium_library_name&quot;: &quot;utag.js&quot;,\n    &quot;tealium_library_version&quot;: &quot;4.46.0&quot;,\n    &quot;tealium_timestamp_epoch&quot;: 1598988352,\n    &quot;tealium_timestamp_utc&quot;: &quot;2020-09-01T19:25:52.211Z&quot;,\n    &quot;tealium_timestamp_local&quot;: &quot;2020-09-01T21:25:52.211&quot;,\n    &quot;usercentrics_services_with_consent&quot;: [\n      &quot;Mouseflow&quot;,\n      &quot;Tealium iQ Tag Management&quot;,\n      &quot;Usercentrics Consent Management Platform&quot;\n    ],\n    &quot;usercentrics_consent_type&quot;: &quot;implicit&quot;,\n    &quot;_usercentrics_services_already_processed&quot;: [\n      &quot;Mouseflow&quot;,\n      &quot;Tealium iQ Tag Management&quot;,\n      &quot;Usercentrics Consent Management Platform&quot;\n    ]\n  },\n  &quot;cfg&quot;: {\n    &quot;cb&quot;: function myCallback () {console.log(&quot;Callback fired!&quot;)},\n    &quot;uids&quot;: [\n      11\n    ],\n    &quot;originalUids&quot;: [\n      7,\n      11\n    ],\n    &quot;blockedTagUids&quot;: [\n      11\n    ]\n  }\n}\n*/\n"}}},"blockPubTargetsLogic":"true","publishedTargets":"dev","type":"new","_id":"10","extType":"Javascript Code","notes":"","sort":"2","selectedTargets":{"prod":"true","dev":"true","qa":"true"}},"11":{"publishedTargets":"dev","blockPubTargetsLogic":"true","type":"new","extType":"Javascript Code","_id":"11","selectedTargets":{"qa":"true","dev":"true","prod":"true"},"sort":"3","notes":"","id":"100040","title":"RELEASE 2/2","advExecOption":"alr","scope":"global","constructor":"","status":"active","initialize":"","codeDevData":{"draftSeq":"2","promotedSnippets":{"ef260e9aa3c673af240d17a2660480361a8e081d1ffeca2a5ed0e3219fc18567":{"promotedBy":"caleb.jaquith@tealium.com","promotedTimestamp":"202010051352","promotedDraftName":"BLANK","name":"dev","code":"// Type your JavaScript code here..."},"6754af9632a2745e85c293e5aac0863370d9bd3330b9938c00cadfd215227d77":{"promotedDraftName":"extension-2.js","promotedTimestamp":"202010080750","promotedBy":"caleb.jaquith@tealium.com","code":"/* global b */\n\n/**\n *  Scope       : All Tags - After Load Rules\n *  Condition   : n/a\n *  Description : CMP 2/2 - After Load Rules component - Prevent tags from firing if they don't have an opt-in in the mapping (or there is no mapping)\n *\n */\n\n/**\n * @module extension-2\n * @description The 'All Tags - After Load Rules' component, responsible for blocking tags if consent is missing or this CMP integration is misconfigured.\n */\n\nvar map = (window.tealiumCmpIntegration &amp;&amp; window.tealiumCmpIntegration.map) || {}\n\n// get settings from CMP 1 extension, shouldn't need to change these\nvar globals = window.tealiumCmpIntegration = window.tealiumCmpIntegration || {}\nvar tiqServiceName = globals.tiqServiceName || 'Tealium iQ Tag Management' // the default name for our Service in Usercentrics\n\nvar nameOfVendorOptInArray = globals.nameOfVendorOptInArray || 'missing_opt_in_array_name'\nvar nameOfConsentTypeString = globals.nameOfConsentTypeString || 'missing_consent_type_name'\nvar nameOfImplicitConsentArray = globals.nameOfImplicitConsentArray || 'missing_implicit_queue_array_name'\n\nvar tagBasedMap = globals.tagBasedMap || {}\n\nvar getCurrentConsentDecision = globals.getCurrentConsentDecision || function () { return [] }\nvar getCurrentUsercentricsSettingsId = globals.getCurrentUsercentricsSettingsId || function () { return '' }\n\nvar logger = globals.logger || (window.utag &amp;&amp; window.utag.DB) || function (message) { console.log(message) } // logger function with fallback in case global function is missing\n\n// recheck\nvar currentlyAllowedVendors = getCurrentConsentDecision()\n\n// Add the current ConsentDecision information (allowed Services and consent type) to the UDO for possible use in extensions\nb[nameOfVendorOptInArray] = currentlyAllowedVendors\nb[nameOfConsentTypeString] = currentlyAllowedVendors &amp;&amp; currentlyAllowedVendors.type\n\nvar implicitServices\n\n// only block previous implicit services from reloading if the current consent is explicit\nif (currentlyAllowedVendors.type === 'explicit') {\n  implicitServices = b[nameOfImplicitConsentArray] // use the previously stored array, from the queued event\n}\n\nlogger('Called block logic:\\n\\nAllowed: ' + JSON.stringify(currentlyAllowedVendors, null, 2) + '\\n\\nAlready processed: ' + (implicitServices ? JSON.stringify(implicitServices, null, 2) : '(none)'))\n\nlogger('Map:\\n\\n' + JSON.stringify(map, null, 2) + '\\n\\nActive Usercentrics settingsId: ' + getCurrentUsercentricsSettingsId() + '\\n\\nMap has entry for current settingsId: ' + (typeof map[getCurrentUsercentricsSettingsId()] === 'object' ? 'true' : 'false') + '\\n\\nTag-based map for the active settingsId: ' + JSON.stringify(tagBasedMap, null, 2))\nlogger('Consent confirmed: ' + currentlyAllowedVendors.type + ' : ' + JSON.stringify(currentlyAllowedVendors, null, 2))\n\nvar newCfg = blockTagsBasedOnConsent(tagBasedMap, window.utag.loader.cfg, currentlyAllowedVendors, implicitServices)\n\n// logger('Tag block debug:' + JSON.stringify(newCfg, null, 2))\n\nwindow.utag.loader.cfg = newCfg\n\n/**\n * Blocks tags based on consent by manually setting the 'load' and 'send' flags to 0 for any tags that don't have permission to fire.\n *\n * That logic isn't sufficient to block tracking calls with a 'uids' array (which also circumvents load rules), so additional blocking logic is added in the utag.handler.trigger override.\n * @param {object} tagBasedMap a {@link TagToServiceMap TagToServiceMap}\n * @param {object} configObject the current window.utag.loader.cfg object (which is used to control which tags should load/fire)\n * @param {array} consentedServices a {@link ConsentDecision ConsentDecision}\n * @param {array} alreadyProcessedImplicitServices an array of Service Names that have already been processed, to avoid double-firing those tags.\n */\nfunction blockTagsBasedOnConsent (tagBasedMap, configObject, consentedServices, alreadyProcessedImplicitServices) {\n  // block all tags if the consented services array is missing\n  if (Array.isArray(consentedServices) !== true) {\n    consentedServices = []\n  }\n\n  tagBasedMap = tagBasedMap || {}\n\n  // if the utag template hasn't been edited, this function won't have been overriden, so we gut it\n  // to stop tags from firing\n  var utagFunctionsHaveBeenOverriden = window.utag.handler.trigger.toString().indexOf('tealiumCmpIntegration') !== -1\n  if (utagFunctionsHaveBeenOverriden !== true) {\n    window.utag.handler.trigger = function () {\n      logger('Tags have been disabled because the required utag.loader edit hasn\\'t been done successfully and the tealiumCmpIntegration is active.')\n    }\n    consentedServices = []\n  }\n\n  var deactivatedTags = []\n  // turn the map into an easier-to-query object\n\n  alreadyProcessedImplicitServices = alreadyProcessedImplicitServices || []\n\n  var tiqIsAllowed = tiqServiceName &amp;&amp; consentedServices.indexOf(tiqServiceName) !== -1\n\n  var allTagUids = Object.keys(configObject)\n\n  var assignedServiceName\n  var hasConsent\n\n  // deactivate tags that aren't mapped and consented\n  for (var i = 0; i &lt; allTagUids.length; i++) {\n    hasConsent = false // assume no consent\n\n    assignedServiceName = tagBasedMap[allTagUids[i]] || false\n\n    if (assignedServiceName) {\n      hasConsent = tiqIsAllowed &amp;&amp; consentedServices.indexOf(assignedServiceName) !== -1 &amp;&amp; alreadyProcessedImplicitServices.indexOf(assignedServiceName) === -1\n    }\n\n    if (hasConsent !== true) {\n      // this isn't enough to stop specified tagUids (in the array) from firing by itself\n      configObject[allTagUids[i]].send = 0\n      configObject[allTagUids[i]].load = 0\n      deactivatedTags.push(allTagUids[i])\n    }\n  }\n  logger('Blocked tags: ' + JSON.stringify(deactivatedTags, null, 2) + (tiqIsAllowed ? '' : '\\n\\nAll tags blocked because TealiumIQ isn\\'t allowed to fire.'))\n  return configObject\n}\n","name":"prod"},"3f3ef786b34d6dd716e1812c8b74a7a0e1f05aa5f3230588f6f5bcd00c6c8392":{"code":"// Type your JavaScript code here...","name":"qa","promotedTimestamp":"202010051352","promotedDraftName":"BLANK","promotedBy":"caleb.jaquith@tealium.com"}},"queueSeq":"53","draftSnippets":{"2fa929d49a80e817505e2e615cdf1845c410c53247af9a8075b45620044e4a12":{"updatedBy":"caleb.jaquith@tealium.com","updateDate":"202010051351","creationDate":"202010051351","name":"BLANK","code":"// Type your JavaScript code here..."},"d90fc7fde547e2f883f63469ca5b98f71983b0bc4ca45dc8d0bf67aa99e8adb4":{"name":"extension-2.js","code":"/* global b */\n\n/**\n *  Scope       : All Tags - After Load Rules\n *  Condition   : n/a\n *  Description : CMP 2/2 - After Load Rules component - Prevent tags from firing if they don't have an opt-in in the mapping (or there is no mapping)\n *\n */\n\n/**\n * @module extension-2\n * @description The 'All Tags - After Load Rules' component, responsible for blocking tags if consent is missing or this CMP integration is misconfigured.\n */\n\nvar map = (window.tealiumCmpIntegration &amp;&amp; window.tealiumCmpIntegration.map) || {}\n\n// get settings from CMP 1 extension, shouldn't need to change these\nvar globals = window.tealiumCmpIntegration = window.tealiumCmpIntegration || {}\nvar tiqServiceName = globals.tiqServiceName || 'Tealium iQ Tag Management' // the default name for our Service in Usercentrics\n\nvar nameOfVendorOptInArray = globals.nameOfVendorOptInArray || 'missing_opt_in_array_name'\nvar nameOfConsentTypeString = globals.nameOfConsentTypeString || 'missing_consent_type_name'\nvar nameOfImplicitConsentArray = globals.nameOfImplicitConsentArray || 'missing_implicit_queue_array_name'\n\nvar tagBasedMap = globals.tagBasedMap || {}\n\nvar getCurrentConsentDecision = globals.getCurrentConsentDecision || function () { return [] }\nvar getCurrentUsercentricsSettingsId = globals.getCurrentUsercentricsSettingsId || function () { return '' }\n\nvar logger = globals.logger || (window.utag &amp;&amp; window.utag.DB) || function (message) { console.log(message) } // logger function with fallback in case global function is missing\n\n// recheck\nvar currentlyAllowedVendors = getCurrentConsentDecision()\n\n// Add the current ConsentDecision information (allowed Services and consent type) to the UDO for possible use in extensions\nb[nameOfVendorOptInArray] = currentlyAllowedVendors\nb[nameOfConsentTypeString] = currentlyAllowedVendors &amp;&amp; currentlyAllowedVendors.type\n\nvar implicitServices\n\n// only block previous implicit services from reloading if the current consent is explicit\nif (currentlyAllowedVendors.type === 'explicit') {\n  implicitServices = b[nameOfImplicitConsentArray] // use the previously stored array, from the queued event\n}\n\nlogger('Called block logic:\\n\\nAllowed: ' + JSON.stringify(currentlyAllowedVendors, null, 2) + '\\n\\nAlready processed: ' + (implicitServices ? JSON.stringify(implicitServices, null, 2) : '(none)'))\n\nlogger('Map:\\n\\n' + JSON.stringify(map, null, 2) + '\\n\\nActive Usercentrics settingsId: ' + getCurrentUsercentricsSettingsId() + '\\n\\nMap has entry for current settingsId: ' + (typeof map[getCurrentUsercentricsSettingsId()] === 'object' ? 'true' : 'false') + '\\n\\nTag-based map for the active settingsId: ' + JSON.stringify(tagBasedMap, null, 2))\nlogger('Consent confirmed: ' + currentlyAllowedVendors.type + ' : ' + JSON.stringify(currentlyAllowedVendors, null, 2))\n\nvar newCfg = blockTagsBasedOnConsent(tagBasedMap, window.utag.loader.cfg, currentlyAllowedVendors, implicitServices)\n\n// logger('Tag block debug:' + JSON.stringify(newCfg, null, 2))\n\nwindow.utag.loader.cfg = newCfg\n\n/**\n * Blocks tags based on consent by manually setting the 'load' and 'send' flags to 0 for any tags that don't have permission to fire.\n *\n * That logic isn't sufficient to block tracking calls with a 'uids' array (which also circumvents load rules), so additional blocking logic is added in the utag.handler.trigger override.\n * @param {object} tagBasedMap a {@link TagToServiceMap TagToServiceMap}\n * @param {object} configObject the current window.utag.loader.cfg object (which is used to control which tags should load/fire)\n * @param {array} consentedServices a {@link ConsentDecision ConsentDecision}\n * @param {array} alreadyProcessedImplicitServices an array of Service Names that have already been processed, to avoid double-firing those tags.\n */\nfunction blockTagsBasedOnConsent (tagBasedMap, configObject, consentedServices, alreadyProcessedImplicitServices) {\n  // block all tags if the consented services array is missing\n  if (Array.isArray(consentedServices) !== true) {\n    consentedServices = []\n  }\n\n  tagBasedMap = tagBasedMap || {}\n\n  // if the utag template hasn't been edited, this function won't have been overriden, so we gut it\n  // to stop tags from firing\n  var utagFunctionsHaveBeenOverriden = window.utag.handler.trigger.toString().indexOf('tealiumCmpIntegration') !== -1\n  if (utagFunctionsHaveBeenOverriden !== true) {\n    window.utag.handler.trigger = function () {\n      logger('Tags have been disabled because the required utag.loader edit hasn\\'t been done successfully and the tealiumCmpIntegration is active.')\n    }\n    consentedServices = []\n  }\n\n  var deactivatedTags = []\n  // turn the map into an easier-to-query object\n\n  alreadyProcessedImplicitServices = alreadyProcessedImplicitServices || []\n\n  var tiqIsAllowed = tiqServiceName &amp;&amp; consentedServices.indexOf(tiqServiceName) !== -1\n\n  var allTagUids = Object.keys(configObject)\n\n  var assignedServiceName\n  var hasConsent\n\n  // deactivate tags that aren't mapped and consented\n  for (var i = 0; i &lt; allTagUids.length; i++) {\n    hasConsent = false // assume no consent\n\n    assignedServiceName = tagBasedMap[allTagUids[i]] || false\n\n    if (assignedServiceName) {\n      hasConsent = tiqIsAllowed &amp;&amp; consentedServices.indexOf(assignedServiceName) !== -1 &amp;&amp; alreadyProcessedImplicitServices.indexOf(assignedServiceName) === -1\n    }\n\n    if (hasConsent !== true) {\n      // this isn't enough to stop specified tagUids (in the array) from firing by itself\n      configObject[allTagUids[i]].send = 0\n      configObject[allTagUids[i]].load = 0\n      deactivatedTags.push(allTagUids[i])\n    }\n  }\n  logger('Blocked tags: ' + JSON.stringify(deactivatedTags, null, 2) + (tiqIsAllowed ? '' : '\\n\\nAll tags blocked because TealiumIQ isn\\'t allowed to fire.'))\n  return configObject\n}\n","updatedBy":"caleb.jaquith@tealium.com","versionControl":{"isReadOnly":"true","sourceUrl":"https://github.com/jaquith/usercentrics-integration/blob/release/extensions/extension-2.js","sourceName":"GitHub","lastSyncTimeStamp":"202010080750","accountName":"jaquith","isOutdated":"false","lastSyncSuccess":"true","hashValue":"8da85ba6458591f80d894fdf7ffc0890a66d7594"},"creationDate":"202008131558","updateDate":"202010051351"}}},"labels":""},"13":{"selectedTargets":{"qa":"true","dev":"true","prod":"true"},"sort":"4","notes":"","extType":"Javascript Code","_id":"13","type":"new","blockPubTargetsLogic":"true","labels":"","codeDevData":{"draftSnippets":{"156e808776455eb7fb3231a67b22d1d38ab0ed941db5b8d157735eea6c9da88b":{"name":"Draft 1","code":"// Put this code in a Javascript Code extension scoped to the tag.\nu.callback = function() {\n console.log(&quot;The tag has loaded, now do cool stuff!&quot;);\n}","updatedBy":"caleb.jaquith@tealium.com","updateDate":"202008100854","creationDate":"202008100854"}},"queueSeq":"2","draftSeq":"1"},"initialize":"","advExecOption":"alr","scope":"6","constructor":"","status":"inactive","id":"100040","title":"Callback test"},"14":{"extType":"Javascript Code","_id":"14","sort":"1","notes":"","selectedTargets":{"dev":"true","prod":"true","qa":"true"},"blockPubTargetsLogic":"true","type":"new","constructor":"","scope":"preload","status":"inactive","advExecOption":"alr","labels":"","initialize":"","codeDevData":{"queue4Publish":{"156e808776455eb7fb3231a67b22d1d38ab0ed941db5b8d157735eea6c9da88b":{"queuedTimestamp":"202008191412","queuedBy":"caleb.jaquith@tealium.com","targets":"prod,qa,dev","color":"3"}},"draftSeq":"1","queueSeq":"12","draftSnippets":{"156e808776455eb7fb3231a67b22d1d38ab0ed941db5b8d157735eea6c9da88b":{"code":"// Preloader\n\nwindow.tealiumCmpIntegration = window.tealiumCmpIntegration || {}\nwindow.tealiumCmpIntegration.map = {\n  'Google Analytics': [6, 8, 10],\n  'Mouseflow': [7, 9],\n  'Another Tag': [11]\n}\n\n// if TiQ isn't allowed to fire, no tags will be fired at all, and no cookies will be set\nwindow.tealiumCmpIntegration.tiqServiceName = 'Tealium iQ Tag Management'","name":"Draft 1","creationDate":"202008100949","updateDate":"202008191355","updatedBy":"caleb.jaquith@tealium.com"}}},"title":"CMP Map (inactive to verify behavior if map is missing)","id":"100040"},"15":{"title":"Activate debug mode and add a test variable to utag_data","id":"100040","codeDevData":{"draftSeq":"1","queueSeq":"4","draftSnippets":{"156e808776455eb7fb3231a67b22d1d38ab0ed941db5b8d157735eea6c9da88b":{"updateDate":"202008180724","creationDate":"202008101034","updatedBy":"caleb.jaquith@tealium.com","code":"","name":"Draft 1"}}},"labels":"","initialize":"","constructor":"","scope":"preload","status":"inactive","advExecOption":"alr","type":"new","blockPubTargetsLogic":"true","sort":"0","notes":"","selectedTargets":{"qa":"true","prod":"true","dev":"true"},"extType":"Javascript Code","_id":"15"},"17":{"id":"100040","title":"TEST 1/2","labels":"","codeDevData":{"queueSeq":"6","draftSnippets":{"6c3a4d93e5d76b6b1c0a00bfab0af321b9385601e6c79418fac3a5d10efdc9c9":{"creationDate":"202010051351","updateDate":"202010290903","updatedBy":"caleb.jaquith@tealium.com","versionControl":{"isReadOnly":"true","sourceUrl":"https://github.com/jaquith/usercentrics-integration/blob/test/extensions/extension-1.js","lastSyncTimeStamp":"202010290903","sourceName":"GitHub","accountName":"jaquith","lastSyncSuccess":"true","isOutdated":"false","hashValue":"a33123fde5698c23d941d5c8fdf32dff4bf62e6f"},"code":"/**\n *  Scope       : Pre Loader\n *  Condition   : n/a\n *  Description : CMP 1/2 - Preloader component - prevent TiQ from loading if no consent, queue implicitly consented events to retrigger (for new tags only) if explicit decision is made.\n */\n\n/**\n  * @module extension-1\n  *\n  * @description The 'Pre Loader' extension component of the CMP integration, responsible for stopping Tealium iQ from loading/running as appropriate, and making certain\n  * window-scoped functions available to the other components.\n  */\n\n// Tealium iQ runs Pre Loader extensions in global scope, which would make all variables global. We don't want to do that.\n(function avoidGlobalScopeUnlessExplicit () {\n  // set names for key objects and variables to make them easy to change if needed\n\n  var version = 'v0.10-beta'\n\n  // for the consent information in the b object\n  var nameOfVendorOptInArray = 'usercentrics_services_with_consent'\n  var nameOfConsentTypeString = 'usercentrics_consent_type'\n\n  // for the name in the queue\n  var nameOfImplicitConsentArray = '_usercentrics_services_already_processed'\n\n  // name to use when calling utag.handler.trigger to indicate a consent polling call\n  var nameOfConsentPollingEvent = 'tiq_usercentrics_consent_polling'\n\n  var consentTimeoutInterval = 400 // setTimeout interval in MS - rate to poll for new (explicit) consent decision or correctly formed object\n\n  // check for the Tealium Debug cookie, see https://docs.tealium.com/platforms/javascript/debugging/\n  var tiqInDebugMode = /utagdb=true/.test(document.cookie)\n  var tealiumEnvironment = getTealiumEnvironment() || 'prod' // fall back to prod (stops logging) if something goes wrong with the function\n\n  /**\n   * A window-scoped (global) object used to expose selected functionality.\n   *\n   * @namespace tealiumCmpIntegration\n   * @type {object}\n   * @memberof! &lt;global&gt;\n   */\n  window.tealiumCmpIntegration = window.tealiumCmpIntegration || {}\n\n  /**\n   * The name of the CMP (&quot;Usercentrics Vanilla App&quot; in this case).\n   * @name cmpName\n   * @type {string}\n   * @memberof! tealiumCmpIntegration\n   */\n  window.tealiumCmpIntegration.cmpName = 'Usercentrics Vanilla App'\n\n  /**\n   * A map of Usercentrics Data Processing Services to arrays of Tealium iQ tag UIDs, a {@link ServiceToTagMap ServiceToTagMap}\n   * @name map\n   * @type {object}\n   * @memberof! tealiumCmpIntegration\n   */\n  var map = window.tealiumCmpIntegration.map || {}\n\n  /**\n   * A map of Usercentrics Data Processing Services to arrays of Tealium iQ tag UIDs, a {@link TagToServiceMap TagToServiceMap}\n   * @name tagBasedMap\n   * @type {object}\n   * @memberof! tealiumCmpIntegration\n   */\n  generateTagBasedMap() // populates the window-level object for you as well\n\n  /**\n   * The Service Name for Tealium iQ in Usercentrics (used to decide if the TMS is allowed to run).  Uses the Usercentrics standard name if not provided.\n   * @name tiqServiceName\n   * @type {object}\n   * @memberof! tealiumCmpIntegration\n   * @default 'Tealium iQ Tag Management'\n   * @example\nwindow.tealiumCmpIntegration = window.tealiumCmpIntegration || {}\nwindow.tealiumCmpIntegration.tiqServiceName = &quot;Tealium iQ Tag Management&quot;\n   */\n  var tiqServiceName = window.tealiumCmpIntegration.tiqServiceName || 'Tealium iQ Tag Management' // use the standard name here if not set\n\n  /**\n   * The current version designation.\n   * @name version\n   * @type {string}\n   * @memberof! tealiumCmpIntegration\n   */\n  window.tealiumCmpIntegration.version = version\n\n  /**\n   * A [logger helper function]{@link module:extension-1~logger}, to help Tealium iQ users understand and troubleshoot this CMP integration without unneeded logging in production.\n   * @name logger\n   * @type {function}\n   * @memberof! tealiumCmpIntegration\n   */\n  window.tealiumCmpIntegration.logger = logger\n\n  /**\n   * A [helper function]{@link module:extension-1~getCurrentConsentDecision} that returns the current [ConsentDecision]{@link ConsentDecision}.\n   * @name getCurrentConsentDecision\n   * @type {function}\n   * @memberof! tealiumCmpIntegration\n   */\n  window.tealiumCmpIntegration.getCurrentConsentDecision = getCurrentConsentDecision\n\n  /**\n   * A [helper function]{@link module:extension-1~getCurrentUsercentricsSettingsId} that returns the current Usercentrics settingsId.\n   * @name getCurrentUsercentricsSettingsId\n   * @type {function}\n   * @memberof! tealiumCmpIntegration\n   */\n  window.tealiumCmpIntegration.getCurrentUsercentricsSettingsId = getCurrentUsercentricsSettingsId\n\n  /**\n   * Records the status of the [noview]{@link https://docs.tealium.com/platforms/javascript/settings/#noview} setting on page load.\n   * @name isNoviewSet\n   * @type {boolean}\n   * @memberof! tealiumCmpIntegration\n   */\n  window.tealiumCmpIntegration.isNoviewSet = window.utag_cfg_ovrd &amp;&amp; window.utag_cfg_ovrd.noview === true\n\n  /**\n   * The name to use for the [ConsentDecision]{@link ConsentDecision} array when adding it to Tealium's b object on each event.\n   * @name nameOfVendorOptInArray\n   * @type {string}\n   * @memberof! tealiumCmpIntegration\n   */\n  window.tealiumCmpIntegration.nameOfVendorOptInArray = nameOfVendorOptInArray\n\n  /**\n   * The name to use for the current [ConsentDecision]{@link ConsentDecision}'s 'type' attribute when adding it to Tealium's b object on each event.\n   * @name nameOfConsentTypeString\n   * @type {string}\n   * @memberof! tealiumCmpIntegration\n   */\n  window.tealiumCmpIntegration.nameOfConsentTypeString = nameOfConsentTypeString\n\n  /**\n   * The name to use for the array of implicit tags (which have already been fired) in the 'data' property of {@link QueuedEvent QueuedEvent} objects.\n   * @name nameOfImplicitConsentArray\n   * @type {string}\n   * @memberof! tealiumCmpIntegration\n   */\n  window.tealiumCmpIntegration.nameOfImplicitConsentArray = nameOfImplicitConsentArray\n\n  /**\n   * A [helper function]{@link module:extension-1~overrideUtagFunctions} that overrides certain utag functions to allow tags to be blocked based on CMP response.\n   *\n   * Must be called directly after the '##UTGEN##' reference by [editing]{@link https://community.tealiumiq.com/t5/iQ-Tag-Management/Managing-Tag-Templates/ta-p/21713} the 'utag loader' template, as shown in the example.\n   * @name overrideUtagFunctions\n   * @type {function}\n   * @memberof! tealiumCmpIntegration\n   * @example\n// ... utag loader template ...\n\n##UTGEN##\n// override two utag functions for the Usercentrics CMP Integration, to allow tags to be blocked as needed\nwindow.tealiumCmpIntegration &amp;&amp; window.tealiumCmpIntegration.overrideUtagFunctions &amp;&amp; window.tealiumCmpIntegration.overrideUtagFunctions()\n\n// ... utag loader template continues...\n\n   */\n  window.tealiumCmpIntegration.overrideUtagFunctions = overrideUtagFunctions\n\n  /**\n   * A queue for any events that Tealium iQ processes with IMPLICIT consent (to allow those events to be re-processed for new Services in the event of an EXPLICIT consent choice by the user).\n   *\n   * Each element in the queue is a [QueuedEvent]{@link QueuedEvent}\n   * @name implicitEventQueue\n   * @type {array}\n   * @memberof! tealiumCmpIntegration\n   */\n  window.tealiumCmpIntegration.implicitEventQueue = window.tealiumCmpIntegration.implicitEventQueue || []\n\n  /**\n   * A queue for any events that are triggered before Tealium iQ AND Usercentrics have both loaded.\n   *\n   * Each element in the queue is a [QueuedEvent]{@link QueuedEvent}\n   * @name earlyEventQueue\n   * @type {array}\n   * @memberof! tealiumCmpIntegration\n   */\n  window.tealiumCmpIntegration.earlyEventQueue = window.tealiumCmpIntegration.earlyEventQueue || []\n\n  /**\n   * Allows us to make sure we don't log certain messages more than once, especially useful while polling to avoid overwhelming the user.\n   * @function messageNotLoggedYet\n   * @param {*} messageId a string or number to uniquely identify a message for the purposes of deduplication\n   * @returns {boolean} 'true' if the message hasn't been logged yet (and should be logged), otherwise 'false'\n   */\n  var alreadyLoggedMessageIds = {}\n  function messageNotLoggedYet (messageId) {\n    var output = false\n    if (typeof alreadyLoggedMessageIds[messageId] === 'undefined') {\n      alreadyLoggedMessageIds[messageId] = true\n      output = true\n    }\n    return output\n  }\n\n  // if noload is set to 'true', don't interfere, just return to exit this function and allow that setting to stop TiQ load as usual.\n  if (window.utag_cfg_ovrd &amp;&amp; window.utag_cfg_ovrd.noload === true) return false\n\n  logger('CMP integration active - Usercentrics/TiQ' + (tiqInDebugMode ? &quot;\\n\\nDEBUGGING TIP: Use /SENDING|\\\\*\\\\*\\\\*\\\\*/ in the browser console as the 'filter' to show only CMP and tag send notifications.&quot; : '\\n\\nActivate TiQ Debug Mode for more details: https://docs.tealium.com/platforms/javascript/debugging/'), true)\n  var cmpResponse = cmpConsentCheck()\n  // core business/GDPR logic, decides if TiQ should load at all\n  reactToCmpResponse(cmpResponse)\n\n  /**\n   * The core CMP integration logic, which decides if Tealium iQ should be allowed to run, or if it needs to be stopped\n   * until an understandable response that includes permission for Tealium iQ to run is found.\n   *\n   * @function reactToCmpResponse\n   * @param {object} cmpResponse The response from the Usercentrics Vanilla App\n   */\n  function reactToCmpResponse (cmpResponse) {\n    var usercentricsFound = typeof cmpResponse === 'object'\n    var foundWellFormedConsentDecision = checkForWellFormedDecision(cmpResponse)\n    var tagBasedMap = generateTagBasedMap()\n    var foundMapEntryForActiveSetting = Object.keys(tagBasedMap).length &gt; 0\n    var foundExplicitConsent = checkForExplicitConsentDecision(cmpResponse)\n    var tiqIsAllowedToFire = checkForTiqConsent(cmpResponse)\n    var tiqIsLoaded = window.utag &amp;&amp; window.utag.handler &amp;&amp; window.utag.handler.iflag === 1\n\n    if (!usercentricsFound) {\n      /**\n       * CASE A1: no Usercentrics CMS found\n       *\n       * STOP and fire nothing at all\n       * RETRY after a delay\n       */\n      if (messageNotLoggedYet(1)) logger('No Usercentrics CMP found on page.\\n\\nStopping TiQ (no cookies set/removed, no tags fired).\\n\\nPolling for changes.')\n      window.setTimeout(recheckForCmpAndConsent, consentTimeoutInterval)\n      stopTiq()\n    } else if (!foundMapEntryForActiveSetting) {\n      /**\n        * CASE A7: No map found for the current settingsId\n        *\n        * STOP and fire nothing at all. Do not retry.\n        */\n      if (messageNotLoggedYet(2)) logger('No map found for current Usercentrics Setting ID.\\n\\nStopping TiQ (no cookies set/removed, no tags fired).\\n\\nNo retries.')\n      stopTiq()\n    } else if (!foundWellFormedConsentDecision) {\n      /**\n       * CASE A2: Usercentrics CMS found but consent response wasn't well-formed/complete/understandable\n       *\n       * STOP and fire nothing at all\n       * RETRY after a delay\n       */\n      if (messageNotLoggedYet(3)) logger('Found Usercentrics CMP and got response, but didn\\'t understand the response.\\n\\nStopping TiQ (no cookies set/removed, no tags fired).\\n\\nPolling for changes.')\n      window.setTimeout(recheckForCmpAndConsent, consentTimeoutInterval)\n      stopTiq()\n    } else if (!tiqIsAllowedToFire) {\n      /**\n       * CASE A3: Usercentrics CMS found and consent response was well-formed, BUT TiQ didn't have an opt-in\n       *\n       * STOP and fire nothing at all\n       * RETRY after a delay\n       */\n      if (messageNotLoggedYet(4)) logger('Found Usercentrics CMP and got well-formed response, but TiQ isn\\'t allowed to run based on the response.\\n\\nStopping TiQ (no cookies set/removed, no tags fired).\\n\\nPolling for changes.')\n      window.setTimeout(recheckForCmpAndConsent, consentTimeoutInterval)\n      stopTiq()\n    } else if (!foundExplicitConsent) {\n      /**\n       * CASE A4: Usercentrics CMS found AND response was understandable (AND includes an implicit TiQ consent), BUT the user hasn't made an explicit decision yet\n       *\n       * ALLOW TO LOAD for any 'default opt-in' tags (filter logic in Extension B)\n       * RETRY after a delay (in case there's an explicit decision, since implicit decisions usually mean the prompt is displayed)\n       */\n      if (messageNotLoggedYet(5)) logger('Found Usercentrics CMP and got well-formed IMPLICIT response which includes TiQ.\\n\\nAllowing certain tags to fire based on IMPLICIT consent.\\n\\nPolling for changes.')\n      window.setTimeout(recheckForCmpAndConsent, consentTimeoutInterval)\n      if (tiqIsLoaded) {\n        processEarlyQueue()\n      } else {\n        window.setTimeout(recheckForCmpAndConsent, consentTimeoutInterval)\n      }\n      triggerOrQueue()\n    } else if (foundExplicitConsent) {\n      /**\n       * CASE A5: Usercentrics CMS found AND response was understandable, AND the user has made an explicit consent decision AND TiQ is allowed\n       *\n       * ALLOW TO LOAD for any opted-in tags (filter logic in Extension B), do not retry.\n       */\n      if (messageNotLoggedYet(6)) logger('Found Usercentrics CMP and got well-formed EXPLICIT response which includes TiQ.\\n\\nAllowing certain tags to fire based on EXPLICIT consent.\\n\\nNo further polling.')\n      // only call if we've been polling (on initial load, it will load automatically)\n      if (tiqIsLoaded) {\n        processEarlyQueue()\n        processImplicitQueue()\n      } else {\n        window.setTimeout(recheckForCmpAndConsent, consentTimeoutInterval)\n      }\n      triggerOrQueue()\n    } else {\n      /**\n        * CASE A6: Something went wrong with this extension.\n        *\n        * STOP and fire nothing at all. Do not retry.\n        */\n      if (messageNotLoggedYet(7)) logger('Something unexpected went wrong.\\n\\nStopping TiQ (no cookies set/removed, no tags fired).\\n\\nNo retries.')\n      stopTiq()\n    }\n  }\n\n  /**\n   * Override utag.loader.initdata and utag.handler.trigger to allow Tealium iQ Tags to be blocked if the user hasn't consented.\n   *\n   * @function overrideUtagFunctions\n   * @returns {boolean} 'true' if the function was overridden successfully by this request, 'false' if not (because it was already overridden)\n   */\n  function overrideUtagFunctions () {\n    // don't override more than once, assume that if one function has been overridden, both have\n    if (window.utag.handler.trigger.toString().indexOf('tealiumCmpIntegration') !== -1) {\n      return true\n    }\n\n    // the initial view is handled differently than subsequent events\n    // this is safe to to override even if noview is set (because it will never be called in that case)\n    window.utag.loader.initdata_old = window.utag.loader.initdata\n    window.utag.loader.initdata = newUtagLoaderInitdata\n\n    window.utag.handler.trigger_old = window.utag.handler.trigger\n    window.utag.handler.trigger = newUtagHandlerTrigger\n    logger('Overrode utag functions!')\n\n    if (window.utag.handler.trigger.toString().indexOf('tealiumCmpIntegration') !== -1) {\n      return true\n    }\n\n    return false\n  }\n\n  /**\n   * An overridden version of the Tealium iQ function utag.loader.initdata.\n   *\n   * Calls the original function, respects possible noview settings, rechecks the user consent, and calls queueEventWithoutFiringImplicitServices\n   * if only an IMPLICIT consent is found (after recording the IMPLICIT services, to avoid double-firing).\n   *\n   * That same event can then be re-processed for any new Services if an EXPLICIT consent decision later made.\n   *\n   * @function newUtagLoaderInitdata\n   */\n  function newUtagLoaderInitdata () {\n    window.utag.loader.initdata_old()\n    // make sure we don't queue this initial page load twice, and respect the configured noview setting\n    if (!window.tealiumCmpIntegration.isNoviewSet &amp;&amp; !window.tealiumCmpIntegration.alreadyFiredInitialViewEvent) {\n      window.tealiumCmpIntegration.alreadyFiredInitialViewEvent = true\n      var consentedServices = getCurrentConsentDecision()\n      if (consentedServices.type === 'implicit') {\n        window.tealiumCmpIntegration.implicitServices = consentedServices\n        // we don't need to fire implicit services in this case, because TiQ's loading process will fire them\n        queueEventWithoutFiringImplicitServices({\n          event: 'view',\n          data: window.utag.handler.C(window.utag.data)\n        })\n      }\n    }\n  }\n\n  /**\n   * Refresh [tealiumCmpIntegration.tagBasedMap]{@link tealiumCmpIntegration.tagBasedMap} and return that new map, helps smooth out any timing issues between Usercentrics and Tealium iQ load.\n   *\n   * @function generateTagBasedMap\n   * @returns a [TagToServiceMap]{@link TagToServiceMap}\n   */\n  function generateTagBasedMap () {\n    var tagBasedMap = getTagBasedMap(map)\n    window.tealiumCmpIntegration.tagBasedMap = tagBasedMap\n    return tagBasedMap\n  }\n\n  /**\n   * Tealium iQ's utag.handler.trigger normally causes tags to fire. For this integration, we override that function to support blocking tags without consent.\n   *\n   * @function newUtagHandlerTrigger\n   *\n   * @param {*} a can be an object or a string\n   * @param {*} b\n   * @param {*} c\n   */\n  function newUtagHandlerTrigger (a, b, c) {\n    /**\n     * Trigger CASES (utag.handler.trigger override)\n     *\n     * We need to queue the events if we only have implicit consent, to allow a selective retrigger if/when we get an explicit decision.\n     */\n    var isPureConsentEvent = (a === nameOfConsentPollingEvent &amp;&amp; !b &amp;&amp; !c)\n    var isNoviewSet = window.tealiumCmpIntegration.isNoviewSet || true // assume noview if something went wrong with the global, to avoid firing tracking in error\n\n    var consentedServices = getCurrentConsentDecision()\n    var consentType = (consentedServices &amp;&amp; consentedServices.type) || 'none'\n\n    var isUsercentricsReady = consentType === 'implicit' || consentType === 'explicit'\n    var isTealiumReady = window.utag &amp;&amp; window.utag.handler &amp;&amp; window.utag.handler.iflag === 1\n\n    if (!isPureConsentEvent) {\n      logger('utag.handler.trigger called with:\\n\\n' + JSON.stringify(arguments, null, 2))\n    }\n\n    if (!isUsercentricsReady &amp;&amp; !isTealiumReady) {\n      consentedServices.type = 'tealium-and-usercentrics-loading'\n      logger('Waiting for Usercentrics and Tealium to be ready, queueing early event.')\n      queueEarlyEvent(a, b, c)\n      return false\n    } else if (!isUsercentricsReady) {\n      consentedServices.type = 'usercentrics-loading'\n      logger('Usercentrics is still loading, queueing early event')\n      queueEarlyEvent(a, b, c)\n      return false\n    } else if (!isTealiumReady) {\n      consentedServices.type = 'tealium-still-loading'\n      logger('Tealium iQ is still loading, queueing early event')\n      queueEarlyEvent(a, b, c)\n      return false\n    }\n\n    // if an array of tagUids is passed, that forces them to fire regardless of load rules\n    // or consent, so we need to filter that array before allowing it to be processed\n    var hasTagUidArray = c &amp;&amp; typeof c === 'object' &amp;&amp; c.uids &amp;&amp; c.uids &amp;&amp; window.utag.ut.typeOf(c.uids) === 'array'\n    var uidMap = generateTagBasedMap()\n    var allowedTagUids = []\n    var blockedTagUids = []\n    var serviceName\n    var tagUid\n    if (hasTagUidArray) {\n      for (var i = 0; i &lt; c.uids.length; i++) {\n        tagUid = c.uids[i]\n        serviceName = uidMap[tagUid] || '(missing)'\n        // only push consented services into the new array\n        if (consentedServices.indexOf(serviceName) !== -1) {\n          allowedTagUids.push(tagUid)\n        } else {\n          blockedTagUids.push(tagUid)\n        }\n      }\n      // replace the original with the filtered array (can also be empty, if none of them were allowed)\n      logger('Call included tagUid array:\\n\\n' + JSON.stringify(c.uids) + '\\n\\nwhich was replaced by the filtered version:\\n\\n' + JSON.stringify(allowedTagUids))\n      c.originalUids = c.uids.slice() // make a shallow copy\n      c.uids = allowedTagUids\n      c.blockedTagUids = blockedTagUids\n    }\n\n    if (consentType === 'explicit') {\n      /**\n       * CASE T2: expected globals are populated, consent is EXPLICIT\n       *\n       * FIRE allowed tags (explicit)\n       * utag.handler.trigger override PROCESSES the queue, which will include any queued events from CASE A4, making sure not to re-fire any default\n       *   opt-in tags that were already fired for the queued events\n       */\n      // make sure TiQ loads\n      processEarlyQueue()\n      processImplicitQueue()\n      triggerTiqLoad()\n      // fire the current event if it's not just a polling event\n      if (!isPureConsentEvent) {\n        return window.utag.handler.trigger_old(a, b, c)\n      }\n    } else if (consentType === 'implicit') {\n      /**\n       * CASE T3: expected globals are populated, consent is IMPLICIT\n       *\n       * FIRE allowed tags (implicit)\n       * utag.handler.trigger override KEEPS a queue/record that includes\n       *  - the event(s) that were processed based on implicit consent\n       *  - which tags were allowed to process each event (are set to implicit opt-in)\n       */\n      processEarlyQueue()\n      // fire the initial view if appropriate, and queue it\n      triggerTiqLoad()\n      window.tealiumCmpIntegration.implicitServices = consentedServices\n\n      // queue the initial 'view' on pageload if appropriate\n      if (!isNoviewSet &amp;&amp; isTealiumReady &amp;&amp; !window.tealiumCmpIntegration.alreadyFiredInitialViewEvent) {\n        window.tealiumCmpIntegration.alreadyFiredInitialViewEvent = true\n        queueEventAndFireImplicitServices('view', window.utag.handler.C(window.utag.data))\n      }\n      // queue the current event if it exists (and this isn't just consent polling)\n      if (!isPureConsentEvent) {\n        return queueEventAndFireImplicitServices(a, b, c)\n      }\n    } else if (consentType === 'missing-map') {\n      logger('Something went wrong - all tags were blocked because no consent map was found for the active setting ID.')\n      return false\n    } else if (consentType === 'missing-tiq-consent') {\n      logger('Something went wrong - all tags were blocked because no consent was found for &quot;' + tiqServiceName + '&quot;, configured Tealium iQ name.\\n\\nConsent found: ' + JSON.stringify(consentedServices, null, 2))\n      return false\n    } else {\n      /**\n       * CASE T1: expected variables not populated (misconfiguration/error case)\n       *\n       * STOP and fire nothing at all. Do not retry or queue the event.\n       */\n      logger('Something went wrong - all tags were blocked because the consent response was not understood.')\n      return false\n    }\n  }\n\n  /**\n   * Process any queued tracking events from [the early event queue]{@link tealiumCmpIntegration.earlyEventQueue} (can include pageviews) for any currently-consented Services.\n   *\n   * Intended to be called first understandable implicit consent.\n   *\n   * @function processEarlyQueue\n   */\n  function processEarlyQueue () {\n    var queuedEvent\n    window.tealiumCmpIntegration.earlyEventQueue = window.tealiumCmpIntegration.earlyEventQueue || []\n    while (window.tealiumCmpIntegration.earlyEventQueue.length &gt; 0) {\n      // process past events\n      queuedEvent = window.tealiumCmpIntegration.earlyEventQueue.shift()\n      logger('Processing queued early event for currently consented tags: ' + JSON.stringify(queuedEvent, null, 2))\n      window.utag.track(queuedEvent)\n    }\n  }\n\n  /**\n   * Process any queued tracking events from [the global queue]{@link tealiumCmpIntegration.implicitEventQueue} (can include pageviews) for any newly-consented Services.\n   *\n   * Intended to be called on new EXPLICIT consent decision - queued events have already had IMPLICTLY consented tags fired, so those need to be excluded.\n   *\n   * @function processImplicitQueue\n   */\n  function processImplicitQueue () {\n    var alreadyLogged = false\n    var queuedEvent\n    window.tealiumCmpIntegration.implicitEventQueue = window.tealiumCmpIntegration.implicitEventQueue || []\n    while (window.tealiumCmpIntegration.implicitEventQueue.length &gt; 0) {\n      if (!alreadyLogged) {\n        alreadyLogged = true\n        logger('Explicit consent tracking request received - processing past implicitly tracked events (' + window.tealiumCmpIntegration.implicitEventQueue.length + ') for any new explicit tags.')\n      }\n      // process past events\n      queuedEvent = window.tealiumCmpIntegration.implicitEventQueue.shift()\n      logger('Triggering event for explicitly-consented tags: ' + JSON.stringify(queuedEvent))\n      window.utag.track(queuedEvent)\n    }\n  }\n\n  /**\n   * Queue a [tracking event]{@link QueuedEvent} in [the early queue]{@link tealiumCmpIntegration.earlyEventQueue}, without firing any tags.\n   *\n   * Intended to be called for events that triggered before we get an understandable response from Usercentrics.\n   *\n   * @function queueEarlyEvent\n   * @param {*} a the 'a' argument from utag.handler.trigger\n   * @param {*} b the 'b' argument from utag.handler.trigger\n   * @param {*} c the 'c' argument from utag.handler.trigger\n   *\n   */\n  function queueEarlyEvent (a, b, c) {\n    a = a || {}\n\n    // make a copy, in case shared objects are used (like utag_data, or a similar global) - snapshot those\n    if (typeof b === 'object') {\n      b = JSON.parse(JSON.stringify(b))\n    }\n    // convert to a more standard format\n    if (typeof a === 'string') {\n      a = { event: a, data: b || {}, cfg: c }\n    }\n\n    // if there's a tagUid array, don't queue the already-fired tags - instead, swap that with any blocked tags\n    if (a &amp;&amp; a.cfg &amp;&amp; window.utag.ut.typeOf(a.cfg.uids) === 'array') {\n      a.cfg.uids = a.cfg.blockedTagUids.slice()\n    }\n\n    // nothing will be allowed to fire\n    a.data[nameOfImplicitConsentArray] = []\n\n    window.tealiumCmpIntegration.earlyEventQueue = window.tealiumCmpIntegration.earlyEventQueue || []\n    window.tealiumCmpIntegration.earlyEventQueue.push(a)\n    logger('Queued early event!')\n  }\n\n  /**\n   * Queue a [tracking event]{@link QueuedEvent} in [the global queue]{@link tealiumCmpIntegration.implicitEventQueue}, without firing any implictly consented Services.\n   *\n   * Intended to be called for the initial pageview on load, since the load process will have already fired the implicit services.\n   *\n   * @function queueEventWithoutFiringImplicitServices\n   * @param {*} a the 'a' argument from utag.handler.trigger\n   * @param {*} b the 'b' argument from utag.handler.trigger\n   * @param {*} c the 'c' argument from utag.handler.trigger\n   *\n   */\n  function queueEventWithoutFiringImplicitServices (a, b, c) {\n    a = a || {}\n\n    // make a copy, in case shared objects are used (like utag_data, or a similar global) - snapshot those\n    if (typeof b === 'object') {\n      b = JSON.parse(JSON.stringify(b))\n    }\n    // convert to a more standard format\n    if (typeof a === 'string') {\n      a = { event: a, data: b || {}, cfg: c }\n    }\n\n    // if there's a tagUid array, don't queue the already-fired tags - instead, swap that with any blocked tags\n    if (a &amp;&amp; a.cfg &amp;&amp; window.utag.ut.typeOf(a.cfg.uids) === 'array') {\n      a.cfg.uids = a.cfg.blockedTagUids.slice()\n    }\n\n    a.data[nameOfImplicitConsentArray] = window.tealiumCmpIntegration.implicitServices || []\n\n    window.tealiumCmpIntegration.implicitEventQueue = window.tealiumCmpIntegration.implicitEventQueue || []\n    window.tealiumCmpIntegration.implicitEventQueue.push(a)\n  }\n\n  /**\n   * Queue a [tracking event]{@link QueuedEvent} in [the global queue]{@link tealiumCmpIntegration~implicitEventQueue}, without firing any implictly consented Services.\n   *\n   * Intended to be called for all events other than the initial page load.\n   *\n   * @function queueEventAndFireImplicitServices\n   * @param {*} a the 'a' argument from utag.handler.trigger\n   * @param {*} b the 'b' argument from utag.handler.trigger\n   * @param {*} c the 'c' argument from utag.handler.trigger\n   *\n   */\n  function queueEventAndFireImplicitServices (a, b, c) {\n    // fire the implicit tags\n    window.utag.handler.trigger_old(a, b, c)\n    logger('Implicit consent tracking request fired (or queued, if utag hasn\\'t loaded).')\n    return queueEventWithoutFiringImplicitServices(a, b, c)\n  }\n\n  /**\n   * Generate a {@link TagToServiceMap TagToServiceMap} based on a {@link ServiceToTagMap ServiceToTagMap}\n   *\n   * @function getTagBasedMap\n   * @param {object} map a {@link ServiceToTagMap ServiceToTagMap} object\n   * @return {object} a {@link TagToServiceMap TagToServiceMap}\n   */\n  function getTagBasedMap (map) {\n    // generate a lookup based on the tagUid\n    if (typeof map !== 'object') return {}\n    var settingsId = getCurrentUsercentricsSettingsId() || ''\n    if (typeof settingsId !== 'string' || settingsId === '') return {}\n    var settingSpecificMap = map[settingsId] || {}\n    var serviceNames = Object.keys(settingSpecificMap)\n    var uidMap = {}\n    for (var i = 0; i &lt; serviceNames.length; i++) {\n      for (var j = 0; j &lt; settingSpecificMap[serviceNames[i]].length; j++) {\n        uidMap[settingSpecificMap[serviceNames[i]][j]] = serviceNames[i]\n      }\n    }\n    return uidMap\n  }\n\n  /**\n   * Get the current Usercentrics settingsId from the page.\n   *\n   * @returns {string} the Usercentrics settingsId, defaults to an empty string if none is found\n   */\n  function getCurrentUsercentricsSettingsId () {\n    return (window.usercentrics &amp;&amp; window.usercentrics.settingsId) || ''\n  }\n\n  /**\n   * Trigger the core logic with an up-to-date array of objects returned by calling [usercentrics.getConsents]{@link https://docs.usercentrics.com/#/?id=getconsents}\n   * @function recheckForCmpAndConsent\n   */\n  function recheckForCmpAndConsent () {\n    var newConsentResponse = cmpConsentCheck()\n    reactToCmpResponse(newConsentResponse)\n  }\n\n  /**\n   * Call [usercentrics.getConsents]{@link https://docs.usercentrics.com/#/?id=getconsents} to get the current consent decision.\n   * @function cmpConsentCheck\n   */\n  function cmpConsentCheck () {\n    if (!window.usercentrics || typeof window.usercentrics.getConsents !== 'function') return false\n    var cmpConsentArray = window.usercentrics.getConsents()\n    return cmpConsentArray\n  }\n\n  /**\n   * Indicates if Usercentrics has loaded and returned a well-formed indication of user consent.\n   * @function checkForWellFormedDecision\n   * @param cmpConsentArray the array of objects returned by [usercentrics.getConsents]{@link https://docs.usercentrics.com/#/?id=getconsents}.\n   * @returns {boolean} 'true' if the consent decision is well-formed, otherwise 'false'\n   */\n  function checkForWellFormedDecision (cmpConsentArray) {\n    // treat things we don't understand as an opt-out\n    if (toString.call(cmpConsentArray) !== '[object Array]') return false\n    // use the first entry as a proxy for all\n    if (cmpConsentArray &amp;&amp; cmpConsentArray[0] &amp;&amp; typeof cmpConsentArray[0].dataProcessingService === 'string') {\n      return true\n    }\n    return false\n  }\n\n  /**\n   * Indicates if the user has made an EXPLICIT decision\n   * @function checkForExplicitConsentDecision\n   * @param cmpConsentArray the array of objects returned by [usercentrics.getConsents]{@link https://docs.usercentrics.com/#/?id=getconsents}.\n   * @returns {boolean} 'true' if the consent decision is EXPLICIT otherwise 'false'\n   */\n  function checkForExplicitConsentDecision (cmpConsentArray) {\n    // treat things we don't understand as an opt-out\n    if (toString.call(cmpConsentArray) !== '[object Array]') return false\n    // use the first entry as a proxy for all\n    if (cmpConsentArray &amp;&amp; cmpConsentArray[0] &amp;&amp; cmpConsentArray[0].updatedBy === 'explicit') {\n      return true\n    }\n    return false\n  }\n\n  /**\n   * Indicates if Tealium iQ has permission to run (and fire tags).\n   * @function checkForTiqConsent\n   * @param cmpConsentArray the array of objects returned by [usercentrics.getConsents]{@link https://docs.usercentrics.com/#/?id=getconsents}.\n   * @returns {boolean} 'true' if TiQ is allowed to run, otherwise 'false'\n   */\n  function checkForTiqConsent (cmpConsentArray) {\n    var foundOptIn = false\n    // treat things we don't understand as an opt-out\n    if (toString.call(cmpConsentArray) !== '[object Array]') return false\n    // check vendors if there's an object, look for at least one\n    cmpConsentArray.forEach(function (tagInfo) {\n      if (tagInfo.consentStatus === true &amp;&amp; tagInfo.dataProcessingService === tiqServiceName) {\n        foundOptIn = true\n      }\n    })\n    return foundOptIn\n  }\n\n  /**\n   * Create an instance of\n   * @param {array} cmpConsentArray the array of objects returned by calling [usercentrics.getConsents]{@link https://docs.usercentrics.com/#/?id=getconsents}\n   */\n  function getVendorConsentsFromCmpConsentArray (cmpConsentArray) {\n    var vendorArray = []\n\n    var isWellFormed = checkForWellFormedDecision(cmpConsentArray)\n\n    if (!isWellFormed) {\n      vendorArray.type = 'missing-well-formed-response'\n      return []\n    }\n\n    var tagBasedMap = generateTagBasedMap()\n\n    // if there is no mapping for the settings id, we need to change the console output\n    var currentSettingsIdHasMapping = (typeof tagBasedMap === 'object' &amp;&amp; Object.keys(tagBasedMap).length &gt; 0)\n\n    if (!currentSettingsIdHasMapping) {\n      vendorArray.type = 'missing-map'\n      return []\n    }\n\n    cmpConsentArray &amp;&amp; cmpConsentArray.forEach(function (tagConsent) {\n      if (tagConsent.consentStatus === true) {\n        vendorArray.push(tagConsent.dataProcessingService)\n      }\n    })\n    vendorArray.type = checkForExplicitConsentDecision(cmpConsentArray) ? 'explicit' : 'implicit'\n\n    if (checkForTiqConsent(cmpConsentArray) === false) {\n      // change the consent type, but leave the array for debugging purposes\n      vendorArray.type = 'missing-tiq-consent'\n    }\n\n    return vendorArray\n  }\n\n  /**\n   * Get the current consent decision from the CMP for the active Setting\n   * @function getCurrentConsentDecision\n   * @returns a {@link ConsentDecision ConsentDecision}\n   */\n  function getCurrentConsentDecision () {\n    var freshConsent = cmpConsentCheck()\n\n    return getVendorConsentsFromCmpConsentArray(freshConsent)\n  }\n\n  /**\n   *  A conditional logging function - we can't use utag.DB directly because some of our logic needs to be preloader, but we can mimic the same logic so that our logging only displays when TiQ is in debug mode and/or not in Prod, or is explicitly forced.\n   * @function logger\n   * @param {string} message the message to be conditionally shown\n   * @param {boolean} showOutsideDebugMode if 'true', forces the message to shown outside of debug mode, except on Prod\n   */\n  function logger (message, showOutsideDebugMode) {\n    if (typeof tealiumEnvironment === 'undefined' || tealiumEnvironment === 'prod') {\n      // don't allow anything outside of debug mode on prod (disable this flag)\n      showOutsideDebugMode = false\n    }\n\n    if (showOutsideDebugMode || tiqInDebugMode) {\n      message = '\\n' + message + '\\n'\n      var formattedArr = []\n      formattedArr.push('****************')\n      var messageArr = message.split('\\n')\n      messageArr.forEach(function (messageLine) {\n        formattedArr.push('*  ' + messageLine)\n      })\n      formattedArr.push('****************')\n      var outputString = formattedArr.join('\\n')\n      console.log(outputString)\n    }\n  }\n\n  /**\n   * Stops Tealium iQ from loading (the TMS will not load tags or set a cookie if this function is called in Pre Loader), using the {@link https://docs.tealium.com/platforms/javascript/settings/#noload noload} setting\n   * @function stopTiq\n   */\n  function stopTiq () {\n    // logger(&quot;stopTiq function fired&quot;)\n    window.utag_cfg_ovrd = window.utag_cfg_ovrd || {}\n    window.utag_cfg_ovrd.noload = true\n  }\n\n  /**\n   * Allows TiQ to finish loading, intended to be called when a well-formed consent response is received, and that response allows Tealium iQ to run.\n   *\n   * Works by setting {@link https://docs.tealium.com/platforms/javascript/settings/#noload noload} to 'false' and calling Tealium iQ's utag.loader.PINIT method.\n   *\n   * If noload was 'true' and this function runs it must've been set to true by our own {@link module:extension-1~stopTiq stopTiq} function, because otherwise Tealium iQ wouldn't have been allowed to load/poll in the first place.\n   * @function triggerTiqLoad\n   * @returns {boolean} 'true' if Tealium iQ was successfully triggered, 'false' if it wasn't triggered because it's already initiated\n   */\n  function triggerTiqLoad () {\n    // if usercentrics is ready on the first request, TiQ won't have loaded yet at all - let it load naturally\n    if (!window.utag) {\n      return true\n    }\n    // if TiQ has already loaded but these flags aren't truthy, we've interrupted the load and should retrigger it\n    // initial load / view (noview logic handled in utag.handler.trigger function itself)\n    if (!window.utag.handler || !window.utag.handler.iflag) {\n      // we don't need to reload actually, just allow it to finish loading\n      window.utag.cfg.noload = false // safe because this code only runs if it was set to false originally\n      window.utag.loader.PINIT()\n      return true\n    }\n    // already loaded\n    return false\n  }\n\n  /**\n   * If Tealium iQ hasn't loaded, load it (calling utag.handler.trigger in the process), otherwise call utag.handler.trigger.\n   * @function triggerOrQueue\n   */\n  function triggerOrQueue () {\n    var successfullyTriggeredLoadIfNeeded = triggerTiqLoad()\n    if (!successfullyTriggeredLoadIfNeeded) {\n      // explicit consent from polling, but load has already been triggered\n      return window.utag.handler.trigger(nameOfConsentPollingEvent)\n    }\n  }\n  /**\n   * Get the the current Tealium iQ environment.\n   *\n   * Since this runs in Pre Loader, it needs to use regex to recognize the utag.js file in the DOM and read the environment from the file name (there are no utag functions or objects at this point in the load).\n   *\n   * NOTE: This doesn't work correctly when using the the Environment Switcher (because the original script is added to the DOM instead of the new one, and the 307 redirect that's used to pull the new file(s) only changes the response, not the script element itself).\n   *\n   * If you're using the Environment Switcher on Prod and would like to see console output, set the [debug cookie]{@link https://docs.tealium.com/platforms/javascript/debugging/}.\n   *\n   * @function getTealiumEnvironment\n   * @returns {boolean} 'true' if Tealium iQ was successfully triggered, 'false' if it wasn't triggered because it's already initiated\n   */\n  function getTealiumEnvironment () {\n    var allScripts = document.getElementsByTagName('script')\n    var re = /\\/([^/]*)\\/utag\\.js(\\?.*)*$/\n    for (var i = 0; i &lt; allScripts.length; i++) {\n      var result = re.exec(allScripts[i].src) // can be null\n      if (result &amp;&amp; result[1]) { // [1] is the result of the match\n        return result[1]\n      }\n    }\n    return 'prod' // default to guessing we're in prod, just in case we're actually in prod (to avoid logging in Prod)\n  }\n})()\n\n// Document key data structures here for clarity.\n\n/**\n * An array of Usercentrics Service Names that have permission to run (uses the 'dataProcessingService' property from [usercentrics.getConsents]{@link https://docs.usercentrics.com/#/?id=getconsents}).\n *\n * Also includes a 'type' property that indicates whether the consent decision is IMPLICIT or EXPLICT.\n *\n * @static\n * @type {array}\n * @name ConsentDecision\n * @memberof! &lt;global&gt;\n * @property {string} type the type of consent, will be either 'implicit' or 'explicit'\n * @example\nvar exampleConsentDecision = window.tealiumCmpIntegration.getCurrentConsentDecision()\n\nJSON.stringify(exampleConsentDecision)\n// [&quot;Google Analytics&quot;,&quot;Another Tag&quot;,&quot;Tealium iQ Tag Management&quot;]\n\nexampleConsentDecision.type\n// &quot;explicit&quot;\n\nexampleConsentDecision.length\n// 3\n */\n\n/**\n * Assigns Tealium iQ Tags to Usercentrics Service Names. Each service can have multiple tags, but each tag can only have one service.  If the same tag UID appears in multiple Service arrays, only one will be used.\n *\n * The keys for the main object are Setting-IDs from Usercentrics, inside that are key/value pairs where the key is a Service Name from Usercentrics, and the value is an array of TagUIDs from Tealium iQ.\n *\n * This needs to be provided as per the example below, in [tealiumCmpIntegration.map]{@link namespace:tealiumCmpIntegration~map}.\n *\n * An [example Tealium iQ extension]{@link module:example-map} is provided as well.\n *\n * @static\n * @type {object}\n * @name ServiceToTagMap\n * @memberof! &lt;global&gt;\n * @example\nwindow.tealiumCmpIntegration = window.tealiumCmpIntegration || {}\nwindow.tealiumCmpIntegration.map = {\n  'yPyIAIIxY': {\n    'Google Analytics': [6, 8, 10],\n    'Mouseflow': [7, 9],\n    'Another Tag': [11]\n  }\n}\n */\n\n/**\n * A simple lookup, with Tealium iQ tag UIDs as keys and the associated Usercentrics service name as strings as values. Each service can be associated with multiple tags, but each tag can be associated with one service.\n *\n * The example is based on the {@link ServiceToTagMap ServiceToTagMap} example, where the Usercentrics settingsId on the active page is 'yPyIAIIxY'.\n *\n * This object is automatically generated by the [getTagBasedMap]{@link module:extension-1~getTagbasedMap} method, and made available globally in [tealiumCmpIntegration.tagBasedMap]{@link tealiumCmpIntegration~tagBasedMap} for debugging and use within the extensions.\n *\n * @static\n * @type {object}\n * @name TagToServiceMap\n * @memberof! &lt;global&gt;\n * @example\n{\n  6: 'Google Analytics',\n  7: 'Mouseflow',\n  8: 'Google Analytics',\n  9: 'Mouseflow',\n  10: 'Google Analytics',\n  11: 'Another Tag'\n}\n */\n\n/**\n * An object from the [implicitEventQueue]{@link tealiumCmpIntegration.implicitEventQueue} or [earlyEventQueue]{@link tealiumCmpIntegration.earlyEventQueue}, which represents a Tealium iQ tracking event that's been processed based on an IMPLICIT [ConsentDecision]{@link ConsentDecision}\n *\n * Heavily based on the argument passed to [utag.track]{@link https://community.tealiumiq.com/t5/Tealium-iQ-Tag-Management/utag-track-method/td-p/24578}, since it's designed to be processed by that method.\n *\n * Initial pageviews (handled in the [utag.loader.initdata override]{@link module:extension-1~newUtagLoaderInitdata}) will NOT have metadata like cookies, qps, etc - utag.track calls (handled in the [utag.handler.trigger override]{@link module:extension-1~newUtagHandlerTrigger}) will. That's a byproduct of using utag.handler.trigger, which is later in the load - those metadata will be re-read when the queue is processed, and since this queue isn't persisted between pages, it should be fine like that - the only strange behavior will be that any metadata that aren't present on re-read will still be present after the re-read - only values that are still present will be replaced with new values.\n *\n * An alternative approach could be to manually remove 'cp.\\*', 'dom.\\*', 'ut.\\*', 'qp.\\*', 'meta.\\*' and possibly 'tealium_\\*' (except 'tealium_event') from the 'data' object before queueing - that hasn't been done so far.\n *\n * @static\n * @type {array}\n * @name QueuedEvent\n * @memberof! &lt;global&gt;\n * @property {string} event the type of tracking event, generally 'view' for pageviews or 'link' for other events\n * @property {object} data the Universal Data Object associated with the event (from utag_data or the b object)\n * @property {object} cfg an optional configuration object that can have a 'cb' property (for a callback function) and a 'uids' array, which is a list of tag UIDs that should be triggered by the event, regardless of whether load rules are met.\n * @example\n{\n  &quot;event&quot;: &quot;view&quot;,\n  &quot;data&quot;: {\n    &quot;page_type&quot;: &quot;test_virtual_view&quot;,\n    &quot;cp.utag_main_v_id&quot;: &quot;0174492849d50013581219634d6103079004907101274&quot;,\n    &quot;cp.utag_main__sn&quot;: &quot;4&quot;,\n    &quot;cp.utag_main__se&quot;: &quot;4&quot;,\n    &quot;cp.utag_main__ss&quot;: &quot;0&quot;,\n    &quot;cp.utag_main__st&quot;: &quot;1598990152209&quot;,\n    &quot;cp.utag_main_ses_id&quot;: &quot;1598988112353&quot;,\n    &quot;cp.utag_main__pn&quot;: &quot;3&quot;,\n    &quot;cp.utagdb&quot;: &quot;true&quot;,\n    &quot;dom.referrer&quot;: &quot;&quot;,\n    &quot;dom.title&quot;: &quot;Usercentrics Test&quot;,\n    &quot;dom.domain&quot;: &quot;solutions.tealium.net&quot;,\n    &quot;dom.query_string&quot;: &quot;&quot;,\n    &quot;dom.hash&quot;: &quot;&quot;,\n    &quot;dom.url&quot;: &quot;https://solutions.tealium.net/hosted/usercentrics/test-page-standard.html&quot;,\n    &quot;dom.pathname&quot;: &quot;/hosted/usercentrics/test-page-standard.html&quot;,\n    &quot;dom.viewport_height&quot;: 456,\n    &quot;dom.viewport_width&quot;: 1825,\n    &quot;ut.domain&quot;: &quot;tealium.net&quot;,\n    &quot;ut.version&quot;: &quot;ut4.46.202009011921&quot;,\n    &quot;ut.event&quot;: &quot;view&quot;,\n    &quot;ut.visitor_id&quot;: &quot;0174492849d50013581219634d6103079004907101274&quot;,\n    &quot;ut.session_id&quot;: &quot;1598988112353&quot;,\n    &quot;ut.account&quot;: &quot;services-caleb&quot;,\n    &quot;ut.profile&quot;: &quot;usercentrics-by-tag&quot;,\n    &quot;ut.env&quot;: &quot;prod&quot;,\n    &quot;tealium_event&quot;: &quot;view&quot;,\n    &quot;tealium_visitor_id&quot;: &quot;0174492849d50013581219634d6103079004907101274&quot;,\n    &quot;tealium_session_id&quot;: &quot;1598988112353&quot;,\n    &quot;tealium_session_number&quot;: &quot;4&quot;,\n    &quot;tealium_session_event_number&quot;: &quot;4&quot;,\n    &quot;tealium_datasource&quot;: &quot;&quot;,\n    &quot;tealium_account&quot;: &quot;services-caleb&quot;,\n    &quot;tealium_profile&quot;: &quot;usercentrics-by-tag&quot;,\n    &quot;tealium_environment&quot;: &quot;prod&quot;,\n    &quot;tealium_random&quot;: &quot;2085060854215077&quot;,\n    &quot;tealium_library_name&quot;: &quot;utag.js&quot;,\n    &quot;tealium_library_version&quot;: &quot;4.46.0&quot;,\n    &quot;tealium_timestamp_epoch&quot;: 1598988352,\n    &quot;tealium_timestamp_utc&quot;: &quot;2020-09-01T19:25:52.211Z&quot;,\n    &quot;tealium_timestamp_local&quot;: &quot;2020-09-01T21:25:52.211&quot;,\n    &quot;usercentrics_services_with_consent&quot;: [\n      &quot;Mouseflow&quot;,\n      &quot;Tealium iQ Tag Management&quot;,\n      &quot;Usercentrics Consent Management Platform&quot;\n    ],\n    &quot;usercentrics_consent_type&quot;: &quot;implicit&quot;,\n    &quot;_usercentrics_services_already_processed&quot;: [\n      &quot;Mouseflow&quot;,\n      &quot;Tealium iQ Tag Management&quot;,\n      &quot;Usercentrics Consent Management Platform&quot;\n    ]\n  },\n  &quot;cfg&quot;: {\n    &quot;cb&quot;: function myCallback () {console.log(&quot;Callback fired!&quot;)},\n    &quot;uids&quot;: [\n      11\n    ],\n    &quot;originalUids&quot;: [\n      7,\n      11\n    ],\n    &quot;blockedTagUids&quot;: [\n      11\n    ]\n  }\n}\n*/\n","name":"extension-1.js"}},"promotedSnippets":{"ef260e9aa3c673af240d17a2660480361a8e081d1ffeca2a5ed0e3219fc18567":{"promotedBy":"caleb.jaquith@tealium.com","promotedDraftName":"extension-1.js","promotedTimestamp":"202010290903","name":"dev","code":"/**\n *  Scope       : Pre Loader\n *  Condition   : n/a\n *  Description : CMP 1/2 - Preloader component - prevent TiQ from loading if no consent, queue implicitly consented events to retrigger (for new tags only) if explicit decision is made.\n */\n\n/**\n  * @module extension-1\n  *\n  * @description The 'Pre Loader' extension component of the CMP integration, responsible for stopping Tealium iQ from loading/running as appropriate, and making certain\n  * window-scoped functions available to the other components.\n  */\n\n// Tealium iQ runs Pre Loader extensions in global scope, which would make all variables global. We don't want to do that.\n(function avoidGlobalScopeUnlessExplicit () {\n  // set names for key objects and variables to make them easy to change if needed\n\n  var version = 'v0.10-beta'\n\n  // for the consent information in the b object\n  var nameOfVendorOptInArray = 'usercentrics_services_with_consent'\n  var nameOfConsentTypeString = 'usercentrics_consent_type'\n\n  // for the name in the queue\n  var nameOfImplicitConsentArray = '_usercentrics_services_already_processed'\n\n  // name to use when calling utag.handler.trigger to indicate a consent polling call\n  var nameOfConsentPollingEvent = 'tiq_usercentrics_consent_polling'\n\n  var consentTimeoutInterval = 400 // setTimeout interval in MS - rate to poll for new (explicit) consent decision or correctly formed object\n\n  // check for the Tealium Debug cookie, see https://docs.tealium.com/platforms/javascript/debugging/\n  var tiqInDebugMode = /utagdb=true/.test(document.cookie)\n  var tealiumEnvironment = getTealiumEnvironment() || 'prod' // fall back to prod (stops logging) if something goes wrong with the function\n\n  /**\n   * A window-scoped (global) object used to expose selected functionality.\n   *\n   * @namespace tealiumCmpIntegration\n   * @type {object}\n   * @memberof! &lt;global&gt;\n   */\n  window.tealiumCmpIntegration = window.tealiumCmpIntegration || {}\n\n  /**\n   * The name of the CMP (&quot;Usercentrics Vanilla App&quot; in this case).\n   * @name cmpName\n   * @type {string}\n   * @memberof! tealiumCmpIntegration\n   */\n  window.tealiumCmpIntegration.cmpName = 'Usercentrics Vanilla App'\n\n  /**\n   * A map of Usercentrics Data Processing Services to arrays of Tealium iQ tag UIDs, a {@link ServiceToTagMap ServiceToTagMap}\n   * @name map\n   * @type {object}\n   * @memberof! tealiumCmpIntegration\n   */\n  var map = window.tealiumCmpIntegration.map || {}\n\n  /**\n   * A map of Usercentrics Data Processing Services to arrays of Tealium iQ tag UIDs, a {@link TagToServiceMap TagToServiceMap}\n   * @name tagBasedMap\n   * @type {object}\n   * @memberof! tealiumCmpIntegration\n   */\n  generateTagBasedMap() // populates the window-level object for you as well\n\n  /**\n   * The Service Name for Tealium iQ in Usercentrics (used to decide if the TMS is allowed to run).  Uses the Usercentrics standard name if not provided.\n   * @name tiqServiceName\n   * @type {object}\n   * @memberof! tealiumCmpIntegration\n   * @default 'Tealium iQ Tag Management'\n   * @example\nwindow.tealiumCmpIntegration = window.tealiumCmpIntegration || {}\nwindow.tealiumCmpIntegration.tiqServiceName = &quot;Tealium iQ Tag Management&quot;\n   */\n  var tiqServiceName = window.tealiumCmpIntegration.tiqServiceName || 'Tealium iQ Tag Management' // use the standard name here if not set\n\n  /**\n   * The current version designation.\n   * @name version\n   * @type {string}\n   * @memberof! tealiumCmpIntegration\n   */\n  window.tealiumCmpIntegration.version = version\n\n  /**\n   * A [logger helper function]{@link module:extension-1~logger}, to help Tealium iQ users understand and troubleshoot this CMP integration without unneeded logging in production.\n   * @name logger\n   * @type {function}\n   * @memberof! tealiumCmpIntegration\n   */\n  window.tealiumCmpIntegration.logger = logger\n\n  /**\n   * A [helper function]{@link module:extension-1~getCurrentConsentDecision} that returns the current [ConsentDecision]{@link ConsentDecision}.\n   * @name getCurrentConsentDecision\n   * @type {function}\n   * @memberof! tealiumCmpIntegration\n   */\n  window.tealiumCmpIntegration.getCurrentConsentDecision = getCurrentConsentDecision\n\n  /**\n   * A [helper function]{@link module:extension-1~getCurrentUsercentricsSettingsId} that returns the current Usercentrics settingsId.\n   * @name getCurrentUsercentricsSettingsId\n   * @type {function}\n   * @memberof! tealiumCmpIntegration\n   */\n  window.tealiumCmpIntegration.getCurrentUsercentricsSettingsId = getCurrentUsercentricsSettingsId\n\n  /**\n   * Records the status of the [noview]{@link https://docs.tealium.com/platforms/javascript/settings/#noview} setting on page load.\n   * @name isNoviewSet\n   * @type {boolean}\n   * @memberof! tealiumCmpIntegration\n   */\n  window.tealiumCmpIntegration.isNoviewSet = window.utag_cfg_ovrd &amp;&amp; window.utag_cfg_ovrd.noview === true\n\n  /**\n   * The name to use for the [ConsentDecision]{@link ConsentDecision} array when adding it to Tealium's b object on each event.\n   * @name nameOfVendorOptInArray\n   * @type {string}\n   * @memberof! tealiumCmpIntegration\n   */\n  window.tealiumCmpIntegration.nameOfVendorOptInArray = nameOfVendorOptInArray\n\n  /**\n   * The name to use for the current [ConsentDecision]{@link ConsentDecision}'s 'type' attribute when adding it to Tealium's b object on each event.\n   * @name nameOfConsentTypeString\n   * @type {string}\n   * @memberof! tealiumCmpIntegration\n   */\n  window.tealiumCmpIntegration.nameOfConsentTypeString = nameOfConsentTypeString\n\n  /**\n   * The name to use for the array of implicit tags (which have already been fired) in the 'data' property of {@link QueuedEvent QueuedEvent} objects.\n   * @name nameOfImplicitConsentArray\n   * @type {string}\n   * @memberof! tealiumCmpIntegration\n   */\n  window.tealiumCmpIntegration.nameOfImplicitConsentArray = nameOfImplicitConsentArray\n\n  /**\n   * A [helper function]{@link module:extension-1~overrideUtagFunctions} that overrides certain utag functions to allow tags to be blocked based on CMP response.\n   *\n   * Must be called directly after the '##UTGEN##' reference by [editing]{@link https://community.tealiumiq.com/t5/iQ-Tag-Management/Managing-Tag-Templates/ta-p/21713} the 'utag loader' template, as shown in the example.\n   * @name overrideUtagFunctions\n   * @type {function}\n   * @memberof! tealiumCmpIntegration\n   * @example\n// ... utag loader template ...\n\n##UTGEN##\n// override two utag functions for the Usercentrics CMP Integration, to allow tags to be blocked as needed\nwindow.tealiumCmpIntegration &amp;&amp; window.tealiumCmpIntegration.overrideUtagFunctions &amp;&amp; window.tealiumCmpIntegration.overrideUtagFunctions()\n\n// ... utag loader template continues...\n\n   */\n  window.tealiumCmpIntegration.overrideUtagFunctions = overrideUtagFunctions\n\n  /**\n   * A queue for any events that Tealium iQ processes with IMPLICIT consent (to allow those events to be re-processed for new Services in the event of an EXPLICIT consent choice by the user).\n   *\n   * Each element in the queue is a [QueuedEvent]{@link QueuedEvent}\n   * @name implicitEventQueue\n   * @type {array}\n   * @memberof! tealiumCmpIntegration\n   */\n  window.tealiumCmpIntegration.implicitEventQueue = window.tealiumCmpIntegration.implicitEventQueue || []\n\n  /**\n   * A queue for any events that are triggered before Tealium iQ AND Usercentrics have both loaded.\n   *\n   * Each element in the queue is a [QueuedEvent]{@link QueuedEvent}\n   * @name earlyEventQueue\n   * @type {array}\n   * @memberof! tealiumCmpIntegration\n   */\n  window.tealiumCmpIntegration.earlyEventQueue = window.tealiumCmpIntegration.earlyEventQueue || []\n\n  /**\n   * Allows us to make sure we don't log certain messages more than once, especially useful while polling to avoid overwhelming the user.\n   * @function messageNotLoggedYet\n   * @param {*} messageId a string or number to uniquely identify a message for the purposes of deduplication\n   * @returns {boolean} 'true' if the message hasn't been logged yet (and should be logged), otherwise 'false'\n   */\n  var alreadyLoggedMessageIds = {}\n  function messageNotLoggedYet (messageId) {\n    var output = false\n    if (typeof alreadyLoggedMessageIds[messageId] === 'undefined') {\n      alreadyLoggedMessageIds[messageId] = true\n      output = true\n    }\n    return output\n  }\n\n  // if noload is set to 'true', don't interfere, just return to exit this function and allow that setting to stop TiQ load as usual.\n  if (window.utag_cfg_ovrd &amp;&amp; window.utag_cfg_ovrd.noload === true) return false\n\n  logger('CMP integration active - Usercentrics/TiQ' + (tiqInDebugMode ? &quot;\\n\\nDEBUGGING TIP: Use /SENDING|\\\\*\\\\*\\\\*\\\\*/ in the browser console as the 'filter' to show only CMP and tag send notifications.&quot; : '\\n\\nActivate TiQ Debug Mode for more details: https://docs.tealium.com/platforms/javascript/debugging/'), true)\n  var cmpResponse = cmpConsentCheck()\n  // core business/GDPR logic, decides if TiQ should load at all\n  reactToCmpResponse(cmpResponse)\n\n  /**\n   * The core CMP integration logic, which decides if Tealium iQ should be allowed to run, or if it needs to be stopped\n   * until an understandable response that includes permission for Tealium iQ to run is found.\n   *\n   * @function reactToCmpResponse\n   * @param {object} cmpResponse The response from the Usercentrics Vanilla App\n   */\n  function reactToCmpResponse (cmpResponse) {\n    var usercentricsFound = typeof cmpResponse === 'object'\n    var foundWellFormedConsentDecision = checkForWellFormedDecision(cmpResponse)\n    var tagBasedMap = generateTagBasedMap()\n    var foundMapEntryForActiveSetting = Object.keys(tagBasedMap).length &gt; 0\n    var foundExplicitConsent = checkForExplicitConsentDecision(cmpResponse)\n    var tiqIsAllowedToFire = checkForTiqConsent(cmpResponse)\n    var tiqIsLoaded = window.utag &amp;&amp; window.utag.handler &amp;&amp; window.utag.handler.iflag === 1\n\n    if (!usercentricsFound) {\n      /**\n       * CASE A1: no Usercentrics CMS found\n       *\n       * STOP and fire nothing at all\n       * RETRY after a delay\n       */\n      if (messageNotLoggedYet(1)) logger('No Usercentrics CMP found on page.\\n\\nStopping TiQ (no cookies set/removed, no tags fired).\\n\\nPolling for changes.')\n      window.setTimeout(recheckForCmpAndConsent, consentTimeoutInterval)\n      stopTiq()\n    } else if (!foundMapEntryForActiveSetting) {\n      /**\n        * CASE A7: No map found for the current settingsId\n        *\n        * STOP and fire nothing at all. Do not retry.\n        */\n      if (messageNotLoggedYet(2)) logger('No map found for current Usercentrics Setting ID.\\n\\nStopping TiQ (no cookies set/removed, no tags fired).\\n\\nNo retries.')\n      stopTiq()\n    } else if (!foundWellFormedConsentDecision) {\n      /**\n       * CASE A2: Usercentrics CMS found but consent response wasn't well-formed/complete/understandable\n       *\n       * STOP and fire nothing at all\n       * RETRY after a delay\n       */\n      if (messageNotLoggedYet(3)) logger('Found Usercentrics CMP and got response, but didn\\'t understand the response.\\n\\nStopping TiQ (no cookies set/removed, no tags fired).\\n\\nPolling for changes.')\n      window.setTimeout(recheckForCmpAndConsent, consentTimeoutInterval)\n      stopTiq()\n    } else if (!tiqIsAllowedToFire) {\n      /**\n       * CASE A3: Usercentrics CMS found and consent response was well-formed, BUT TiQ didn't have an opt-in\n       *\n       * STOP and fire nothing at all\n       * RETRY after a delay\n       */\n      if (messageNotLoggedYet(4)) logger('Found Usercentrics CMP and got well-formed response, but TiQ isn\\'t allowed to run based on the response.\\n\\nStopping TiQ (no cookies set/removed, no tags fired).\\n\\nPolling for changes.')\n      window.setTimeout(recheckForCmpAndConsent, consentTimeoutInterval)\n      stopTiq()\n    } else if (!foundExplicitConsent) {\n      /**\n       * CASE A4: Usercentrics CMS found AND response was understandable (AND includes an implicit TiQ consent), BUT the user hasn't made an explicit decision yet\n       *\n       * ALLOW TO LOAD for any 'default opt-in' tags (filter logic in Extension B)\n       * RETRY after a delay (in case there's an explicit decision, since implicit decisions usually mean the prompt is displayed)\n       */\n      if (messageNotLoggedYet(5)) logger('Found Usercentrics CMP and got well-formed IMPLICIT response which includes TiQ.\\n\\nAllowing certain tags to fire based on IMPLICIT consent.\\n\\nPolling for changes.')\n      window.setTimeout(recheckForCmpAndConsent, consentTimeoutInterval)\n      if (tiqIsLoaded) {\n        processEarlyQueue()\n      } else {\n        window.setTimeout(recheckForCmpAndConsent, consentTimeoutInterval)\n      }\n      triggerOrQueue()\n    } else if (foundExplicitConsent) {\n      /**\n       * CASE A5: Usercentrics CMS found AND response was understandable, AND the user has made an explicit consent decision AND TiQ is allowed\n       *\n       * ALLOW TO LOAD for any opted-in tags (filter logic in Extension B), do not retry.\n       */\n      if (messageNotLoggedYet(6)) logger('Found Usercentrics CMP and got well-formed EXPLICIT response which includes TiQ.\\n\\nAllowing certain tags to fire based on EXPLICIT consent.\\n\\nNo further polling.')\n      // only call if we've been polling (on initial load, it will load automatically)\n      if (tiqIsLoaded) {\n        processEarlyQueue()\n        processImplicitQueue()\n      } else {\n        window.setTimeout(recheckForCmpAndConsent, consentTimeoutInterval)\n      }\n      triggerOrQueue()\n    } else {\n      /**\n        * CASE A6: Something went wrong with this extension.\n        *\n        * STOP and fire nothing at all. Do not retry.\n        */\n      if (messageNotLoggedYet(7)) logger('Something unexpected went wrong.\\n\\nStopping TiQ (no cookies set/removed, no tags fired).\\n\\nNo retries.')\n      stopTiq()\n    }\n  }\n\n  /**\n   * Override utag.loader.initdata and utag.handler.trigger to allow Tealium iQ Tags to be blocked if the user hasn't consented.\n   *\n   * @function overrideUtagFunctions\n   * @returns {boolean} 'true' if the function was overridden successfully by this request, 'false' if not (because it was already overridden)\n   */\n  function overrideUtagFunctions () {\n    // don't override more than once, assume that if one function has been overridden, both have\n    if (window.utag.handler.trigger.toString().indexOf('tealiumCmpIntegration') !== -1) {\n      return true\n    }\n\n    // the initial view is handled differently than subsequent events\n    // this is safe to to override even if noview is set (because it will never be called in that case)\n    window.utag.loader.initdata_old = window.utag.loader.initdata\n    window.utag.loader.initdata = newUtagLoaderInitdata\n\n    window.utag.handler.trigger_old = window.utag.handler.trigger\n    window.utag.handler.trigger = newUtagHandlerTrigger\n    logger('Overrode utag functions!')\n\n    if (window.utag.handler.trigger.toString().indexOf('tealiumCmpIntegration') !== -1) {\n      return true\n    }\n\n    return false\n  }\n\n  /**\n   * An overridden version of the Tealium iQ function utag.loader.initdata.\n   *\n   * Calls the original function, respects possible noview settings, rechecks the user consent, and calls queueEventWithoutFiringImplicitServices\n   * if only an IMPLICIT consent is found (after recording the IMPLICIT services, to avoid double-firing).\n   *\n   * That same event can then be re-processed for any new Services if an EXPLICIT consent decision later made.\n   *\n   * @function newUtagLoaderInitdata\n   */\n  function newUtagLoaderInitdata () {\n    window.utag.loader.initdata_old()\n    // make sure we don't queue this initial page load twice, and respect the configured noview setting\n    if (!window.tealiumCmpIntegration.isNoviewSet &amp;&amp; !window.tealiumCmpIntegration.alreadyFiredInitialViewEvent) {\n      window.tealiumCmpIntegration.alreadyFiredInitialViewEvent = true\n      var consentedServices = getCurrentConsentDecision()\n      if (consentedServices.type === 'implicit') {\n        window.tealiumCmpIntegration.implicitServices = consentedServices\n        // we don't need to fire implicit services in this case, because TiQ's loading process will fire them\n        queueEventWithoutFiringImplicitServices({\n          event: 'view',\n          data: window.utag.handler.C(window.utag.data)\n        })\n      }\n    }\n  }\n\n  /**\n   * Refresh [tealiumCmpIntegration.tagBasedMap]{@link tealiumCmpIntegration.tagBasedMap} and return that new map, helps smooth out any timing issues between Usercentrics and Tealium iQ load.\n   *\n   * @function generateTagBasedMap\n   * @returns a [TagToServiceMap]{@link TagToServiceMap}\n   */\n  function generateTagBasedMap () {\n    var tagBasedMap = getTagBasedMap(map)\n    window.tealiumCmpIntegration.tagBasedMap = tagBasedMap\n    return tagBasedMap\n  }\n\n  /**\n   * Tealium iQ's utag.handler.trigger normally causes tags to fire. For this integration, we override that function to support blocking tags without consent.\n   *\n   * @function newUtagHandlerTrigger\n   *\n   * @param {*} a can be an object or a string\n   * @param {*} b\n   * @param {*} c\n   */\n  function newUtagHandlerTrigger (a, b, c) {\n    /**\n     * Trigger CASES (utag.handler.trigger override)\n     *\n     * We need to queue the events if we only have implicit consent, to allow a selective retrigger if/when we get an explicit decision.\n     */\n    var isPureConsentEvent = (a === nameOfConsentPollingEvent &amp;&amp; !b &amp;&amp; !c)\n    var isNoviewSet = window.tealiumCmpIntegration.isNoviewSet || true // assume noview if something went wrong with the global, to avoid firing tracking in error\n\n    var consentedServices = getCurrentConsentDecision()\n    var consentType = (consentedServices &amp;&amp; consentedServices.type) || 'none'\n\n    var isUsercentricsReady = consentType === 'implicit' || consentType === 'explicit'\n    var isTealiumReady = window.utag &amp;&amp; window.utag.handler &amp;&amp; window.utag.handler.iflag === 1\n\n    if (!isPureConsentEvent) {\n      logger('utag.handler.trigger called with:\\n\\n' + JSON.stringify(arguments, null, 2))\n    }\n\n    if (!isUsercentricsReady &amp;&amp; !isTealiumReady) {\n      consentedServices.type = 'tealium-and-usercentrics-loading'\n      logger('Waiting for Usercentrics and Tealium to be ready, queueing early event.')\n      queueEarlyEvent(a, b, c)\n      return false\n    } else if (!isUsercentricsReady) {\n      consentedServices.type = 'usercentrics-loading'\n      logger('Usercentrics is still loading, queueing early event')\n      queueEarlyEvent(a, b, c)\n      return false\n    } else if (!isTealiumReady) {\n      consentedServices.type = 'tealium-still-loading'\n      logger('Tealium iQ is still loading, queueing early event')\n      queueEarlyEvent(a, b, c)\n      return false\n    }\n\n    // if an array of tagUids is passed, that forces them to fire regardless of load rules\n    // or consent, so we need to filter that array before allowing it to be processed\n    var hasTagUidArray = c &amp;&amp; typeof c === 'object' &amp;&amp; c.uids &amp;&amp; c.uids &amp;&amp; window.utag.ut.typeOf(c.uids) === 'array'\n    var uidMap = generateTagBasedMap()\n    var allowedTagUids = []\n    var blockedTagUids = []\n    var serviceName\n    var tagUid\n    if (hasTagUidArray) {\n      for (var i = 0; i &lt; c.uids.length; i++) {\n        tagUid = c.uids[i]\n        serviceName = uidMap[tagUid] || '(missing)'\n        // only push consented services into the new array\n        if (consentedServices.indexOf(serviceName) !== -1) {\n          allowedTagUids.push(tagUid)\n        } else {\n          blockedTagUids.push(tagUid)\n        }\n      }\n      // replace the original with the filtered array (can also be empty, if none of them were allowed)\n      logger('Call included tagUid array:\\n\\n' + JSON.stringify(c.uids) + '\\n\\nwhich was replaced by the filtered version:\\n\\n' + JSON.stringify(allowedTagUids))\n      c.originalUids = c.uids.slice() // make a shallow copy\n      c.uids = allowedTagUids\n      c.blockedTagUids = blockedTagUids\n    }\n\n    if (consentType === 'explicit') {\n      /**\n       * CASE T2: expected globals are populated, consent is EXPLICIT\n       *\n       * FIRE allowed tags (explicit)\n       * utag.handler.trigger override PROCESSES the queue, which will include any queued events from CASE A4, making sure not to re-fire any default\n       *   opt-in tags that were already fired for the queued events\n       */\n      // make sure TiQ loads\n      processEarlyQueue()\n      processImplicitQueue()\n      triggerTiqLoad()\n      // fire the current event if it's not just a polling event\n      if (!isPureConsentEvent) {\n        return window.utag.handler.trigger_old(a, b, c)\n      }\n    } else if (consentType === 'implicit') {\n      /**\n       * CASE T3: expected globals are populated, consent is IMPLICIT\n       *\n       * FIRE allowed tags (implicit)\n       * utag.handler.trigger override KEEPS a queue/record that includes\n       *  - the event(s) that were processed based on implicit consent\n       *  - which tags were allowed to process each event (are set to implicit opt-in)\n       */\n      processEarlyQueue()\n      // fire the initial view if appropriate, and queue it\n      triggerTiqLoad()\n      window.tealiumCmpIntegration.implicitServices = consentedServices\n\n      // queue the initial 'view' on pageload if appropriate\n      if (!isNoviewSet &amp;&amp; isTealiumReady &amp;&amp; !window.tealiumCmpIntegration.alreadyFiredInitialViewEvent) {\n        window.tealiumCmpIntegration.alreadyFiredInitialViewEvent = true\n        queueEventAndFireImplicitServices('view', window.utag.handler.C(window.utag.data))\n      }\n      // queue the current event if it exists (and this isn't just consent polling)\n      if (!isPureConsentEvent) {\n        return queueEventAndFireImplicitServices(a, b, c)\n      }\n    } else if (consentType === 'missing-map') {\n      logger('Something went wrong - all tags were blocked because no consent map was found for the active setting ID.')\n      return false\n    } else if (consentType === 'missing-tiq-consent') {\n      logger('Something went wrong - all tags were blocked because no consent was found for &quot;' + tiqServiceName + '&quot;, configured Tealium iQ name.\\n\\nConsent found: ' + JSON.stringify(consentedServices, null, 2))\n      return false\n    } else {\n      /**\n       * CASE T1: expected variables not populated (misconfiguration/error case)\n       *\n       * STOP and fire nothing at all. Do not retry or queue the event.\n       */\n      logger('Something went wrong - all tags were blocked because the consent response was not understood.')\n      return false\n    }\n  }\n\n  /**\n   * Process any queued tracking events from [the early event queue]{@link tealiumCmpIntegration.earlyEventQueue} (can include pageviews) for any currently-consented Services.\n   *\n   * Intended to be called first understandable implicit consent.\n   *\n   * @function processEarlyQueue\n   */\n  function processEarlyQueue () {\n    var queuedEvent\n    window.tealiumCmpIntegration.earlyEventQueue = window.tealiumCmpIntegration.earlyEventQueue || []\n    while (window.tealiumCmpIntegration.earlyEventQueue.length &gt; 0) {\n      // process past events\n      queuedEvent = window.tealiumCmpIntegration.earlyEventQueue.shift()\n      logger('Processing queued early event for currently consented tags: ' + JSON.stringify(queuedEvent, null, 2))\n      window.utag.track(queuedEvent)\n    }\n  }\n\n  /**\n   * Process any queued tracking events from [the global queue]{@link tealiumCmpIntegration.implicitEventQueue} (can include pageviews) for any newly-consented Services.\n   *\n   * Intended to be called on new EXPLICIT consent decision - queued events have already had IMPLICTLY consented tags fired, so those need to be excluded.\n   *\n   * @function processImplicitQueue\n   */\n  function processImplicitQueue () {\n    var alreadyLogged = false\n    var queuedEvent\n    window.tealiumCmpIntegration.implicitEventQueue = window.tealiumCmpIntegration.implicitEventQueue || []\n    while (window.tealiumCmpIntegration.implicitEventQueue.length &gt; 0) {\n      if (!alreadyLogged) {\n        alreadyLogged = true\n        logger('Explicit consent tracking request received - processing past implicitly tracked events (' + window.tealiumCmpIntegration.implicitEventQueue.length + ') for any new explicit tags.')\n      }\n      // process past events\n      queuedEvent = window.tealiumCmpIntegration.implicitEventQueue.shift()\n      logger('Triggering event for explicitly-consented tags: ' + JSON.stringify(queuedEvent))\n      window.utag.track(queuedEvent)\n    }\n  }\n\n  /**\n   * Queue a [tracking event]{@link QueuedEvent} in [the early queue]{@link tealiumCmpIntegration.earlyEventQueue}, without firing any tags.\n   *\n   * Intended to be called for events that triggered before we get an understandable response from Usercentrics.\n   *\n   * @function queueEarlyEvent\n   * @param {*} a the 'a' argument from utag.handler.trigger\n   * @param {*} b the 'b' argument from utag.handler.trigger\n   * @param {*} c the 'c' argument from utag.handler.trigger\n   *\n   */\n  function queueEarlyEvent (a, b, c) {\n    a = a || {}\n\n    // make a copy, in case shared objects are used (like utag_data, or a similar global) - snapshot those\n    if (typeof b === 'object') {\n      b = JSON.parse(JSON.stringify(b))\n    }\n    // convert to a more standard format\n    if (typeof a === 'string') {\n      a = { event: a, data: b || {}, cfg: c }\n    }\n\n    // if there's a tagUid array, don't queue the already-fired tags - instead, swap that with any blocked tags\n    if (a &amp;&amp; a.cfg &amp;&amp; window.utag.ut.typeOf(a.cfg.uids) === 'array') {\n      a.cfg.uids = a.cfg.blockedTagUids.slice()\n    }\n\n    // nothing will be allowed to fire\n    a.data[nameOfImplicitConsentArray] = []\n\n    window.tealiumCmpIntegration.earlyEventQueue = window.tealiumCmpIntegration.earlyEventQueue || []\n    window.tealiumCmpIntegration.earlyEventQueue.push(a)\n    logger('Queued early event!')\n  }\n\n  /**\n   * Queue a [tracking event]{@link QueuedEvent} in [the global queue]{@link tealiumCmpIntegration.implicitEventQueue}, without firing any implictly consented Services.\n   *\n   * Intended to be called for the initial pageview on load, since the load process will have already fired the implicit services.\n   *\n   * @function queueEventWithoutFiringImplicitServices\n   * @param {*} a the 'a' argument from utag.handler.trigger\n   * @param {*} b the 'b' argument from utag.handler.trigger\n   * @param {*} c the 'c' argument from utag.handler.trigger\n   *\n   */\n  function queueEventWithoutFiringImplicitServices (a, b, c) {\n    a = a || {}\n\n    // make a copy, in case shared objects are used (like utag_data, or a similar global) - snapshot those\n    if (typeof b === 'object') {\n      b = JSON.parse(JSON.stringify(b))\n    }\n    // convert to a more standard format\n    if (typeof a === 'string') {\n      a = { event: a, data: b || {}, cfg: c }\n    }\n\n    // if there's a tagUid array, don't queue the already-fired tags - instead, swap that with any blocked tags\n    if (a &amp;&amp; a.cfg &amp;&amp; window.utag.ut.typeOf(a.cfg.uids) === 'array') {\n      a.cfg.uids = a.cfg.blockedTagUids.slice()\n    }\n\n    a.data[nameOfImplicitConsentArray] = window.tealiumCmpIntegration.implicitServices || []\n\n    window.tealiumCmpIntegration.implicitEventQueue = window.tealiumCmpIntegration.implicitEventQueue || []\n    window.tealiumCmpIntegration.implicitEventQueue.push(a)\n  }\n\n  /**\n   * Queue a [tracking event]{@link QueuedEvent} in [the global queue]{@link tealiumCmpIntegration~implicitEventQueue}, without firing any implictly consented Services.\n   *\n   * Intended to be called for all events other than the initial page load.\n   *\n   * @function queueEventAndFireImplicitServices\n   * @param {*} a the 'a' argument from utag.handler.trigger\n   * @param {*} b the 'b' argument from utag.handler.trigger\n   * @param {*} c the 'c' argument from utag.handler.trigger\n   *\n   */\n  function queueEventAndFireImplicitServices (a, b, c) {\n    // fire the implicit tags\n    window.utag.handler.trigger_old(a, b, c)\n    logger('Implicit consent tracking request fired (or queued, if utag hasn\\'t loaded).')\n    return queueEventWithoutFiringImplicitServices(a, b, c)\n  }\n\n  /**\n   * Generate a {@link TagToServiceMap TagToServiceMap} based on a {@link ServiceToTagMap ServiceToTagMap}\n   *\n   * @function getTagBasedMap\n   * @param {object} map a {@link ServiceToTagMap ServiceToTagMap} object\n   * @return {object} a {@link TagToServiceMap TagToServiceMap}\n   */\n  function getTagBasedMap (map) {\n    // generate a lookup based on the tagUid\n    if (typeof map !== 'object') return {}\n    var settingsId = getCurrentUsercentricsSettingsId() || ''\n    if (typeof settingsId !== 'string' || settingsId === '') return {}\n    var settingSpecificMap = map[settingsId] || {}\n    var serviceNames = Object.keys(settingSpecificMap)\n    var uidMap = {}\n    for (var i = 0; i &lt; serviceNames.length; i++) {\n      for (var j = 0; j &lt; settingSpecificMap[serviceNames[i]].length; j++) {\n        uidMap[settingSpecificMap[serviceNames[i]][j]] = serviceNames[i]\n      }\n    }\n    return uidMap\n  }\n\n  /**\n   * Get the current Usercentrics settingsId from the page.\n   *\n   * @returns {string} the Usercentrics settingsId, defaults to an empty string if none is found\n   */\n  function getCurrentUsercentricsSettingsId () {\n    return (window.usercentrics &amp;&amp; window.usercentrics.settingsId) || ''\n  }\n\n  /**\n   * Trigger the core logic with an up-to-date array of objects returned by calling [usercentrics.getConsents]{@link https://docs.usercentrics.com/#/?id=getconsents}\n   * @function recheckForCmpAndConsent\n   */\n  function recheckForCmpAndConsent () {\n    var newConsentResponse = cmpConsentCheck()\n    reactToCmpResponse(newConsentResponse)\n  }\n\n  /**\n   * Call [usercentrics.getConsents]{@link https://docs.usercentrics.com/#/?id=getconsents} to get the current consent decision.\n   * @function cmpConsentCheck\n   */\n  function cmpConsentCheck () {\n    if (!window.usercentrics || typeof window.usercentrics.getConsents !== 'function') return false\n    var cmpConsentArray = window.usercentrics.getConsents()\n    return cmpConsentArray\n  }\n\n  /**\n   * Indicates if Usercentrics has loaded and returned a well-formed indication of user consent.\n   * @function checkForWellFormedDecision\n   * @param cmpConsentArray the array of objects returned by [usercentrics.getConsents]{@link https://docs.usercentrics.com/#/?id=getconsents}.\n   * @returns {boolean} 'true' if the consent decision is well-formed, otherwise 'false'\n   */\n  function checkForWellFormedDecision (cmpConsentArray) {\n    // treat things we don't understand as an opt-out\n    if (toString.call(cmpConsentArray) !== '[object Array]') return false\n    // use the first entry as a proxy for all\n    if (cmpConsentArray &amp;&amp; cmpConsentArray[0] &amp;&amp; typeof cmpConsentArray[0].dataProcessingService === 'string') {\n      return true\n    }\n    return false\n  }\n\n  /**\n   * Indicates if the user has made an EXPLICIT decision\n   * @function checkForExplicitConsentDecision\n   * @param cmpConsentArray the array of objects returned by [usercentrics.getConsents]{@link https://docs.usercentrics.com/#/?id=getconsents}.\n   * @returns {boolean} 'true' if the consent decision is EXPLICIT otherwise 'false'\n   */\n  function checkForExplicitConsentDecision (cmpConsentArray) {\n    // treat things we don't understand as an opt-out\n    if (toString.call(cmpConsentArray) !== '[object Array]') return false\n    // use the first entry as a proxy for all\n    if (cmpConsentArray &amp;&amp; cmpConsentArray[0] &amp;&amp; cmpConsentArray[0].updatedBy === 'explicit') {\n      return true\n    }\n    return false\n  }\n\n  /**\n   * Indicates if Tealium iQ has permission to run (and fire tags).\n   * @function checkForTiqConsent\n   * @param cmpConsentArray the array of objects returned by [usercentrics.getConsents]{@link https://docs.usercentrics.com/#/?id=getconsents}.\n   * @returns {boolean} 'true' if TiQ is allowed to run, otherwise 'false'\n   */\n  function checkForTiqConsent (cmpConsentArray) {\n    var foundOptIn = false\n    // treat things we don't understand as an opt-out\n    if (toString.call(cmpConsentArray) !== '[object Array]') return false\n    // check vendors if there's an object, look for at least one\n    cmpConsentArray.forEach(function (tagInfo) {\n      if (tagInfo.consentStatus === true &amp;&amp; tagInfo.dataProcessingService === tiqServiceName) {\n        foundOptIn = true\n      }\n    })\n    return foundOptIn\n  }\n\n  /**\n   * Create an instance of\n   * @param {array} cmpConsentArray the array of objects returned by calling [usercentrics.getConsents]{@link https://docs.usercentrics.com/#/?id=getconsents}\n   */\n  function getVendorConsentsFromCmpConsentArray (cmpConsentArray) {\n    var vendorArray = []\n\n    var isWellFormed = checkForWellFormedDecision(cmpConsentArray)\n\n    if (!isWellFormed) {\n      vendorArray.type = 'missing-well-formed-response'\n      return []\n    }\n\n    var tagBasedMap = generateTagBasedMap()\n\n    // if there is no mapping for the settings id, we need to change the console output\n    var currentSettingsIdHasMapping = (typeof tagBasedMap === 'object' &amp;&amp; Object.keys(tagBasedMap).length &gt; 0)\n\n    if (!currentSettingsIdHasMapping) {\n      vendorArray.type = 'missing-map'\n      return []\n    }\n\n    cmpConsentArray &amp;&amp; cmpConsentArray.forEach(function (tagConsent) {\n      if (tagConsent.consentStatus === true) {\n        vendorArray.push(tagConsent.dataProcessingService)\n      }\n    })\n    vendorArray.type = checkForExplicitConsentDecision(cmpConsentArray) ? 'explicit' : 'implicit'\n\n    if (checkForTiqConsent(cmpConsentArray) === false) {\n      // change the consent type, but leave the array for debugging purposes\n      vendorArray.type = 'missing-tiq-consent'\n    }\n\n    return vendorArray\n  }\n\n  /**\n   * Get the current consent decision from the CMP for the active Setting\n   * @function getCurrentConsentDecision\n   * @returns a {@link ConsentDecision ConsentDecision}\n   */\n  function getCurrentConsentDecision () {\n    var freshConsent = cmpConsentCheck()\n\n    return getVendorConsentsFromCmpConsentArray(freshConsent)\n  }\n\n  /**\n   *  A conditional logging function - we can't use utag.DB directly because some of our logic needs to be preloader, but we can mimic the same logic so that our logging only displays when TiQ is in debug mode and/or not in Prod, or is explicitly forced.\n   * @function logger\n   * @param {string} message the message to be conditionally shown\n   * @param {boolean} showOutsideDebugMode if 'true', forces the message to shown outside of debug mode, except on Prod\n   */\n  function logger (message, showOutsideDebugMode) {\n    if (typeof tealiumEnvironment === 'undefined' || tealiumEnvironment === 'prod') {\n      // don't allow anything outside of debug mode on prod (disable this flag)\n      showOutsideDebugMode = false\n    }\n\n    if (showOutsideDebugMode || tiqInDebugMode) {\n      message = '\\n' + message + '\\n'\n      var formattedArr = []\n      formattedArr.push('****************')\n      var messageArr = message.split('\\n')\n      messageArr.forEach(function (messageLine) {\n        formattedArr.push('*  ' + messageLine)\n      })\n      formattedArr.push('****************')\n      var outputString = formattedArr.join('\\n')\n      console.log(outputString)\n    }\n  }\n\n  /**\n   * Stops Tealium iQ from loading (the TMS will not load tags or set a cookie if this function is called in Pre Loader), using the {@link https://docs.tealium.com/platforms/javascript/settings/#noload noload} setting\n   * @function stopTiq\n   */\n  function stopTiq () {\n    // logger(&quot;stopTiq function fired&quot;)\n    window.utag_cfg_ovrd = window.utag_cfg_ovrd || {}\n    window.utag_cfg_ovrd.noload = true\n  }\n\n  /**\n   * Allows TiQ to finish loading, intended to be called when a well-formed consent response is received, and that response allows Tealium iQ to run.\n   *\n   * Works by setting {@link https://docs.tealium.com/platforms/javascript/settings/#noload noload} to 'false' and calling Tealium iQ's utag.loader.PINIT method.\n   *\n   * If noload was 'true' and this function runs it must've been set to true by our own {@link module:extension-1~stopTiq stopTiq} function, because otherwise Tealium iQ wouldn't have been allowed to load/poll in the first place.\n   * @function triggerTiqLoad\n   * @returns {boolean} 'true' if Tealium iQ was successfully triggered, 'false' if it wasn't triggered because it's already initiated\n   */\n  function triggerTiqLoad () {\n    // if usercentrics is ready on the first request, TiQ won't have loaded yet at all - let it load naturally\n    if (!window.utag) {\n      return true\n    }\n    // if TiQ has already loaded but these flags aren't truthy, we've interrupted the load and should retrigger it\n    // initial load / view (noview logic handled in utag.handler.trigger function itself)\n    if (!window.utag.handler || !window.utag.handler.iflag) {\n      // we don't need to reload actually, just allow it to finish loading\n      window.utag.cfg.noload = false // safe because this code only runs if it was set to false originally\n      window.utag.loader.PINIT()\n      return true\n    }\n    // already loaded\n    return false\n  }\n\n  /**\n   * If Tealium iQ hasn't loaded, load it (calling utag.handler.trigger in the process), otherwise call utag.handler.trigger.\n   * @function triggerOrQueue\n   */\n  function triggerOrQueue () {\n    var successfullyTriggeredLoadIfNeeded = triggerTiqLoad()\n    if (!successfullyTriggeredLoadIfNeeded) {\n      // explicit consent from polling, but load has already been triggered\n      return window.utag.handler.trigger(nameOfConsentPollingEvent)\n    }\n  }\n  /**\n   * Get the the current Tealium iQ environment.\n   *\n   * Since this runs in Pre Loader, it needs to use regex to recognize the utag.js file in the DOM and read the environment from the file name (there are no utag functions or objects at this point in the load).\n   *\n   * NOTE: This doesn't work correctly when using the the Environment Switcher (because the original script is added to the DOM instead of the new one, and the 307 redirect that's used to pull the new file(s) only changes the response, not the script element itself).\n   *\n   * If you're using the Environment Switcher on Prod and would like to see console output, set the [debug cookie]{@link https://docs.tealium.com/platforms/javascript/debugging/}.\n   *\n   * @function getTealiumEnvironment\n   * @returns {boolean} 'true' if Tealium iQ was successfully triggered, 'false' if it wasn't triggered because it's already initiated\n   */\n  function getTealiumEnvironment () {\n    var allScripts = document.getElementsByTagName('script')\n    var re = /\\/([^/]*)\\/utag\\.js(\\?.*)*$/\n    for (var i = 0; i &lt; allScripts.length; i++) {\n      var result = re.exec(allScripts[i].src) // can be null\n      if (result &amp;&amp; result[1]) { // [1] is the result of the match\n        return result[1]\n      }\n    }\n    return 'prod' // default to guessing we're in prod, just in case we're actually in prod (to avoid logging in Prod)\n  }\n})()\n\n// Document key data structures here for clarity.\n\n/**\n * An array of Usercentrics Service Names that have permission to run (uses the 'dataProcessingService' property from [usercentrics.getConsents]{@link https://docs.usercentrics.com/#/?id=getconsents}).\n *\n * Also includes a 'type' property that indicates whether the consent decision is IMPLICIT or EXPLICT.\n *\n * @static\n * @type {array}\n * @name ConsentDecision\n * @memberof! &lt;global&gt;\n * @property {string} type the type of consent, will be either 'implicit' or 'explicit'\n * @example\nvar exampleConsentDecision = window.tealiumCmpIntegration.getCurrentConsentDecision()\n\nJSON.stringify(exampleConsentDecision)\n// [&quot;Google Analytics&quot;,&quot;Another Tag&quot;,&quot;Tealium iQ Tag Management&quot;]\n\nexampleConsentDecision.type\n// &quot;explicit&quot;\n\nexampleConsentDecision.length\n// 3\n */\n\n/**\n * Assigns Tealium iQ Tags to Usercentrics Service Names. Each service can have multiple tags, but each tag can only have one service.  If the same tag UID appears in multiple Service arrays, only one will be used.\n *\n * The keys for the main object are Setting-IDs from Usercentrics, inside that are key/value pairs where the key is a Service Name from Usercentrics, and the value is an array of TagUIDs from Tealium iQ.\n *\n * This needs to be provided as per the example below, in [tealiumCmpIntegration.map]{@link namespace:tealiumCmpIntegration~map}.\n *\n * An [example Tealium iQ extension]{@link module:example-map} is provided as well.\n *\n * @static\n * @type {object}\n * @name ServiceToTagMap\n * @memberof! &lt;global&gt;\n * @example\nwindow.tealiumCmpIntegration = window.tealiumCmpIntegration || {}\nwindow.tealiumCmpIntegration.map = {\n  'yPyIAIIxY': {\n    'Google Analytics': [6, 8, 10],\n    'Mouseflow': [7, 9],\n    'Another Tag': [11]\n  }\n}\n */\n\n/**\n * A simple lookup, with Tealium iQ tag UIDs as keys and the associated Usercentrics service name as strings as values. Each service can be associated with multiple tags, but each tag can be associated with one service.\n *\n * The example is based on the {@link ServiceToTagMap ServiceToTagMap} example, where the Usercentrics settingsId on the active page is 'yPyIAIIxY'.\n *\n * This object is automatically generated by the [getTagBasedMap]{@link module:extension-1~getTagbasedMap} method, and made available globally in [tealiumCmpIntegration.tagBasedMap]{@link tealiumCmpIntegration~tagBasedMap} for debugging and use within the extensions.\n *\n * @static\n * @type {object}\n * @name TagToServiceMap\n * @memberof! &lt;global&gt;\n * @example\n{\n  6: 'Google Analytics',\n  7: 'Mouseflow',\n  8: 'Google Analytics',\n  9: 'Mouseflow',\n  10: 'Google Analytics',\n  11: 'Another Tag'\n}\n */\n\n/**\n * An object from the [implicitEventQueue]{@link tealiumCmpIntegration.implicitEventQueue} or [earlyEventQueue]{@link tealiumCmpIntegration.earlyEventQueue}, which represents a Tealium iQ tracking event that's been processed based on an IMPLICIT [ConsentDecision]{@link ConsentDecision}\n *\n * Heavily based on the argument passed to [utag.track]{@link https://community.tealiumiq.com/t5/Tealium-iQ-Tag-Management/utag-track-method/td-p/24578}, since it's designed to be processed by that method.\n *\n * Initial pageviews (handled in the [utag.loader.initdata override]{@link module:extension-1~newUtagLoaderInitdata}) will NOT have metadata like cookies, qps, etc - utag.track calls (handled in the [utag.handler.trigger override]{@link module:extension-1~newUtagHandlerTrigger}) will. That's a byproduct of using utag.handler.trigger, which is later in the load - those metadata will be re-read when the queue is processed, and since this queue isn't persisted between pages, it should be fine like that - the only strange behavior will be that any metadata that aren't present on re-read will still be present after the re-read - only values that are still present will be replaced with new values.\n *\n * An alternative approach could be to manually remove 'cp.\\*', 'dom.\\*', 'ut.\\*', 'qp.\\*', 'meta.\\*' and possibly 'tealium_\\*' (except 'tealium_event') from the 'data' object before queueing - that hasn't been done so far.\n *\n * @static\n * @type {array}\n * @name QueuedEvent\n * @memberof! &lt;global&gt;\n * @property {string} event the type of tracking event, generally 'view' for pageviews or 'link' for other events\n * @property {object} data the Universal Data Object associated with the event (from utag_data or the b object)\n * @property {object} cfg an optional configuration object that can have a 'cb' property (for a callback function) and a 'uids' array, which is a list of tag UIDs that should be triggered by the event, regardless of whether load rules are met.\n * @example\n{\n  &quot;event&quot;: &quot;view&quot;,\n  &quot;data&quot;: {\n    &quot;page_type&quot;: &quot;test_virtual_view&quot;,\n    &quot;cp.utag_main_v_id&quot;: &quot;0174492849d50013581219634d6103079004907101274&quot;,\n    &quot;cp.utag_main__sn&quot;: &quot;4&quot;,\n    &quot;cp.utag_main__se&quot;: &quot;4&quot;,\n    &quot;cp.utag_main__ss&quot;: &quot;0&quot;,\n    &quot;cp.utag_main__st&quot;: &quot;1598990152209&quot;,\n    &quot;cp.utag_main_ses_id&quot;: &quot;1598988112353&quot;,\n    &quot;cp.utag_main__pn&quot;: &quot;3&quot;,\n    &quot;cp.utagdb&quot;: &quot;true&quot;,\n    &quot;dom.referrer&quot;: &quot;&quot;,\n    &quot;dom.title&quot;: &quot;Usercentrics Test&quot;,\n    &quot;dom.domain&quot;: &quot;solutions.tealium.net&quot;,\n    &quot;dom.query_string&quot;: &quot;&quot;,\n    &quot;dom.hash&quot;: &quot;&quot;,\n    &quot;dom.url&quot;: &quot;https://solutions.tealium.net/hosted/usercentrics/test-page-standard.html&quot;,\n    &quot;dom.pathname&quot;: &quot;/hosted/usercentrics/test-page-standard.html&quot;,\n    &quot;dom.viewport_height&quot;: 456,\n    &quot;dom.viewport_width&quot;: 1825,\n    &quot;ut.domain&quot;: &quot;tealium.net&quot;,\n    &quot;ut.version&quot;: &quot;ut4.46.202009011921&quot;,\n    &quot;ut.event&quot;: &quot;view&quot;,\n    &quot;ut.visitor_id&quot;: &quot;0174492849d50013581219634d6103079004907101274&quot;,\n    &quot;ut.session_id&quot;: &quot;1598988112353&quot;,\n    &quot;ut.account&quot;: &quot;services-caleb&quot;,\n    &quot;ut.profile&quot;: &quot;usercentrics-by-tag&quot;,\n    &quot;ut.env&quot;: &quot;prod&quot;,\n    &quot;tealium_event&quot;: &quot;view&quot;,\n    &quot;tealium_visitor_id&quot;: &quot;0174492849d50013581219634d6103079004907101274&quot;,\n    &quot;tealium_session_id&quot;: &quot;1598988112353&quot;,\n    &quot;tealium_session_number&quot;: &quot;4&quot;,\n    &quot;tealium_session_event_number&quot;: &quot;4&quot;,\n    &quot;tealium_datasource&quot;: &quot;&quot;,\n    &quot;tealium_account&quot;: &quot;services-caleb&quot;,\n    &quot;tealium_profile&quot;: &quot;usercentrics-by-tag&quot;,\n    &quot;tealium_environment&quot;: &quot;prod&quot;,\n    &quot;tealium_random&quot;: &quot;2085060854215077&quot;,\n    &quot;tealium_library_name&quot;: &quot;utag.js&quot;,\n    &quot;tealium_library_version&quot;: &quot;4.46.0&quot;,\n    &quot;tealium_timestamp_epoch&quot;: 1598988352,\n    &quot;tealium_timestamp_utc&quot;: &quot;2020-09-01T19:25:52.211Z&quot;,\n    &quot;tealium_timestamp_local&quot;: &quot;2020-09-01T21:25:52.211&quot;,\n    &quot;usercentrics_services_with_consent&quot;: [\n      &quot;Mouseflow&quot;,\n      &quot;Tealium iQ Tag Management&quot;,\n      &quot;Usercentrics Consent Management Platform&quot;\n    ],\n    &quot;usercentrics_consent_type&quot;: &quot;implicit&quot;,\n    &quot;_usercentrics_services_already_processed&quot;: [\n      &quot;Mouseflow&quot;,\n      &quot;Tealium iQ Tag Management&quot;,\n      &quot;Usercentrics Consent Management Platform&quot;\n    ]\n  },\n  &quot;cfg&quot;: {\n    &quot;cb&quot;: function myCallback () {console.log(&quot;Callback fired!&quot;)},\n    &quot;uids&quot;: [\n      11\n    ],\n    &quot;originalUids&quot;: [\n      7,\n      11\n    ],\n    &quot;blockedTagUids&quot;: [\n      11\n    ]\n  }\n}\n*/\n"},"3f3ef786b34d6dd716e1812c8b74a7a0e1f05aa5f3230588f6f5bcd00c6c8392":{"promotedBy":"caleb.jaquith@tealium.com","promotedDraftName":"extension-1.js","promotedTimestamp":"202010290903","name":"qa","code":"/**\n *  Scope       : Pre Loader\n *  Condition   : n/a\n *  Description : CMP 1/2 - Preloader component - prevent TiQ from loading if no consent, queue implicitly consented events to retrigger (for new tags only) if explicit decision is made.\n */\n\n/**\n  * @module extension-1\n  *\n  * @description The 'Pre Loader' extension component of the CMP integration, responsible for stopping Tealium iQ from loading/running as appropriate, and making certain\n  * window-scoped functions available to the other components.\n  */\n\n// Tealium iQ runs Pre Loader extensions in global scope, which would make all variables global. We don't want to do that.\n(function avoidGlobalScopeUnlessExplicit () {\n  // set names for key objects and variables to make them easy to change if needed\n\n  var version = 'v0.10-beta'\n\n  // for the consent information in the b object\n  var nameOfVendorOptInArray = 'usercentrics_services_with_consent'\n  var nameOfConsentTypeString = 'usercentrics_consent_type'\n\n  // for the name in the queue\n  var nameOfImplicitConsentArray = '_usercentrics_services_already_processed'\n\n  // name to use when calling utag.handler.trigger to indicate a consent polling call\n  var nameOfConsentPollingEvent = 'tiq_usercentrics_consent_polling'\n\n  var consentTimeoutInterval = 400 // setTimeout interval in MS - rate to poll for new (explicit) consent decision or correctly formed object\n\n  // check for the Tealium Debug cookie, see https://docs.tealium.com/platforms/javascript/debugging/\n  var tiqInDebugMode = /utagdb=true/.test(document.cookie)\n  var tealiumEnvironment = getTealiumEnvironment() || 'prod' // fall back to prod (stops logging) if something goes wrong with the function\n\n  /**\n   * A window-scoped (global) object used to expose selected functionality.\n   *\n   * @namespace tealiumCmpIntegration\n   * @type {object}\n   * @memberof! &lt;global&gt;\n   */\n  window.tealiumCmpIntegration = window.tealiumCmpIntegration || {}\n\n  /**\n   * The name of the CMP (&quot;Usercentrics Vanilla App&quot; in this case).\n   * @name cmpName\n   * @type {string}\n   * @memberof! tealiumCmpIntegration\n   */\n  window.tealiumCmpIntegration.cmpName = 'Usercentrics Vanilla App'\n\n  /**\n   * A map of Usercentrics Data Processing Services to arrays of Tealium iQ tag UIDs, a {@link ServiceToTagMap ServiceToTagMap}\n   * @name map\n   * @type {object}\n   * @memberof! tealiumCmpIntegration\n   */\n  var map = window.tealiumCmpIntegration.map || {}\n\n  /**\n   * A map of Usercentrics Data Processing Services to arrays of Tealium iQ tag UIDs, a {@link TagToServiceMap TagToServiceMap}\n   * @name tagBasedMap\n   * @type {object}\n   * @memberof! tealiumCmpIntegration\n   */\n  generateTagBasedMap() // populates the window-level object for you as well\n\n  /**\n   * The Service Name for Tealium iQ in Usercentrics (used to decide if the TMS is allowed to run).  Uses the Usercentrics standard name if not provided.\n   * @name tiqServiceName\n   * @type {object}\n   * @memberof! tealiumCmpIntegration\n   * @default 'Tealium iQ Tag Management'\n   * @example\nwindow.tealiumCmpIntegration = window.tealiumCmpIntegration || {}\nwindow.tealiumCmpIntegration.tiqServiceName = &quot;Tealium iQ Tag Management&quot;\n   */\n  var tiqServiceName = window.tealiumCmpIntegration.tiqServiceName || 'Tealium iQ Tag Management' // use the standard name here if not set\n\n  /**\n   * The current version designation.\n   * @name version\n   * @type {string}\n   * @memberof! tealiumCmpIntegration\n   */\n  window.tealiumCmpIntegration.version = version\n\n  /**\n   * A [logger helper function]{@link module:extension-1~logger}, to help Tealium iQ users understand and troubleshoot this CMP integration without unneeded logging in production.\n   * @name logger\n   * @type {function}\n   * @memberof! tealiumCmpIntegration\n   */\n  window.tealiumCmpIntegration.logger = logger\n\n  /**\n   * A [helper function]{@link module:extension-1~getCurrentConsentDecision} that returns the current [ConsentDecision]{@link ConsentDecision}.\n   * @name getCurrentConsentDecision\n   * @type {function}\n   * @memberof! tealiumCmpIntegration\n   */\n  window.tealiumCmpIntegration.getCurrentConsentDecision = getCurrentConsentDecision\n\n  /**\n   * A [helper function]{@link module:extension-1~getCurrentUsercentricsSettingsId} that returns the current Usercentrics settingsId.\n   * @name getCurrentUsercentricsSettingsId\n   * @type {function}\n   * @memberof! tealiumCmpIntegration\n   */\n  window.tealiumCmpIntegration.getCurrentUsercentricsSettingsId = getCurrentUsercentricsSettingsId\n\n  /**\n   * Records the status of the [noview]{@link https://docs.tealium.com/platforms/javascript/settings/#noview} setting on page load.\n   * @name isNoviewSet\n   * @type {boolean}\n   * @memberof! tealiumCmpIntegration\n   */\n  window.tealiumCmpIntegration.isNoviewSet = window.utag_cfg_ovrd &amp;&amp; window.utag_cfg_ovrd.noview === true\n\n  /**\n   * The name to use for the [ConsentDecision]{@link ConsentDecision} array when adding it to Tealium's b object on each event.\n   * @name nameOfVendorOptInArray\n   * @type {string}\n   * @memberof! tealiumCmpIntegration\n   */\n  window.tealiumCmpIntegration.nameOfVendorOptInArray = nameOfVendorOptInArray\n\n  /**\n   * The name to use for the current [ConsentDecision]{@link ConsentDecision}'s 'type' attribute when adding it to Tealium's b object on each event.\n   * @name nameOfConsentTypeString\n   * @type {string}\n   * @memberof! tealiumCmpIntegration\n   */\n  window.tealiumCmpIntegration.nameOfConsentTypeString = nameOfConsentTypeString\n\n  /**\n   * The name to use for the array of implicit tags (which have already been fired) in the 'data' property of {@link QueuedEvent QueuedEvent} objects.\n   * @name nameOfImplicitConsentArray\n   * @type {string}\n   * @memberof! tealiumCmpIntegration\n   */\n  window.tealiumCmpIntegration.nameOfImplicitConsentArray = nameOfImplicitConsentArray\n\n  /**\n   * A [helper function]{@link module:extension-1~overrideUtagFunctions} that overrides certain utag functions to allow tags to be blocked based on CMP response.\n   *\n   * Must be called directly after the '##UTGEN##' reference by [editing]{@link https://community.tealiumiq.com/t5/iQ-Tag-Management/Managing-Tag-Templates/ta-p/21713} the 'utag loader' template, as shown in the example.\n   * @name overrideUtagFunctions\n   * @type {function}\n   * @memberof! tealiumCmpIntegration\n   * @example\n// ... utag loader template ...\n\n##UTGEN##\n// override two utag functions for the Usercentrics CMP Integration, to allow tags to be blocked as needed\nwindow.tealiumCmpIntegration &amp;&amp; window.tealiumCmpIntegration.overrideUtagFunctions &amp;&amp; window.tealiumCmpIntegration.overrideUtagFunctions()\n\n// ... utag loader template continues...\n\n   */\n  window.tealiumCmpIntegration.overrideUtagFunctions = overrideUtagFunctions\n\n  /**\n   * A queue for any events that Tealium iQ processes with IMPLICIT consent (to allow those events to be re-processed for new Services in the event of an EXPLICIT consent choice by the user).\n   *\n   * Each element in the queue is a [QueuedEvent]{@link QueuedEvent}\n   * @name implicitEventQueue\n   * @type {array}\n   * @memberof! tealiumCmpIntegration\n   */\n  window.tealiumCmpIntegration.implicitEventQueue = window.tealiumCmpIntegration.implicitEventQueue || []\n\n  /**\n   * A queue for any events that are triggered before Tealium iQ AND Usercentrics have both loaded.\n   *\n   * Each element in the queue is a [QueuedEvent]{@link QueuedEvent}\n   * @name earlyEventQueue\n   * @type {array}\n   * @memberof! tealiumCmpIntegration\n   */\n  window.tealiumCmpIntegration.earlyEventQueue = window.tealiumCmpIntegration.earlyEventQueue || []\n\n  /**\n   * Allows us to make sure we don't log certain messages more than once, especially useful while polling to avoid overwhelming the user.\n   * @function messageNotLoggedYet\n   * @param {*} messageId a string or number to uniquely identify a message for the purposes of deduplication\n   * @returns {boolean} 'true' if the message hasn't been logged yet (and should be logged), otherwise 'false'\n   */\n  var alreadyLoggedMessageIds = {}\n  function messageNotLoggedYet (messageId) {\n    var output = false\n    if (typeof alreadyLoggedMessageIds[messageId] === 'undefined') {\n      alreadyLoggedMessageIds[messageId] = true\n      output = true\n    }\n    return output\n  }\n\n  // if noload is set to 'true', don't interfere, just return to exit this function and allow that setting to stop TiQ load as usual.\n  if (window.utag_cfg_ovrd &amp;&amp; window.utag_cfg_ovrd.noload === true) return false\n\n  logger('CMP integration active - Usercentrics/TiQ' + (tiqInDebugMode ? &quot;\\n\\nDEBUGGING TIP: Use /SENDING|\\\\*\\\\*\\\\*\\\\*/ in the browser console as the 'filter' to show only CMP and tag send notifications.&quot; : '\\n\\nActivate TiQ Debug Mode for more details: https://docs.tealium.com/platforms/javascript/debugging/'), true)\n  var cmpResponse = cmpConsentCheck()\n  // core business/GDPR logic, decides if TiQ should load at all\n  reactToCmpResponse(cmpResponse)\n\n  /**\n   * The core CMP integration logic, which decides if Tealium iQ should be allowed to run, or if it needs to be stopped\n   * until an understandable response that includes permission for Tealium iQ to run is found.\n   *\n   * @function reactToCmpResponse\n   * @param {object} cmpResponse The response from the Usercentrics Vanilla App\n   */\n  function reactToCmpResponse (cmpResponse) {\n    var usercentricsFound = typeof cmpResponse === 'object'\n    var foundWellFormedConsentDecision = checkForWellFormedDecision(cmpResponse)\n    var tagBasedMap = generateTagBasedMap()\n    var foundMapEntryForActiveSetting = Object.keys(tagBasedMap).length &gt; 0\n    var foundExplicitConsent = checkForExplicitConsentDecision(cmpResponse)\n    var tiqIsAllowedToFire = checkForTiqConsent(cmpResponse)\n    var tiqIsLoaded = window.utag &amp;&amp; window.utag.handler &amp;&amp; window.utag.handler.iflag === 1\n\n    if (!usercentricsFound) {\n      /**\n       * CASE A1: no Usercentrics CMS found\n       *\n       * STOP and fire nothing at all\n       * RETRY after a delay\n       */\n      if (messageNotLoggedYet(1)) logger('No Usercentrics CMP found on page.\\n\\nStopping TiQ (no cookies set/removed, no tags fired).\\n\\nPolling for changes.')\n      window.setTimeout(recheckForCmpAndConsent, consentTimeoutInterval)\n      stopTiq()\n    } else if (!foundMapEntryForActiveSetting) {\n      /**\n        * CASE A7: No map found for the current settingsId\n        *\n        * STOP and fire nothing at all. Do not retry.\n        */\n      if (messageNotLoggedYet(2)) logger('No map found for current Usercentrics Setting ID.\\n\\nStopping TiQ (no cookies set/removed, no tags fired).\\n\\nNo retries.')\n      stopTiq()\n    } else if (!foundWellFormedConsentDecision) {\n      /**\n       * CASE A2: Usercentrics CMS found but consent response wasn't well-formed/complete/understandable\n       *\n       * STOP and fire nothing at all\n       * RETRY after a delay\n       */\n      if (messageNotLoggedYet(3)) logger('Found Usercentrics CMP and got response, but didn\\'t understand the response.\\n\\nStopping TiQ (no cookies set/removed, no tags fired).\\n\\nPolling for changes.')\n      window.setTimeout(recheckForCmpAndConsent, consentTimeoutInterval)\n      stopTiq()\n    } else if (!tiqIsAllowedToFire) {\n      /**\n       * CASE A3: Usercentrics CMS found and consent response was well-formed, BUT TiQ didn't have an opt-in\n       *\n       * STOP and fire nothing at all\n       * RETRY after a delay\n       */\n      if (messageNotLoggedYet(4)) logger('Found Usercentrics CMP and got well-formed response, but TiQ isn\\'t allowed to run based on the response.\\n\\nStopping TiQ (no cookies set/removed, no tags fired).\\n\\nPolling for changes.')\n      window.setTimeout(recheckForCmpAndConsent, consentTimeoutInterval)\n      stopTiq()\n    } else if (!foundExplicitConsent) {\n      /**\n       * CASE A4: Usercentrics CMS found AND response was understandable (AND includes an implicit TiQ consent), BUT the user hasn't made an explicit decision yet\n       *\n       * ALLOW TO LOAD for any 'default opt-in' tags (filter logic in Extension B)\n       * RETRY after a delay (in case there's an explicit decision, since implicit decisions usually mean the prompt is displayed)\n       */\n      if (messageNotLoggedYet(5)) logger('Found Usercentrics CMP and got well-formed IMPLICIT response which includes TiQ.\\n\\nAllowing certain tags to fire based on IMPLICIT consent.\\n\\nPolling for changes.')\n      window.setTimeout(recheckForCmpAndConsent, consentTimeoutInterval)\n      if (tiqIsLoaded) {\n        processEarlyQueue()\n      } else {\n        window.setTimeout(recheckForCmpAndConsent, consentTimeoutInterval)\n      }\n      triggerOrQueue()\n    } else if (foundExplicitConsent) {\n      /**\n       * CASE A5: Usercentrics CMS found AND response was understandable, AND the user has made an explicit consent decision AND TiQ is allowed\n       *\n       * ALLOW TO LOAD for any opted-in tags (filter logic in Extension B), do not retry.\n       */\n      if (messageNotLoggedYet(6)) logger('Found Usercentrics CMP and got well-formed EXPLICIT response which includes TiQ.\\n\\nAllowing certain tags to fire based on EXPLICIT consent.\\n\\nNo further polling.')\n      // only call if we've been polling (on initial load, it will load automatically)\n      if (tiqIsLoaded) {\n        processEarlyQueue()\n        processImplicitQueue()\n      } else {\n        window.setTimeout(recheckForCmpAndConsent, consentTimeoutInterval)\n      }\n      triggerOrQueue()\n    } else {\n      /**\n        * CASE A6: Something went wrong with this extension.\n        *\n        * STOP and fire nothing at all. Do not retry.\n        */\n      if (messageNotLoggedYet(7)) logger('Something unexpected went wrong.\\n\\nStopping TiQ (no cookies set/removed, no tags fired).\\n\\nNo retries.')\n      stopTiq()\n    }\n  }\n\n  /**\n   * Override utag.loader.initdata and utag.handler.trigger to allow Tealium iQ Tags to be blocked if the user hasn't consented.\n   *\n   * @function overrideUtagFunctions\n   * @returns {boolean} 'true' if the function was overridden successfully by this request, 'false' if not (because it was already overridden)\n   */\n  function overrideUtagFunctions () {\n    // don't override more than once, assume that if one function has been overridden, both have\n    if (window.utag.handler.trigger.toString().indexOf('tealiumCmpIntegration') !== -1) {\n      return true\n    }\n\n    // the initial view is handled differently than subsequent events\n    // this is safe to to override even if noview is set (because it will never be called in that case)\n    window.utag.loader.initdata_old = window.utag.loader.initdata\n    window.utag.loader.initdata = newUtagLoaderInitdata\n\n    window.utag.handler.trigger_old = window.utag.handler.trigger\n    window.utag.handler.trigger = newUtagHandlerTrigger\n    logger('Overrode utag functions!')\n\n    if (window.utag.handler.trigger.toString().indexOf('tealiumCmpIntegration') !== -1) {\n      return true\n    }\n\n    return false\n  }\n\n  /**\n   * An overridden version of the Tealium iQ function utag.loader.initdata.\n   *\n   * Calls the original function, respects possible noview settings, rechecks the user consent, and calls queueEventWithoutFiringImplicitServices\n   * if only an IMPLICIT consent is found (after recording the IMPLICIT services, to avoid double-firing).\n   *\n   * That same event can then be re-processed for any new Services if an EXPLICIT consent decision later made.\n   *\n   * @function newUtagLoaderInitdata\n   */\n  function newUtagLoaderInitdata () {\n    window.utag.loader.initdata_old()\n    // make sure we don't queue this initial page load twice, and respect the configured noview setting\n    if (!window.tealiumCmpIntegration.isNoviewSet &amp;&amp; !window.tealiumCmpIntegration.alreadyFiredInitialViewEvent) {\n      window.tealiumCmpIntegration.alreadyFiredInitialViewEvent = true\n      var consentedServices = getCurrentConsentDecision()\n      if (consentedServices.type === 'implicit') {\n        window.tealiumCmpIntegration.implicitServices = consentedServices\n        // we don't need to fire implicit services in this case, because TiQ's loading process will fire them\n        queueEventWithoutFiringImplicitServices({\n          event: 'view',\n          data: window.utag.handler.C(window.utag.data)\n        })\n      }\n    }\n  }\n\n  /**\n   * Refresh [tealiumCmpIntegration.tagBasedMap]{@link tealiumCmpIntegration.tagBasedMap} and return that new map, helps smooth out any timing issues between Usercentrics and Tealium iQ load.\n   *\n   * @function generateTagBasedMap\n   * @returns a [TagToServiceMap]{@link TagToServiceMap}\n   */\n  function generateTagBasedMap () {\n    var tagBasedMap = getTagBasedMap(map)\n    window.tealiumCmpIntegration.tagBasedMap = tagBasedMap\n    return tagBasedMap\n  }\n\n  /**\n   * Tealium iQ's utag.handler.trigger normally causes tags to fire. For this integration, we override that function to support blocking tags without consent.\n   *\n   * @function newUtagHandlerTrigger\n   *\n   * @param {*} a can be an object or a string\n   * @param {*} b\n   * @param {*} c\n   */\n  function newUtagHandlerTrigger (a, b, c) {\n    /**\n     * Trigger CASES (utag.handler.trigger override)\n     *\n     * We need to queue the events if we only have implicit consent, to allow a selective retrigger if/when we get an explicit decision.\n     */\n    var isPureConsentEvent = (a === nameOfConsentPollingEvent &amp;&amp; !b &amp;&amp; !c)\n    var isNoviewSet = window.tealiumCmpIntegration.isNoviewSet || true // assume noview if something went wrong with the global, to avoid firing tracking in error\n\n    var consentedServices = getCurrentConsentDecision()\n    var consentType = (consentedServices &amp;&amp; consentedServices.type) || 'none'\n\n    var isUsercentricsReady = consentType === 'implicit' || consentType === 'explicit'\n    var isTealiumReady = window.utag &amp;&amp; window.utag.handler &amp;&amp; window.utag.handler.iflag === 1\n\n    if (!isPureConsentEvent) {\n      logger('utag.handler.trigger called with:\\n\\n' + JSON.stringify(arguments, null, 2))\n    }\n\n    if (!isUsercentricsReady &amp;&amp; !isTealiumReady) {\n      consentedServices.type = 'tealium-and-usercentrics-loading'\n      logger('Waiting for Usercentrics and Tealium to be ready, queueing early event.')\n      queueEarlyEvent(a, b, c)\n      return false\n    } else if (!isUsercentricsReady) {\n      consentedServices.type = 'usercentrics-loading'\n      logger('Usercentrics is still loading, queueing early event')\n      queueEarlyEvent(a, b, c)\n      return false\n    } else if (!isTealiumReady) {\n      consentedServices.type = 'tealium-still-loading'\n      logger('Tealium iQ is still loading, queueing early event')\n      queueEarlyEvent(a, b, c)\n      return false\n    }\n\n    // if an array of tagUids is passed, that forces them to fire regardless of load rules\n    // or consent, so we need to filter that array before allowing it to be processed\n    var hasTagUidArray = c &amp;&amp; typeof c === 'object' &amp;&amp; c.uids &amp;&amp; c.uids &amp;&amp; window.utag.ut.typeOf(c.uids) === 'array'\n    var uidMap = generateTagBasedMap()\n    var allowedTagUids = []\n    var blockedTagUids = []\n    var serviceName\n    var tagUid\n    if (hasTagUidArray) {\n      for (var i = 0; i &lt; c.uids.length; i++) {\n        tagUid = c.uids[i]\n        serviceName = uidMap[tagUid] || '(missing)'\n        // only push consented services into the new array\n        if (consentedServices.indexOf(serviceName) !== -1) {\n          allowedTagUids.push(tagUid)\n        } else {\n          blockedTagUids.push(tagUid)\n        }\n      }\n      // replace the original with the filtered array (can also be empty, if none of them were allowed)\n      logger('Call included tagUid array:\\n\\n' + JSON.stringify(c.uids) + '\\n\\nwhich was replaced by the filtered version:\\n\\n' + JSON.stringify(allowedTagUids))\n      c.originalUids = c.uids.slice() // make a shallow copy\n      c.uids = allowedTagUids\n      c.blockedTagUids = blockedTagUids\n    }\n\n    if (consentType === 'explicit') {\n      /**\n       * CASE T2: expected globals are populated, consent is EXPLICIT\n       *\n       * FIRE allowed tags (explicit)\n       * utag.handler.trigger override PROCESSES the queue, which will include any queued events from CASE A4, making sure not to re-fire any default\n       *   opt-in tags that were already fired for the queued events\n       */\n      // make sure TiQ loads\n      processEarlyQueue()\n      processImplicitQueue()\n      triggerTiqLoad()\n      // fire the current event if it's not just a polling event\n      if (!isPureConsentEvent) {\n        return window.utag.handler.trigger_old(a, b, c)\n      }\n    } else if (consentType === 'implicit') {\n      /**\n       * CASE T3: expected globals are populated, consent is IMPLICIT\n       *\n       * FIRE allowed tags (implicit)\n       * utag.handler.trigger override KEEPS a queue/record that includes\n       *  - the event(s) that were processed based on implicit consent\n       *  - which tags were allowed to process each event (are set to implicit opt-in)\n       */\n      processEarlyQueue()\n      // fire the initial view if appropriate, and queue it\n      triggerTiqLoad()\n      window.tealiumCmpIntegration.implicitServices = consentedServices\n\n      // queue the initial 'view' on pageload if appropriate\n      if (!isNoviewSet &amp;&amp; isTealiumReady &amp;&amp; !window.tealiumCmpIntegration.alreadyFiredInitialViewEvent) {\n        window.tealiumCmpIntegration.alreadyFiredInitialViewEvent = true\n        queueEventAndFireImplicitServices('view', window.utag.handler.C(window.utag.data))\n      }\n      // queue the current event if it exists (and this isn't just consent polling)\n      if (!isPureConsentEvent) {\n        return queueEventAndFireImplicitServices(a, b, c)\n      }\n    } else if (consentType === 'missing-map') {\n      logger('Something went wrong - all tags were blocked because no consent map was found for the active setting ID.')\n      return false\n    } else if (consentType === 'missing-tiq-consent') {\n      logger('Something went wrong - all tags were blocked because no consent was found for &quot;' + tiqServiceName + '&quot;, configured Tealium iQ name.\\n\\nConsent found: ' + JSON.stringify(consentedServices, null, 2))\n      return false\n    } else {\n      /**\n       * CASE T1: expected variables not populated (misconfiguration/error case)\n       *\n       * STOP and fire nothing at all. Do not retry or queue the event.\n       */\n      logger('Something went wrong - all tags were blocked because the consent response was not understood.')\n      return false\n    }\n  }\n\n  /**\n   * Process any queued tracking events from [the early event queue]{@link tealiumCmpIntegration.earlyEventQueue} (can include pageviews) for any currently-consented Services.\n   *\n   * Intended to be called first understandable implicit consent.\n   *\n   * @function processEarlyQueue\n   */\n  function processEarlyQueue () {\n    var queuedEvent\n    window.tealiumCmpIntegration.earlyEventQueue = window.tealiumCmpIntegration.earlyEventQueue || []\n    while (window.tealiumCmpIntegration.earlyEventQueue.length &gt; 0) {\n      // process past events\n      queuedEvent = window.tealiumCmpIntegration.earlyEventQueue.shift()\n      logger('Processing queued early event for currently consented tags: ' + JSON.stringify(queuedEvent, null, 2))\n      window.utag.track(queuedEvent)\n    }\n  }\n\n  /**\n   * Process any queued tracking events from [the global queue]{@link tealiumCmpIntegration.implicitEventQueue} (can include pageviews) for any newly-consented Services.\n   *\n   * Intended to be called on new EXPLICIT consent decision - queued events have already had IMPLICTLY consented tags fired, so those need to be excluded.\n   *\n   * @function processImplicitQueue\n   */\n  function processImplicitQueue () {\n    var alreadyLogged = false\n    var queuedEvent\n    window.tealiumCmpIntegration.implicitEventQueue = window.tealiumCmpIntegration.implicitEventQueue || []\n    while (window.tealiumCmpIntegration.implicitEventQueue.length &gt; 0) {\n      if (!alreadyLogged) {\n        alreadyLogged = true\n        logger('Explicit consent tracking request received - processing past implicitly tracked events (' + window.tealiumCmpIntegration.implicitEventQueue.length + ') for any new explicit tags.')\n      }\n      // process past events\n      queuedEvent = window.tealiumCmpIntegration.implicitEventQueue.shift()\n      logger('Triggering event for explicitly-consented tags: ' + JSON.stringify(queuedEvent))\n      window.utag.track(queuedEvent)\n    }\n  }\n\n  /**\n   * Queue a [tracking event]{@link QueuedEvent} in [the early queue]{@link tealiumCmpIntegration.earlyEventQueue}, without firing any tags.\n   *\n   * Intended to be called for events that triggered before we get an understandable response from Usercentrics.\n   *\n   * @function queueEarlyEvent\n   * @param {*} a the 'a' argument from utag.handler.trigger\n   * @param {*} b the 'b' argument from utag.handler.trigger\n   * @param {*} c the 'c' argument from utag.handler.trigger\n   *\n   */\n  function queueEarlyEvent (a, b, c) {\n    a = a || {}\n\n    // make a copy, in case shared objects are used (like utag_data, or a similar global) - snapshot those\n    if (typeof b === 'object') {\n      b = JSON.parse(JSON.stringify(b))\n    }\n    // convert to a more standard format\n    if (typeof a === 'string') {\n      a = { event: a, data: b || {}, cfg: c }\n    }\n\n    // if there's a tagUid array, don't queue the already-fired tags - instead, swap that with any blocked tags\n    if (a &amp;&amp; a.cfg &amp;&amp; window.utag.ut.typeOf(a.cfg.uids) === 'array') {\n      a.cfg.uids = a.cfg.blockedTagUids.slice()\n    }\n\n    // nothing will be allowed to fire\n    a.data[nameOfImplicitConsentArray] = []\n\n    window.tealiumCmpIntegration.earlyEventQueue = window.tealiumCmpIntegration.earlyEventQueue || []\n    window.tealiumCmpIntegration.earlyEventQueue.push(a)\n    logger('Queued early event!')\n  }\n\n  /**\n   * Queue a [tracking event]{@link QueuedEvent} in [the global queue]{@link tealiumCmpIntegration.implicitEventQueue}, without firing any implictly consented Services.\n   *\n   * Intended to be called for the initial pageview on load, since the load process will have already fired the implicit services.\n   *\n   * @function queueEventWithoutFiringImplicitServices\n   * @param {*} a the 'a' argument from utag.handler.trigger\n   * @param {*} b the 'b' argument from utag.handler.trigger\n   * @param {*} c the 'c' argument from utag.handler.trigger\n   *\n   */\n  function queueEventWithoutFiringImplicitServices (a, b, c) {\n    a = a || {}\n\n    // make a copy, in case shared objects are used (like utag_data, or a similar global) - snapshot those\n    if (typeof b === 'object') {\n      b = JSON.parse(JSON.stringify(b))\n    }\n    // convert to a more standard format\n    if (typeof a === 'string') {\n      a = { event: a, data: b || {}, cfg: c }\n    }\n\n    // if there's a tagUid array, don't queue the already-fired tags - instead, swap that with any blocked tags\n    if (a &amp;&amp; a.cfg &amp;&amp; window.utag.ut.typeOf(a.cfg.uids) === 'array') {\n      a.cfg.uids = a.cfg.blockedTagUids.slice()\n    }\n\n    a.data[nameOfImplicitConsentArray] = window.tealiumCmpIntegration.implicitServices || []\n\n    window.tealiumCmpIntegration.implicitEventQueue = window.tealiumCmpIntegration.implicitEventQueue || []\n    window.tealiumCmpIntegration.implicitEventQueue.push(a)\n  }\n\n  /**\n   * Queue a [tracking event]{@link QueuedEvent} in [the global queue]{@link tealiumCmpIntegration~implicitEventQueue}, without firing any implictly consented Services.\n   *\n   * Intended to be called for all events other than the initial page load.\n   *\n   * @function queueEventAndFireImplicitServices\n   * @param {*} a the 'a' argument from utag.handler.trigger\n   * @param {*} b the 'b' argument from utag.handler.trigger\n   * @param {*} c the 'c' argument from utag.handler.trigger\n   *\n   */\n  function queueEventAndFireImplicitServices (a, b, c) {\n    // fire the implicit tags\n    window.utag.handler.trigger_old(a, b, c)\n    logger('Implicit consent tracking request fired (or queued, if utag hasn\\'t loaded).')\n    return queueEventWithoutFiringImplicitServices(a, b, c)\n  }\n\n  /**\n   * Generate a {@link TagToServiceMap TagToServiceMap} based on a {@link ServiceToTagMap ServiceToTagMap}\n   *\n   * @function getTagBasedMap\n   * @param {object} map a {@link ServiceToTagMap ServiceToTagMap} object\n   * @return {object} a {@link TagToServiceMap TagToServiceMap}\n   */\n  function getTagBasedMap (map) {\n    // generate a lookup based on the tagUid\n    if (typeof map !== 'object') return {}\n    var settingsId = getCurrentUsercentricsSettingsId() || ''\n    if (typeof settingsId !== 'string' || settingsId === '') return {}\n    var settingSpecificMap = map[settingsId] || {}\n    var serviceNames = Object.keys(settingSpecificMap)\n    var uidMap = {}\n    for (var i = 0; i &lt; serviceNames.length; i++) {\n      for (var j = 0; j &lt; settingSpecificMap[serviceNames[i]].length; j++) {\n        uidMap[settingSpecificMap[serviceNames[i]][j]] = serviceNames[i]\n      }\n    }\n    return uidMap\n  }\n\n  /**\n   * Get the current Usercentrics settingsId from the page.\n   *\n   * @returns {string} the Usercentrics settingsId, defaults to an empty string if none is found\n   */\n  function getCurrentUsercentricsSettingsId () {\n    return (window.usercentrics &amp;&amp; window.usercentrics.settingsId) || ''\n  }\n\n  /**\n   * Trigger the core logic with an up-to-date array of objects returned by calling [usercentrics.getConsents]{@link https://docs.usercentrics.com/#/?id=getconsents}\n   * @function recheckForCmpAndConsent\n   */\n  function recheckForCmpAndConsent () {\n    var newConsentResponse = cmpConsentCheck()\n    reactToCmpResponse(newConsentResponse)\n  }\n\n  /**\n   * Call [usercentrics.getConsents]{@link https://docs.usercentrics.com/#/?id=getconsents} to get the current consent decision.\n   * @function cmpConsentCheck\n   */\n  function cmpConsentCheck () {\n    if (!window.usercentrics || typeof window.usercentrics.getConsents !== 'function') return false\n    var cmpConsentArray = window.usercentrics.getConsents()\n    return cmpConsentArray\n  }\n\n  /**\n   * Indicates if Usercentrics has loaded and returned a well-formed indication of user consent.\n   * @function checkForWellFormedDecision\n   * @param cmpConsentArray the array of objects returned by [usercentrics.getConsents]{@link https://docs.usercentrics.com/#/?id=getconsents}.\n   * @returns {boolean} 'true' if the consent decision is well-formed, otherwise 'false'\n   */\n  function checkForWellFormedDecision (cmpConsentArray) {\n    // treat things we don't understand as an opt-out\n    if (toString.call(cmpConsentArray) !== '[object Array]') return false\n    // use the first entry as a proxy for all\n    if (cmpConsentArray &amp;&amp; cmpConsentArray[0] &amp;&amp; typeof cmpConsentArray[0].dataProcessingService === 'string') {\n      return true\n    }\n    return false\n  }\n\n  /**\n   * Indicates if the user has made an EXPLICIT decision\n   * @function checkForExplicitConsentDecision\n   * @param cmpConsentArray the array of objects returned by [usercentrics.getConsents]{@link https://docs.usercentrics.com/#/?id=getconsents}.\n   * @returns {boolean} 'true' if the consent decision is EXPLICIT otherwise 'false'\n   */\n  function checkForExplicitConsentDecision (cmpConsentArray) {\n    // treat things we don't understand as an opt-out\n    if (toString.call(cmpConsentArray) !== '[object Array]') return false\n    // use the first entry as a proxy for all\n    if (cmpConsentArray &amp;&amp; cmpConsentArray[0] &amp;&amp; cmpConsentArray[0].updatedBy === 'explicit') {\n      return true\n    }\n    return false\n  }\n\n  /**\n   * Indicates if Tealium iQ has permission to run (and fire tags).\n   * @function checkForTiqConsent\n   * @param cmpConsentArray the array of objects returned by [usercentrics.getConsents]{@link https://docs.usercentrics.com/#/?id=getconsents}.\n   * @returns {boolean} 'true' if TiQ is allowed to run, otherwise 'false'\n   */\n  function checkForTiqConsent (cmpConsentArray) {\n    var foundOptIn = false\n    // treat things we don't understand as an opt-out\n    if (toString.call(cmpConsentArray) !== '[object Array]') return false\n    // check vendors if there's an object, look for at least one\n    cmpConsentArray.forEach(function (tagInfo) {\n      if (tagInfo.consentStatus === true &amp;&amp; tagInfo.dataProcessingService === tiqServiceName) {\n        foundOptIn = true\n      }\n    })\n    return foundOptIn\n  }\n\n  /**\n   * Create an instance of\n   * @param {array} cmpConsentArray the array of objects returned by calling [usercentrics.getConsents]{@link https://docs.usercentrics.com/#/?id=getconsents}\n   */\n  function getVendorConsentsFromCmpConsentArray (cmpConsentArray) {\n    var vendorArray = []\n\n    var isWellFormed = checkForWellFormedDecision(cmpConsentArray)\n\n    if (!isWellFormed) {\n      vendorArray.type = 'missing-well-formed-response'\n      return []\n    }\n\n    var tagBasedMap = generateTagBasedMap()\n\n    // if there is no mapping for the settings id, we need to change the console output\n    var currentSettingsIdHasMapping = (typeof tagBasedMap === 'object' &amp;&amp; Object.keys(tagBasedMap).length &gt; 0)\n\n    if (!currentSettingsIdHasMapping) {\n      vendorArray.type = 'missing-map'\n      return []\n    }\n\n    cmpConsentArray &amp;&amp; cmpConsentArray.forEach(function (tagConsent) {\n      if (tagConsent.consentStatus === true) {\n        vendorArray.push(tagConsent.dataProcessingService)\n      }\n    })\n    vendorArray.type = checkForExplicitConsentDecision(cmpConsentArray) ? 'explicit' : 'implicit'\n\n    if (checkForTiqConsent(cmpConsentArray) === false) {\n      // change the consent type, but leave the array for debugging purposes\n      vendorArray.type = 'missing-tiq-consent'\n    }\n\n    return vendorArray\n  }\n\n  /**\n   * Get the current consent decision from the CMP for the active Setting\n   * @function getCurrentConsentDecision\n   * @returns a {@link ConsentDecision ConsentDecision}\n   */\n  function getCurrentConsentDecision () {\n    var freshConsent = cmpConsentCheck()\n\n    return getVendorConsentsFromCmpConsentArray(freshConsent)\n  }\n\n  /**\n   *  A conditional logging function - we can't use utag.DB directly because some of our logic needs to be preloader, but we can mimic the same logic so that our logging only displays when TiQ is in debug mode and/or not in Prod, or is explicitly forced.\n   * @function logger\n   * @param {string} message the message to be conditionally shown\n   * @param {boolean} showOutsideDebugMode if 'true', forces the message to shown outside of debug mode, except on Prod\n   */\n  function logger (message, showOutsideDebugMode) {\n    if (typeof tealiumEnvironment === 'undefined' || tealiumEnvironment === 'prod') {\n      // don't allow anything outside of debug mode on prod (disable this flag)\n      showOutsideDebugMode = false\n    }\n\n    if (showOutsideDebugMode || tiqInDebugMode) {\n      message = '\\n' + message + '\\n'\n      var formattedArr = []\n      formattedArr.push('****************')\n      var messageArr = message.split('\\n')\n      messageArr.forEach(function (messageLine) {\n        formattedArr.push('*  ' + messageLine)\n      })\n      formattedArr.push('****************')\n      var outputString = formattedArr.join('\\n')\n      console.log(outputString)\n    }\n  }\n\n  /**\n   * Stops Tealium iQ from loading (the TMS will not load tags or set a cookie if this function is called in Pre Loader), using the {@link https://docs.tealium.com/platforms/javascript/settings/#noload noload} setting\n   * @function stopTiq\n   */\n  function stopTiq () {\n    // logger(&quot;stopTiq function fired&quot;)\n    window.utag_cfg_ovrd = window.utag_cfg_ovrd || {}\n    window.utag_cfg_ovrd.noload = true\n  }\n\n  /**\n   * Allows TiQ to finish loading, intended to be called when a well-formed consent response is received, and that response allows Tealium iQ to run.\n   *\n   * Works by setting {@link https://docs.tealium.com/platforms/javascript/settings/#noload noload} to 'false' and calling Tealium iQ's utag.loader.PINIT method.\n   *\n   * If noload was 'true' and this function runs it must've been set to true by our own {@link module:extension-1~stopTiq stopTiq} function, because otherwise Tealium iQ wouldn't have been allowed to load/poll in the first place.\n   * @function triggerTiqLoad\n   * @returns {boolean} 'true' if Tealium iQ was successfully triggered, 'false' if it wasn't triggered because it's already initiated\n   */\n  function triggerTiqLoad () {\n    // if usercentrics is ready on the first request, TiQ won't have loaded yet at all - let it load naturally\n    if (!window.utag) {\n      return true\n    }\n    // if TiQ has already loaded but these flags aren't truthy, we've interrupted the load and should retrigger it\n    // initial load / view (noview logic handled in utag.handler.trigger function itself)\n    if (!window.utag.handler || !window.utag.handler.iflag) {\n      // we don't need to reload actually, just allow it to finish loading\n      window.utag.cfg.noload = false // safe because this code only runs if it was set to false originally\n      window.utag.loader.PINIT()\n      return true\n    }\n    // already loaded\n    return false\n  }\n\n  /**\n   * If Tealium iQ hasn't loaded, load it (calling utag.handler.trigger in the process), otherwise call utag.handler.trigger.\n   * @function triggerOrQueue\n   */\n  function triggerOrQueue () {\n    var successfullyTriggeredLoadIfNeeded = triggerTiqLoad()\n    if (!successfullyTriggeredLoadIfNeeded) {\n      // explicit consent from polling, but load has already been triggered\n      return window.utag.handler.trigger(nameOfConsentPollingEvent)\n    }\n  }\n  /**\n   * Get the the current Tealium iQ environment.\n   *\n   * Since this runs in Pre Loader, it needs to use regex to recognize the utag.js file in the DOM and read the environment from the file name (there are no utag functions or objects at this point in the load).\n   *\n   * NOTE: This doesn't work correctly when using the the Environment Switcher (because the original script is added to the DOM instead of the new one, and the 307 redirect that's used to pull the new file(s) only changes the response, not the script element itself).\n   *\n   * If you're using the Environment Switcher on Prod and would like to see console output, set the [debug cookie]{@link https://docs.tealium.com/platforms/javascript/debugging/}.\n   *\n   * @function getTealiumEnvironment\n   * @returns {boolean} 'true' if Tealium iQ was successfully triggered, 'false' if it wasn't triggered because it's already initiated\n   */\n  function getTealiumEnvironment () {\n    var allScripts = document.getElementsByTagName('script')\n    var re = /\\/([^/]*)\\/utag\\.js(\\?.*)*$/\n    for (var i = 0; i &lt; allScripts.length; i++) {\n      var result = re.exec(allScripts[i].src) // can be null\n      if (result &amp;&amp; result[1]) { // [1] is the result of the match\n        return result[1]\n      }\n    }\n    return 'prod' // default to guessing we're in prod, just in case we're actually in prod (to avoid logging in Prod)\n  }\n})()\n\n// Document key data structures here for clarity.\n\n/**\n * An array of Usercentrics Service Names that have permission to run (uses the 'dataProcessingService' property from [usercentrics.getConsents]{@link https://docs.usercentrics.com/#/?id=getconsents}).\n *\n * Also includes a 'type' property that indicates whether the consent decision is IMPLICIT or EXPLICT.\n *\n * @static\n * @type {array}\n * @name ConsentDecision\n * @memberof! &lt;global&gt;\n * @property {string} type the type of consent, will be either 'implicit' or 'explicit'\n * @example\nvar exampleConsentDecision = window.tealiumCmpIntegration.getCurrentConsentDecision()\n\nJSON.stringify(exampleConsentDecision)\n// [&quot;Google Analytics&quot;,&quot;Another Tag&quot;,&quot;Tealium iQ Tag Management&quot;]\n\nexampleConsentDecision.type\n// &quot;explicit&quot;\n\nexampleConsentDecision.length\n// 3\n */\n\n/**\n * Assigns Tealium iQ Tags to Usercentrics Service Names. Each service can have multiple tags, but each tag can only have one service.  If the same tag UID appears in multiple Service arrays, only one will be used.\n *\n * The keys for the main object are Setting-IDs from Usercentrics, inside that are key/value pairs where the key is a Service Name from Usercentrics, and the value is an array of TagUIDs from Tealium iQ.\n *\n * This needs to be provided as per the example below, in [tealiumCmpIntegration.map]{@link namespace:tealiumCmpIntegration~map}.\n *\n * An [example Tealium iQ extension]{@link module:example-map} is provided as well.\n *\n * @static\n * @type {object}\n * @name ServiceToTagMap\n * @memberof! &lt;global&gt;\n * @example\nwindow.tealiumCmpIntegration = window.tealiumCmpIntegration || {}\nwindow.tealiumCmpIntegration.map = {\n  'yPyIAIIxY': {\n    'Google Analytics': [6, 8, 10],\n    'Mouseflow': [7, 9],\n    'Another Tag': [11]\n  }\n}\n */\n\n/**\n * A simple lookup, with Tealium iQ tag UIDs as keys and the associated Usercentrics service name as strings as values. Each service can be associated with multiple tags, but each tag can be associated with one service.\n *\n * The example is based on the {@link ServiceToTagMap ServiceToTagMap} example, where the Usercentrics settingsId on the active page is 'yPyIAIIxY'.\n *\n * This object is automatically generated by the [getTagBasedMap]{@link module:extension-1~getTagbasedMap} method, and made available globally in [tealiumCmpIntegration.tagBasedMap]{@link tealiumCmpIntegration~tagBasedMap} for debugging and use within the extensions.\n *\n * @static\n * @type {object}\n * @name TagToServiceMap\n * @memberof! &lt;global&gt;\n * @example\n{\n  6: 'Google Analytics',\n  7: 'Mouseflow',\n  8: 'Google Analytics',\n  9: 'Mouseflow',\n  10: 'Google Analytics',\n  11: 'Another Tag'\n}\n */\n\n/**\n * An object from the [implicitEventQueue]{@link tealiumCmpIntegration.implicitEventQueue} or [earlyEventQueue]{@link tealiumCmpIntegration.earlyEventQueue}, which represents a Tealium iQ tracking event that's been processed based on an IMPLICIT [ConsentDecision]{@link ConsentDecision}\n *\n * Heavily based on the argument passed to [utag.track]{@link https://community.tealiumiq.com/t5/Tealium-iQ-Tag-Management/utag-track-method/td-p/24578}, since it's designed to be processed by that method.\n *\n * Initial pageviews (handled in the [utag.loader.initdata override]{@link module:extension-1~newUtagLoaderInitdata}) will NOT have metadata like cookies, qps, etc - utag.track calls (handled in the [utag.handler.trigger override]{@link module:extension-1~newUtagHandlerTrigger}) will. That's a byproduct of using utag.handler.trigger, which is later in the load - those metadata will be re-read when the queue is processed, and since this queue isn't persisted between pages, it should be fine like that - the only strange behavior will be that any metadata that aren't present on re-read will still be present after the re-read - only values that are still present will be replaced with new values.\n *\n * An alternative approach could be to manually remove 'cp.\\*', 'dom.\\*', 'ut.\\*', 'qp.\\*', 'meta.\\*' and possibly 'tealium_\\*' (except 'tealium_event') from the 'data' object before queueing - that hasn't been done so far.\n *\n * @static\n * @type {array}\n * @name QueuedEvent\n * @memberof! &lt;global&gt;\n * @property {string} event the type of tracking event, generally 'view' for pageviews or 'link' for other events\n * @property {object} data the Universal Data Object associated with the event (from utag_data or the b object)\n * @property {object} cfg an optional configuration object that can have a 'cb' property (for a callback function) and a 'uids' array, which is a list of tag UIDs that should be triggered by the event, regardless of whether load rules are met.\n * @example\n{\n  &quot;event&quot;: &quot;view&quot;,\n  &quot;data&quot;: {\n    &quot;page_type&quot;: &quot;test_virtual_view&quot;,\n    &quot;cp.utag_main_v_id&quot;: &quot;0174492849d50013581219634d6103079004907101274&quot;,\n    &quot;cp.utag_main__sn&quot;: &quot;4&quot;,\n    &quot;cp.utag_main__se&quot;: &quot;4&quot;,\n    &quot;cp.utag_main__ss&quot;: &quot;0&quot;,\n    &quot;cp.utag_main__st&quot;: &quot;1598990152209&quot;,\n    &quot;cp.utag_main_ses_id&quot;: &quot;1598988112353&quot;,\n    &quot;cp.utag_main__pn&quot;: &quot;3&quot;,\n    &quot;cp.utagdb&quot;: &quot;true&quot;,\n    &quot;dom.referrer&quot;: &quot;&quot;,\n    &quot;dom.title&quot;: &quot;Usercentrics Test&quot;,\n    &quot;dom.domain&quot;: &quot;solutions.tealium.net&quot;,\n    &quot;dom.query_string&quot;: &quot;&quot;,\n    &quot;dom.hash&quot;: &quot;&quot;,\n    &quot;dom.url&quot;: &quot;https://solutions.tealium.net/hosted/usercentrics/test-page-standard.html&quot;,\n    &quot;dom.pathname&quot;: &quot;/hosted/usercentrics/test-page-standard.html&quot;,\n    &quot;dom.viewport_height&quot;: 456,\n    &quot;dom.viewport_width&quot;: 1825,\n    &quot;ut.domain&quot;: &quot;tealium.net&quot;,\n    &quot;ut.version&quot;: &quot;ut4.46.202009011921&quot;,\n    &quot;ut.event&quot;: &quot;view&quot;,\n    &quot;ut.visitor_id&quot;: &quot;0174492849d50013581219634d6103079004907101274&quot;,\n    &quot;ut.session_id&quot;: &quot;1598988112353&quot;,\n    &quot;ut.account&quot;: &quot;services-caleb&quot;,\n    &quot;ut.profile&quot;: &quot;usercentrics-by-tag&quot;,\n    &quot;ut.env&quot;: &quot;prod&quot;,\n    &quot;tealium_event&quot;: &quot;view&quot;,\n    &quot;tealium_visitor_id&quot;: &quot;0174492849d50013581219634d6103079004907101274&quot;,\n    &quot;tealium_session_id&quot;: &quot;1598988112353&quot;,\n    &quot;tealium_session_number&quot;: &quot;4&quot;,\n    &quot;tealium_session_event_number&quot;: &quot;4&quot;,\n    &quot;tealium_datasource&quot;: &quot;&quot;,\n    &quot;tealium_account&quot;: &quot;services-caleb&quot;,\n    &quot;tealium_profile&quot;: &quot;usercentrics-by-tag&quot;,\n    &quot;tealium_environment&quot;: &quot;prod&quot;,\n    &quot;tealium_random&quot;: &quot;2085060854215077&quot;,\n    &quot;tealium_library_name&quot;: &quot;utag.js&quot;,\n    &quot;tealium_library_version&quot;: &quot;4.46.0&quot;,\n    &quot;tealium_timestamp_epoch&quot;: 1598988352,\n    &quot;tealium_timestamp_utc&quot;: &quot;2020-09-01T19:25:52.211Z&quot;,\n    &quot;tealium_timestamp_local&quot;: &quot;2020-09-01T21:25:52.211&quot;,\n    &quot;usercentrics_services_with_consent&quot;: [\n      &quot;Mouseflow&quot;,\n      &quot;Tealium iQ Tag Management&quot;,\n      &quot;Usercentrics Consent Management Platform&quot;\n    ],\n    &quot;usercentrics_consent_type&quot;: &quot;implicit&quot;,\n    &quot;_usercentrics_services_already_processed&quot;: [\n      &quot;Mouseflow&quot;,\n      &quot;Tealium iQ Tag Management&quot;,\n      &quot;Usercentrics Consent Management Platform&quot;\n    ]\n  },\n  &quot;cfg&quot;: {\n    &quot;cb&quot;: function myCallback () {console.log(&quot;Callback fired!&quot;)},\n    &quot;uids&quot;: [\n      11\n    ],\n    &quot;originalUids&quot;: [\n      7,\n      11\n    ],\n    &quot;blockedTagUids&quot;: [\n      11\n    ]\n  }\n}\n*/\n"}},"draftSeq":"2"},"initialize":"","advExecOption":"alr","status":"active","constructor":"","scope":"preload","type":"new","publishedTargets":"dev","blockPubTargetsLogic":"true","selectedTargets":{"qa":"true","dev":"true","prod":"true"},"notes":"adfadf","sort":"5","_id":"17","extType":"Javascript Code"},"18":{"_id":"18","extType":"Javascript Code","notes":"","sort":"6","selectedTargets":{"qa":"true","prod":"true","dev":"true"},"blockPubTargetsLogic":"true","publishedTargets":"dev","type":"new","status":"active","scope":"global","constructor":"","advExecOption":"alr","initialize":"","codeDevData":{"promotedSnippets":{"3f3ef786b34d6dd716e1812c8b74a7a0e1f05aa5f3230588f6f5bcd00c6c8392":{"promotedTimestamp":"202010061020","promotedDraftName":"extension-2.js","promotedBy":"caleb.jaquith@tealium.com","code":"/* global b */\n\n/**\n *  Scope       : All Tags - After Load Rules\n *  Condition   : n/a\n *  Description : CMP 2/2 - After Load Rules component - Prevent tags from firing if they don't have an opt-in in the mapping (or there is no mapping)\n *\n */\n\n/**\n * @module extension-2\n * @description The 'All Tags - After Load Rules' component, responsible for blocking tags if consent is missing or this CMP integration is misconfigured.\n */\n\nvar map = (window.tealiumCmpIntegration &amp;&amp; window.tealiumCmpIntegration.map) || {}\n\n// get settings from CMP 1 extension, shouldn't need to change these\nvar globals = window.tealiumCmpIntegration = window.tealiumCmpIntegration || {}\nvar tiqServiceName = globals.tiqServiceName || 'Tealium iQ Tag Management' // the default name for our Service in Usercentrics\n\nvar nameOfVendorOptInArray = globals.nameOfVendorOptInArray || 'missing_opt_in_array_name'\nvar nameOfConsentTypeString = globals.nameOfConsentTypeString || 'missing_consent_type_name'\nvar nameOfImplicitConsentArray = globals.nameOfImplicitConsentArray || 'missing_implicit_queue_array_name'\n\nvar tagBasedMap = globals.tagBasedMap || {}\n\nvar getCurrentConsentDecision = globals.getCurrentConsentDecision || function () { return [] }\nvar getCurrentUsercentricsSettingsId = globals.getCurrentUsercentricsSettingsId || function () { return '' }\n\nvar logger = globals.logger || (window.utag &amp;&amp; window.utag.DB) || function (message) { console.log(message) } // logger function with fallback in case global function is missing\n\n// recheck\nvar currentlyAllowedVendors = getCurrentConsentDecision()\n\n// Add the current ConsentDecision information (allowed Services and consent type) to the UDO for possible use in extensions\nb[nameOfVendorOptInArray] = currentlyAllowedVendors\nb[nameOfConsentTypeString] = currentlyAllowedVendors &amp;&amp; currentlyAllowedVendors.type\n\nvar implicitServices\n\n// only block previous implicit services from reloading if the current consent is explicit\nif (currentlyAllowedVendors.type === 'explicit') {\n  implicitServices = b[nameOfImplicitConsentArray] // use the previously stored array, from the queued event\n}\n\nlogger('Called block logic:\\n\\nAllowed: ' + JSON.stringify(currentlyAllowedVendors, null, 2) + '\\n\\nAlready processed: ' + (implicitServices ? JSON.stringify(implicitServices, null, 2) : '(none)'))\n\nlogger('Map:\\n\\n' + JSON.stringify(map, null, 2) + '\\n\\nActive Usercentrics settingsId: ' + getCurrentUsercentricsSettingsId() + '\\n\\nMap has entry for current settingsId: ' + (typeof map[getCurrentUsercentricsSettingsId()] === 'object' ? 'true' : 'false') + '\\n\\nTag-based map for the active settingsId: ' + JSON.stringify(tagBasedMap, null, 2))\nlogger('Consent confirmed: ' + currentlyAllowedVendors.type + ' : ' + JSON.stringify(currentlyAllowedVendors, null, 2))\n\nvar newCfg = blockTagsBasedOnConsent(tagBasedMap, window.utag.loader.cfg, currentlyAllowedVendors, implicitServices)\n\n// logger('Tag block debug:' + JSON.stringify(newCfg, null, 2))\n\nwindow.utag.loader.cfg = newCfg\n\n/**\n * Blocks tags based on consent by manually setting the 'load' and 'send' flags to 0 for any tags that don't have permission to fire.\n *\n * That logic isn't sufficient to block tracking calls with a 'uids' array (which also circumvents load rules), so additional blocking logic is added in the utag.handler.trigger override.\n * @param {object} tagBasedMap a {@link TagToServiceMap TagToServiceMap}\n * @param {object} configObject the current window.utag.loader.cfg object (which is used to control which tags should load/fire)\n * @param {array} consentedServices a {@link ConsentDecision ConsentDecision}\n * @param {array} alreadyProcessedImplicitServices an array of Service Names that have already been processed, to avoid double-firing those tags.\n */\nfunction blockTagsBasedOnConsent (tagBasedMap, configObject, consentedServices, alreadyProcessedImplicitServices) {\n  // block all tags if the consented services array is missing\n  if (Array.isArray(consentedServices) !== true) {\n    consentedServices = []\n  }\n\n  tagBasedMap = tagBasedMap || {}\n\n  // if the utag template hasn't been edited, this function won't have been overriden, so we gut it\n  // to stop tags from firing\n  var utagFunctionsHaveBeenOverriden = window.utag.handler.trigger.toString().indexOf('tealiumCmpIntegration') !== -1\n  if (utagFunctionsHaveBeenOverriden !== true) {\n    window.utag.handler.trigger = function () {\n      logger('Tags have been disabled because the required utag.loader edit hasn\\'t been done successfully and the tealiumCmpIntegration is active.')\n    }\n    consentedServices = []\n  }\n\n  var deactivatedTags = []\n  // turn the map into an easier-to-query object\n\n  alreadyProcessedImplicitServices = alreadyProcessedImplicitServices || []\n\n  var tiqIsAllowed = tiqServiceName &amp;&amp; consentedServices.indexOf(tiqServiceName) !== -1\n\n  var allTagUids = Object.keys(configObject)\n\n  var assignedServiceName\n  var hasConsent\n\n  // deactivate tags that aren't mapped and consented\n  for (var i = 0; i &lt; allTagUids.length; i++) {\n    hasConsent = false // assume no consent\n\n    assignedServiceName = tagBasedMap[allTagUids[i]] || false\n\n    if (assignedServiceName) {\n      hasConsent = tiqIsAllowed &amp;&amp; consentedServices.indexOf(assignedServiceName) !== -1 &amp;&amp; alreadyProcessedImplicitServices.indexOf(assignedServiceName) === -1\n    }\n\n    if (hasConsent !== true) {\n      // this isn't enough to stop specified tagUids (in the array) from firing by itself\n      configObject[allTagUids[i]].send = 0\n      configObject[allTagUids[i]].load = 0\n      deactivatedTags.push(allTagUids[i])\n    }\n  }\n  logger('Blocked tags: ' + JSON.stringify(deactivatedTags, null, 2) + (tiqIsAllowed ? '' : '\\n\\nAll tags blocked because TealiumIQ isn\\'t allowed to fire.'))\n  return configObject\n}\n","name":"qa"},"ef260e9aa3c673af240d17a2660480361a8e081d1ffeca2a5ed0e3219fc18567":{"code":"/* global b */\n\n/**\n *  Scope       : All Tags - After Load Rules\n *  Condition   : n/a\n *  Description : CMP 2/2 - After Load Rules component - Prevent tags from firing if they don't have an opt-in in the mapping (or there is no mapping)\n *\n */\n\n/**\n * @module extension-2\n * @description The 'All Tags - After Load Rules' component, responsible for blocking tags if consent is missing or this CMP integration is misconfigured.\n */\n\nvar map = (window.tealiumCmpIntegration &amp;&amp; window.tealiumCmpIntegration.map) || {}\n\n// get settings from CMP 1 extension, shouldn't need to change these\nvar globals = window.tealiumCmpIntegration = window.tealiumCmpIntegration || {}\nvar tiqServiceName = globals.tiqServiceName || 'Tealium iQ Tag Management' // the default name for our Service in Usercentrics\n\nvar nameOfVendorOptInArray = globals.nameOfVendorOptInArray || 'missing_opt_in_array_name'\nvar nameOfConsentTypeString = globals.nameOfConsentTypeString || 'missing_consent_type_name'\nvar nameOfImplicitConsentArray = globals.nameOfImplicitConsentArray || 'missing_implicit_queue_array_name'\n\nvar tagBasedMap = globals.tagBasedMap || {}\n\nvar getCurrentConsentDecision = globals.getCurrentConsentDecision || function () { return [] }\nvar getCurrentUsercentricsSettingsId = globals.getCurrentUsercentricsSettingsId || function () { return '' }\n\nvar logger = globals.logger || (window.utag &amp;&amp; window.utag.DB) || function (message) { console.log(message) } // logger function with fallback in case global function is missing\n\n// recheck\nvar currentlyAllowedVendors = getCurrentConsentDecision()\n\n// Add the current ConsentDecision information (allowed Services and consent type) to the UDO for possible use in extensions\nb[nameOfVendorOptInArray] = currentlyAllowedVendors\nb[nameOfConsentTypeString] = currentlyAllowedVendors &amp;&amp; currentlyAllowedVendors.type\n\nvar implicitServices\n\n// only block previous implicit services from reloading if the current consent is explicit\nif (currentlyAllowedVendors.type === 'explicit') {\n  implicitServices = b[nameOfImplicitConsentArray] // use the previously stored array, from the queued event\n}\n\nlogger('Called block logic:\\n\\nAllowed: ' + JSON.stringify(currentlyAllowedVendors, null, 2) + '\\n\\nAlready processed: ' + (implicitServices ? JSON.stringify(implicitServices, null, 2) : '(none)'))\n\nlogger('Map:\\n\\n' + JSON.stringify(map, null, 2) + '\\n\\nActive Usercentrics settingsId: ' + getCurrentUsercentricsSettingsId() + '\\n\\nMap has entry for current settingsId: ' + (typeof map[getCurrentUsercentricsSettingsId()] === 'object' ? 'true' : 'false') + '\\n\\nTag-based map for the active settingsId: ' + JSON.stringify(tagBasedMap, null, 2))\nlogger('Consent confirmed: ' + currentlyAllowedVendors.type + ' : ' + JSON.stringify(currentlyAllowedVendors, null, 2))\n\nvar newCfg = blockTagsBasedOnConsent(tagBasedMap, window.utag.loader.cfg, currentlyAllowedVendors, implicitServices)\n\n// logger('Tag block debug:' + JSON.stringify(newCfg, null, 2))\n\nwindow.utag.loader.cfg = newCfg\n\n/**\n * Blocks tags based on consent by manually setting the 'load' and 'send' flags to 0 for any tags that don't have permission to fire.\n *\n * That logic isn't sufficient to block tracking calls with a 'uids' array (which also circumvents load rules), so additional blocking logic is added in the utag.handler.trigger override.\n * @param {object} tagBasedMap a {@link TagToServiceMap TagToServiceMap}\n * @param {object} configObject the current window.utag.loader.cfg object (which is used to control which tags should load/fire)\n * @param {array} consentedServices a {@link ConsentDecision ConsentDecision}\n * @param {array} alreadyProcessedImplicitServices an array of Service Names that have already been processed, to avoid double-firing those tags.\n */\nfunction blockTagsBasedOnConsent (tagBasedMap, configObject, consentedServices, alreadyProcessedImplicitServices) {\n  // block all tags if the consented services array is missing\n  if (Array.isArray(consentedServices) !== true) {\n    consentedServices = []\n  }\n\n  tagBasedMap = tagBasedMap || {}\n\n  // if the utag template hasn't been edited, this function won't have been overriden, so we gut it\n  // to stop tags from firing\n  var utagFunctionsHaveBeenOverriden = window.utag.handler.trigger.toString().indexOf('tealiumCmpIntegration') !== -1\n  if (utagFunctionsHaveBeenOverriden !== true) {\n    window.utag.handler.trigger = function () {\n      logger('Tags have been disabled because the required utag.loader edit hasn\\'t been done successfully and the tealiumCmpIntegration is active.')\n    }\n    consentedServices = []\n  }\n\n  var deactivatedTags = []\n  // turn the map into an easier-to-query object\n\n  alreadyProcessedImplicitServices = alreadyProcessedImplicitServices || []\n\n  var tiqIsAllowed = tiqServiceName &amp;&amp; consentedServices.indexOf(tiqServiceName) !== -1\n\n  var allTagUids = Object.keys(configObject)\n\n  var assignedServiceName\n  var hasConsent\n\n  // deactivate tags that aren't mapped and consented\n  for (var i = 0; i &lt; allTagUids.length; i++) {\n    hasConsent = false // assume no consent\n\n    assignedServiceName = tagBasedMap[allTagUids[i]] || false\n\n    if (assignedServiceName) {\n      hasConsent = tiqIsAllowed &amp;&amp; consentedServices.indexOf(assignedServiceName) !== -1 &amp;&amp; alreadyProcessedImplicitServices.indexOf(assignedServiceName) === -1\n    }\n\n    if (hasConsent !== true) {\n      // this isn't enough to stop specified tagUids (in the array) from firing by itself\n      configObject[allTagUids[i]].send = 0\n      configObject[allTagUids[i]].load = 0\n      deactivatedTags.push(allTagUids[i])\n    }\n  }\n  logger('Blocked tags: ' + JSON.stringify(deactivatedTags, null, 2) + (tiqIsAllowed ? '' : '\\n\\nAll tags blocked because TealiumIQ isn\\'t allowed to fire.'))\n  return configObject\n}\n","name":"dev","promotedDraftName":"extension-2.js","promotedTimestamp":"202010061020","promotedBy":"caleb.jaquith@tealium.com"}},"draftSeq":"0","draftSnippets":{"62fde09df4e41bb302fba9c118fe703c4ea4c613f6a85295442d6eb64a21535b":{"updateDate":"202010051352","creationDate":"202010051352","updatedBy":"caleb.jaquith@tealium.com","versionControl":{"hashValue":"8da85ba6458591f80d894fdf7ffc0890a66d7594","lastSyncSuccess":"true","isOutdated":"false","sourceUrl":"https://github.com/jaquith/usercentrics-integration/blob/test/extensions/extension-2.js","isReadOnly":"true","sourceName":"GitHub","lastSyncTimeStamp":"202010061209","accountName":"jaquith"},"code":"/* global b */\n\n/**\n *  Scope       : All Tags - After Load Rules\n *  Condition   : n/a\n *  Description : CMP 2/2 - After Load Rules component - Prevent tags from firing if they don't have an opt-in in the mapping (or there is no mapping)\n *\n */\n\n/**\n * @module extension-2\n * @description The 'All Tags - After Load Rules' component, responsible for blocking tags if consent is missing or this CMP integration is misconfigured.\n */\n\nvar map = (window.tealiumCmpIntegration &amp;&amp; window.tealiumCmpIntegration.map) || {}\n\n// get settings from CMP 1 extension, shouldn't need to change these\nvar globals = window.tealiumCmpIntegration = window.tealiumCmpIntegration || {}\nvar tiqServiceName = globals.tiqServiceName || 'Tealium iQ Tag Management' // the default name for our Service in Usercentrics\n\nvar nameOfVendorOptInArray = globals.nameOfVendorOptInArray || 'missing_opt_in_array_name'\nvar nameOfConsentTypeString = globals.nameOfConsentTypeString || 'missing_consent_type_name'\nvar nameOfImplicitConsentArray = globals.nameOfImplicitConsentArray || 'missing_implicit_queue_array_name'\n\nvar tagBasedMap = globals.tagBasedMap || {}\n\nvar getCurrentConsentDecision = globals.getCurrentConsentDecision || function () { return [] }\nvar getCurrentUsercentricsSettingsId = globals.getCurrentUsercentricsSettingsId || function () { return '' }\n\nvar logger = globals.logger || (window.utag &amp;&amp; window.utag.DB) || function (message) { console.log(message) } // logger function with fallback in case global function is missing\n\n// recheck\nvar currentlyAllowedVendors = getCurrentConsentDecision()\n\n// Add the current ConsentDecision information (allowed Services and consent type) to the UDO for possible use in extensions\nb[nameOfVendorOptInArray] = currentlyAllowedVendors\nb[nameOfConsentTypeString] = currentlyAllowedVendors &amp;&amp; currentlyAllowedVendors.type\n\nvar implicitServices\n\n// only block previous implicit services from reloading if the current consent is explicit\nif (currentlyAllowedVendors.type === 'explicit') {\n  implicitServices = b[nameOfImplicitConsentArray] // use the previously stored array, from the queued event\n}\n\nlogger('Called block logic:\\n\\nAllowed: ' + JSON.stringify(currentlyAllowedVendors, null, 2) + '\\n\\nAlready processed: ' + (implicitServices ? JSON.stringify(implicitServices, null, 2) : '(none)'))\n\nlogger('Map:\\n\\n' + JSON.stringify(map, null, 2) + '\\n\\nActive Usercentrics settingsId: ' + getCurrentUsercentricsSettingsId() + '\\n\\nMap has entry for current settingsId: ' + (typeof map[getCurrentUsercentricsSettingsId()] === 'object' ? 'true' : 'false') + '\\n\\nTag-based map for the active settingsId: ' + JSON.stringify(tagBasedMap, null, 2))\nlogger('Consent confirmed: ' + currentlyAllowedVendors.type + ' : ' + JSON.stringify(currentlyAllowedVendors, null, 2))\n\nvar newCfg = blockTagsBasedOnConsent(tagBasedMap, window.utag.loader.cfg, currentlyAllowedVendors, implicitServices)\n\n// logger('Tag block debug:' + JSON.stringify(newCfg, null, 2))\n\nwindow.utag.loader.cfg = newCfg\n\n/**\n * Blocks tags based on consent by manually setting the 'load' and 'send' flags to 0 for any tags that don't have permission to fire.\n *\n * That logic isn't sufficient to block tracking calls with a 'uids' array (which also circumvents load rules), so additional blocking logic is added in the utag.handler.trigger override.\n * @param {object} tagBasedMap a {@link TagToServiceMap TagToServiceMap}\n * @param {object} configObject the current window.utag.loader.cfg object (which is used to control which tags should load/fire)\n * @param {array} consentedServices a {@link ConsentDecision ConsentDecision}\n * @param {array} alreadyProcessedImplicitServices an array of Service Names that have already been processed, to avoid double-firing those tags.\n */\nfunction blockTagsBasedOnConsent (tagBasedMap, configObject, consentedServices, alreadyProcessedImplicitServices) {\n  // block all tags if the consented services array is missing\n  if (Array.isArray(consentedServices) !== true) {\n    consentedServices = []\n  }\n\n  tagBasedMap = tagBasedMap || {}\n\n  // if the utag template hasn't been edited, this function won't have been overriden, so we gut it\n  // to stop tags from firing\n  var utagFunctionsHaveBeenOverriden = window.utag.handler.trigger.toString().indexOf('tealiumCmpIntegration') !== -1\n  if (utagFunctionsHaveBeenOverriden !== true) {\n    window.utag.handler.trigger = function () {\n      logger('Tags have been disabled because the required utag.loader edit hasn\\'t been done successfully and the tealiumCmpIntegration is active.')\n    }\n    consentedServices = []\n  }\n\n  var deactivatedTags = []\n  // turn the map into an easier-to-query object\n\n  alreadyProcessedImplicitServices = alreadyProcessedImplicitServices || []\n\n  var tiqIsAllowed = tiqServiceName &amp;&amp; consentedServices.indexOf(tiqServiceName) !== -1\n\n  var allTagUids = Object.keys(configObject)\n\n  var assignedServiceName\n  var hasConsent\n\n  // deactivate tags that aren't mapped and consented\n  for (var i = 0; i &lt; allTagUids.length; i++) {\n    hasConsent = false // assume no consent\n\n    assignedServiceName = tagBasedMap[allTagUids[i]] || false\n\n    if (assignedServiceName) {\n      hasConsent = tiqIsAllowed &amp;&amp; consentedServices.indexOf(assignedServiceName) !== -1 &amp;&amp; alreadyProcessedImplicitServices.indexOf(assignedServiceName) === -1\n    }\n\n    if (hasConsent !== true) {\n      // this isn't enough to stop specified tagUids (in the array) from firing by itself\n      configObject[allTagUids[i]].send = 0\n      configObject[allTagUids[i]].load = 0\n      deactivatedTags.push(allTagUids[i])\n    }\n  }\n  logger('Blocked tags: ' + JSON.stringify(deactivatedTags, null, 2) + (tiqIsAllowed ? '' : '\\n\\nAll tags blocked because TealiumIQ isn\\'t allowed to fire.'))\n  return configObject\n}\n","name":"extension-2.js"}},"queueSeq":"2"},"labels":"","title":"TEST 2/2","id":"100040"}},"privacy_management":{"useTemplate":"true"},"title":"Version 2020.11.04.0726","email":"caleb.jaquith@tealium.com","datacloudLinkedProfiles":"{&quot;main&quot;:{&quot;rev&quot;:&quot;1598628086246&quot;,&quot;env&quot;:&quot;AudienceStream&quot;}}","define":{"80":{"title":"","description":"","name":"test","type":"js","labels":"","_id":"80"},"239":{"_id":"239","name":"Account Value Strings","type":"va","description":"Should contain account numbers and their value band","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"5217","origin_name":"Account Value Strings","origin_type":"property_lists","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"240":{"_id":"240","name":"Active browser type","type":"va","description":"The browser actively being used by the visitor","context":"current_visit","imported":"AudienceStream","settings":{"origin_id":"44","origin_name":"Active browser type","origin_type":"properties","origin_context":"current_visit","account":"services-caleb","profileid":"main"}},"241":{"_id":"241","name":"Active browser version","type":"va","description":"The browser version actively being used by the visitor","context":"current_visit","imported":"AudienceStream","settings":{"origin_id":"48","origin_name":"Active browser version","origin_type":"properties","origin_context":"current_visit","account":"services-caleb","profileid":"main"}},"242":{"_id":"242","name":"Active device","type":"va","description":"The device actively being used by the visitor","context":"current_visit","imported":"AudienceStream","settings":{"origin_id":"46","origin_name":"Active device","origin_type":"properties","origin_context":"current_visit","account":"services-caleb","profileid":"main"}},"243":{"_id":"243","name":"Active operating system","type":"va","description":"The operating system actively being used by the visitor","context":"current_visit","imported":"AudienceStream","settings":{"origin_id":"45","origin_name":"Active operating system","origin_type":"properties","origin_context":"current_visit","account":"services-caleb","profileid":"main"}},"244":{"_id":"244","name":"Active platform","type":"va","description":"The platform actively being used by the visitor","context":"current_visit","imported":"AudienceStream","settings":{"origin_id":"47","origin_name":"Active platform","origin_type":"properties","origin_context":"current_visit","account":"services-caleb","profileid":"main"}},"245":{"_id":"245","name":"Average visit duration in minutes","type":"va","description":"Average visit duration in minutes","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"26","origin_name":"Average visit duration in minutes","origin_type":"metrics","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"246":{"_id":"246","name":"Average visits per week","type":"va","description":"Average visits per week","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"29","origin_name":"Average visits per week","origin_type":"metrics","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"247":{"_id":"247","name":"Batch Tester","type":"va","description":"Testing the batch webhook","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"5189","origin_name":"Batch Tester","origin_type":"badges","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"248":{"_id":"248","name":"Blue","type":"va","description":"","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"5067","origin_name":"Blue","origin_type":"badges","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"249":{"_id":"249","name":"Brown","type":"va","description":"","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"5055","origin_name":"Brown","origin_type":"badges","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"250":{"_id":"250","name":"Cookie Sync ID - Assigned Rule","type":"va","description":"","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"5075","origin_name":"Cookie Sync ID - Assigned Rule","origin_type":"properties","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"251":{"_id":"251","name":"Cookie Sync ID - No Rule","type":"va","description":"","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"5079","origin_name":"Cookie Sync ID - No Rule","origin_type":"properties","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"252":{"_id":"252","name":"Counter (Last Seen)","type":"va","description":"","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"5193","origin_name":"Counter (Last Seen)","origin_type":"properties","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"253":{"_id":"253","name":"Direct visit","type":"va","description":"The user navigated directly to the site","context":"current_visit","imported":"AudienceStream","settings":{"origin_id":"14","origin_name":"Direct visit","origin_type":"flags","origin_context":"current_visit","account":"services-caleb","profileid":"main"}},"254":{"_id":"254","name":"Entry URL","type":"va","description":"URL of the first page visited","context":"current_visit","imported":"AudienceStream","settings":{"origin_id":"5","origin_name":"Entry URL","origin_type":"properties","origin_context":"current_visit","account":"services-caleb","profileid":"main"}},"255":{"_id":"255","name":"Event count","type":"va","description":"Total number of events in visit","context":"current_visit","imported":"AudienceStream","settings":{"origin_id":"7","origin_name":"Event count","origin_type":"metrics","origin_context":"current_visit","account":"services-caleb","profileid":"main"}},"256":{"_id":"256","name":"Exit URL","type":"va","description":"URL of the last page visited","context":"current_visit","imported":"AudienceStream","settings":{"origin_id":"6","origin_name":"Exit URL","origin_type":"properties","origin_context":"current_visit","account":"services-caleb","profileid":"main"}},"257":{"_id":"257","name":"Fan","type":"va","description":"More than two total visits and more direct visits than refers","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"30","origin_name":"Fan","origin_type":"badges","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"258":{"_id":"258","name":"First 'test_value' only","type":"va","description":"","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"5183","origin_name":"First 'test_value' only","origin_type":"properties","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"259":{"_id":"259","name":"First visit","type":"va","description":"Date of first visit","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"23","origin_name":"First visit","origin_type":"dates","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"260":{"_id":"260","name":"Frequent visitor","type":"va","description":"Two or more average visits per week","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"31","origin_name":"Frequent visitor","origin_type":"badges","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"261":{"_id":"261","name":"Full entry URL (with attribution)","type":"va","description":"","context":"current_visit","imported":"AudienceStream","settings":{"origin_id":"5090","origin_name":"Full entry URL (with attribution)","origin_type":"properties","origin_context":"current_visit","account":"services-caleb","profileid":"main"}},"262":{"_id":"262","name":"Google GID","type":"va","description":"From the Google Cookie Match, saved here as string ","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"5038","origin_name":"Google GID","origin_type":"properties","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"263":{"_id":"263","name":"Green","type":"va","description":"","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"5063","origin_name":"Green","origin_type":"badges","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"264":{"_id":"264","name":"GUID - Compromised Profile","type":"va","description":"","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"5179","origin_name":"GUID - Compromised Profile","origin_type":"badges","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"265":{"_id":"265","name":"GUID - Compromised profile and a new visit [bln]","type":"va","description":"","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"5340","origin_name":"GUID - Compromised profile and a new visit [bln]","origin_type":"flags","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"266":{"_id":"266","name":"GUID - Count Has Changed This Visit","type":"va","description":"","context":"current_visit","imported":"AudienceStream","settings":{"origin_id":"5332","origin_name":"GUID - Count Has Changed This Visit","origin_type":"flags","origin_context":"current_visit","account":"services-caleb","profileid":"main"}},"267":{"_id":"267","name":"GUID - Count of seen [num]","type":"va","description":"","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"5175","origin_name":"GUID - Count of seen [num]","origin_type":"metrics","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"268":{"_id":"268","name":"GUID - Healthy Profile","type":"va","description":"","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"5177","origin_name":"GUID - Healthy Profile","origin_type":"badges","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"269":{"_id":"269","name":"GUID - Incomplete Profile","type":"va","description":"Should not use this profile, it's been used on a shared device and only contains partial information","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"5334","origin_name":"GUID - Incomplete Profile","origin_type":"badges","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"270":{"_id":"270","name":"GUID - Last seen [str]","type":"va","description":"","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"5169","origin_name":"GUID - Last seen [str]","origin_type":"properties","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"271":{"_id":"271","name":"GUID - None","type":"va","description":"","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"5181","origin_name":"GUID - None","origin_type":"badges","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"272":{"_id":"272","name":"Has Cookie Sync ID - With Rule","type":"va","description":"","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"5077","origin_name":"Has Cookie Sync ID - With Rule","origin_type":"badges","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"273":{"_id":"273","name":"Has Cookie Sync ID - Without Rule","type":"va","description":"","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"5081","origin_name":"Has Cookie Sync ID - Without Rule","origin_type":"badges","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"274":{"_id":"274","name":"Hyphen Lover","type":"va","description":"","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"5088","origin_name":"Hyphen Lover","origin_type":"badges","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"275":{"_id":"275","name":"Import - Age","type":"va","description":"","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"5165","origin_name":"Import - Age","origin_type":"metrics","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"276":{"_id":"276","name":"Import - Alpha","type":"va","description":"","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"5161","origin_name":"Import - Alpha","origin_type":"properties","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"277":{"_id":"277","name":"Import - Bool","type":"va","description":"","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"5167","origin_name":"Import - Bool","origin_type":"flags","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"278":{"_id":"278","name":"Import - Row Number","type":"va","description":"","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"5163","origin_name":"Import - Row Number","origin_type":"metrics","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"279":{"_id":"279","name":"Last 'test_value'","type":"va","description":"","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"5187","origin_name":"Last 'test_value'","origin_type":"properties","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"280":{"_id":"280","name":"Last conversion partner name","type":"va","description":"","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"5034","origin_name":"Last conversion partner name","origin_type":"properties","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"281":{"_id":"281","name":"Last event time","type":"va","description":"","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"5318","origin_name":"Last event time","origin_type":"dates","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"282":{"_id":"282","name":"Last event URL","type":"va","description":"Last event URL for visitor","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"17","origin_name":"Last event URL","origin_type":"properties","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"283":{"_id":"283","name":"Last UDO String","type":"va","description":"","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"5145","origin_name":"Last UDO String","origin_type":"properties","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"284":{"_id":"284","name":"Last visit","type":"va","description":"Date of last visit","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"24","origin_name":"Last visit","origin_type":"dates","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"285":{"_id":"285","name":"Last-seen tealium_event [str]","type":"va","description":"","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"5324","origin_name":"Last-seen tealium_event [str]","origin_type":"properties","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"286":{"_id":"286","name":"Last-seen Trace Id","type":"va","description":"","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"5320","origin_name":"Last-seen Trace Id","origin_type":"properties","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"287":{"_id":"287","name":"Lifetime browser types used (favorite)","type":"va","description":"Captures the favorite metric for Metric Set: Lifetime browser types used","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"56","origin_name":"Lifetime browser types used (favorite)","origin_type":"properties","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"288":{"_id":"288","name":"Lifetime browser versions used (favorite)","type":"va","description":"Captures the favorite metric for Metric Set: Lifetime browser versions used","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"62","origin_name":"Lifetime browser versions used (favorite)","origin_type":"properties","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"289":{"_id":"289","name":"Lifetime devices used (favorite)","type":"va","description":"Captures the favorite metric for Metric Set: Lifetime devices used","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"54","origin_name":"Lifetime devices used (favorite)","origin_type":"properties","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"290":{"_id":"290","name":"Lifetime event count","type":"va","description":"Total number of events triggered by user","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"22","origin_name":"Lifetime event count","origin_type":"metrics","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"291":{"_id":"291","name":"Lifetime operating systems used (favorite)","type":"va","description":"Captures the favorite metric for Metric Set: Lifetime operating systems used","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"58","origin_name":"Lifetime operating systems used (favorite)","origin_type":"properties","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"292":{"_id":"292","name":"Lifetime order total","type":"va","description":"","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"5028","origin_name":"Lifetime order total","origin_type":"metrics","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"293":{"_id":"293","name":"Lifetime order total by partner name (favorite)","type":"va","description":"Captures the favorite number for Tally: Lifetime order total by partner name","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"5031","origin_name":"Lifetime order total by partner name (favorite)","origin_type":"properties","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"294":{"_id":"294","name":"Lifetime platforms used (favorite)","type":"va","description":"Captures the favorite metric for Metric Set: Lifetime platforms used","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"60","origin_name":"Lifetime platforms used (favorite)","origin_type":"properties","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"295":{"_id":"295","name":"LIfetime Test Stream Values (favorite)","type":"va","description":"Captures the favorite number for Tally: LIfetime Test Stream Values","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"5132","origin_name":"LIfetime Test Stream Values (favorite)","origin_type":"properties","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"296":{"_id":"296","name":"Lifetime visit count","type":"va","description":"Total number of times user has visited site","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"21","origin_name":"Lifetime visit count","origin_type":"metrics","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"297":{"_id":"297","name":"Light Blue","type":"va","description":"","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"5065","origin_name":"Light Blue","origin_type":"badges","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"298":{"_id":"298","name":"Most Recent GCLID","type":"va","description":"This setup ignores the edge case where a user could click two ads from this campaign within the same session - it will only send the last GCLID in those cases.","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"5312","origin_name":"Most Recent GCLID","origin_type":"properties","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"299":{"_id":"299","name":"Most Recent GCLID has changed this visit","type":"va","description":"","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"5314","origin_name":"Most Recent GCLID has changed this visit","origin_type":"flags","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"300":{"_id":"300","name":"NO BOUNCERS HERE","type":"va","description":"","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"5322","origin_name":"NO BOUNCERS HERE","origin_type":"badges","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"301":{"_id":"301","name":"Optin (imported)","type":"va","description":"","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"5149","origin_name":"Optin (imported)","origin_type":"properties","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"302":{"_id":"302","name":"Orange","type":"va","description":"","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"5059","origin_name":"Orange","origin_type":"badges","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"303":{"_id":"303","name":"Pink","type":"va","description":"","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"5069","origin_name":"Pink","origin_type":"badges","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"304":{"_id":"304","name":"Product Prices Purchases - Last Order Imported (favorite)","type":"va","description":"Captures the favorite number for Tally: Product Prices Purchases - Last Order Imported","context":"current_visit","imported":"AudienceStream","settings":{"origin_id":"5120","origin_name":"Product Prices Purchases - Last Order Imported (favorite)","origin_type":"properties","origin_context":"current_visit","account":"services-caleb","profileid":"main"}},"305":{"_id":"305","name":"Product Purchase Count (Lifetime) (favorite)","type":"va","description":"Captures the favorite number for Tally: Product Purchase Count (Lifetime)","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"5118","origin_name":"Product Purchase Count (Lifetime) (favorite)","origin_type":"properties","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"306":{"_id":"306","name":"Red","type":"va","description":"","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"5057","origin_name":"Red","origin_type":"badges","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"307":{"_id":"307","name":"Referred visit","type":"va","description":"The user was referred from another site","context":"current_visit","imported":"AudienceStream","settings":{"origin_id":"13","origin_name":"Referred visit","origin_type":"flags","origin_context":"current_visit","account":"services-caleb","profileid":"main"}},"308":{"_id":"308","name":"Referrer","type":"va","description":"","context":"current_visit","imported":"AudienceStream","settings":{"origin_id":"5092","origin_name":"Referrer","origin_type":"properties","origin_context":"current_visit","account":"services-caleb","profileid":"main"}},"309":{"_id":"309","name":"Returning visitor","type":"va","description":"Return visitor","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"27","origin_name":"Returning visitor","origin_type":"flags","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"310":{"_id":"310","name":"Spend per Product (Lifetime) (favorite)","type":"va","description":"Captures the favorite number for Tally: Spend per Product (Lifetime)","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"5122","origin_name":"Spend per Product (Lifetime) (favorite)","origin_type":"properties","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"311":{"_id":"311","name":"Tealium Test Visit","type":"va","description":"Set via query parameter &quot;tealium_test_visit=true&quot;","context":"current_visit","imported":"AudienceStream","settings":{"origin_id":"5125","origin_name":"Tealium Test Visit","origin_type":"flags","origin_context":"current_visit","account":"services-caleb","profileid":"main"}},"312":{"_id":"312","name":"Tealium Visitor ID (Last Seen)","type":"va","description":"3rd party wins if present","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"5129","origin_name":"Tealium Visitor ID (Last Seen)","origin_type":"properties","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"313":{"_id":"313","name":"tealium_cf_visit_ttl","type":"va","description":"","context":"current_visit","imported":"AudienceStream","settings":{"origin_id":"82","origin_name":"tealium_cf_visit_ttl","origin_type":"properties","origin_context":"current_visit","account":"services-caleb","profileid":"main"}},"314":{"_id":"314","name":"Test Date","type":"va","description":"Expects format 2020-08-27T13:13:47.395Z ","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"5195","origin_name":"Test Date","origin_type":"dates","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"315":{"_id":"315","name":"Test Tally (favorite)","type":"va","description":"Captures the favorite number for Tally: Test Tally","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"5093","origin_name":"Test Tally (favorite)","origin_type":"properties","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"316":{"_id":"316","name":"test_tiq_string values (favorite)","type":"va","description":"Captures the favorite number for Tally: test_tiq_string values","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"5136","origin_name":"test_tiq_string values (favorite)","origin_type":"properties","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"317":{"_id":"317","name":"test_udo_string values (favorite)","type":"va","description":"Captures the favorite number for Tally: test_udo_string values","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"5138","origin_name":"test_udo_string values (favorite)","origin_type":"properties","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"318":{"_id":"318","name":"Tester","type":"va","description":"","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"5141","origin_name":"Tester","origin_type":"badges","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"319":{"_id":"319","name":"Total direct visits","type":"va","description":"Total direct visits","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"15","origin_name":"Total direct visits","origin_type":"metrics","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"320":{"_id":"320","name":"Total referred visits","type":"va","description":"Total referred visits","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"16","origin_name":"Total referred visits","origin_type":"metrics","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"321":{"_id":"321","name":"Total time spent on site in minutes","type":"va","description":"Sum duration of all user visits","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"25","origin_name":"Total time spent on site in minutes","origin_type":"metrics","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"322":{"_id":"322","name":"Unbadged","type":"va","description":"The visitor has not been assigned any badges","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"32","origin_name":"Unbadged","origin_type":"badges","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"323":{"_id":"323","name":"Visit duration","type":"va","description":"Visit duration in minutes","context":"current_visit","imported":"AudienceStream","settings":{"origin_id":"12","origin_name":"Visit duration","origin_type":"metrics","origin_context":"current_visit","account":"services-caleb","profileid":"main"}},"324":{"_id":"324","name":"Visit end","type":"va","description":"Visit end date","context":"current_visit","imported":"AudienceStream","settings":{"origin_id":"11","origin_name":"Visit end","origin_type":"dates","origin_context":"current_visit","account":"services-caleb","profileid":"main"}},"325":{"_id":"325","name":"Visit start","type":"va","description":"Visit start date","context":"current_visit","imported":"AudienceStream","settings":{"origin_id":"10","origin_name":"Visit start","origin_type":"dates","origin_context":"current_visit","account":"services-caleb","profileid":"main"}},"326":{"_id":"326","name":"Weeks since first visit","type":"va","description":"Weeks elapsed since first visit","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"28","origin_name":"Weeks since first visit","origin_type":"metrics","origin_context":"visitor","account":"services-caleb","profileid":"main"}},"327":{"_id":"327","name":"Weeks since first visit temp","type":"va","description":"Temporary store for computer value","context":"current_visit","imported":"AudienceStream","settings":{"origin_id":"80","origin_name":"Weeks since first visit temp","origin_type":"metrics","origin_context":"current_visit","account":"services-caleb","profileid":"main"}},"328":{"_id":"328","name":"Yellow","type":"va","description":"","context":"visitor","imported":"AudienceStream","settings":{"origin_id":"5061","origin_name":"Yellow","origin_type":"badges","origin_context":"visitor","account":"services-caleb","profileid":"main"}}},"manage":{"6":{"publish_revisions":{"svr_save_timestamps":{"dev":"202009181343","prod":"202009181343","qa":"202009181343"},"last_modified":"202009181343"},"config_tagtype":"img","_id":"6","sort":"0","advconfig_send":"yes","advconfig_src":"","labels":"","config_baseurl":"https://solutions.tealium.net/hosted/i.gif","advconfig_bundle":"no","id":"6","config_requestscriptonce":"disabled","tag_id":"20067","selectedTargets":{"dev":"true","prod":"true","qa":"true"},"notes":"","new_flag":"true","publishedTargets":"dev","config_kvp":"=","config_qs":"?","loadrule_join_operator":"all","config_staticparams":"tagUid=6","status":"active","scope":"all","advconfig_optout":"yes","config_cachevar":"","advconfig_loadtype":"","config_cachebust":"enabled","tag_name":"Tealium Generic Tag","loadrule":"all","config_qsp":"&amp;","advconfig_wait":"yes","config_securebaseurl":"","title":"Tealium Generic Tag"},"7":{"config_requestscriptonce":"disabled","id":"7","advconfig_bundle":"no","config_baseurl":"https://solutions.tealium.net/hosted/i.gif","labels":"","advconfig_src":"","copiedFromTag":"6","advconfig_send":"yes","sort":"1","_id":"7","publish_revisions":{"last_modified":"202009181343","svr_save_timestamps":{"qa":"202009181343","dev":"202009181343","prod":"202009181343"}},"config_tagtype":"img","config_securebaseurl":"","title":"Tealium Generic Tag Copy 1","advconfig_wait":"yes","tag_name":"Tealium Generic Tag","config_qsp":"&amp;","config_cachebust":"enabled","loadrule":"all","advconfig_loadtype":"","config_cachevar":"","advconfig_optout":"yes","scope":"all","status":"active","config_staticparams":"tagUid=7","loadrule_join_operator":"all","config_kvp":"=","config_qs":"?","publishedTargets":"dev","new_flag":"true","notes":"","selectedTargets":{"dev":"true","prod":"true","qa":"true"},"tag_id":"20067"},"8":{"id":"8","config_requestscriptonce":"disabled","advconfig_bundle":"no","labels":"","config_baseurl":"https://solutions.tealium.net/hosted/i.gif","copiedFromTag":"6","advconfig_src":"","advconfig_send":"yes","sort":"2","config_tagtype":"img","publish_revisions":{"last_modified":"202009181343","svr_save_timestamps":{"qa":"202009181343","dev":"202009181343","prod":"202009181343"}},"_id":"8","title":"Tealium Generic Tag Copy 2","config_securebaseurl":"","tag_name":"Tealium Generic Tag","loadrule":"all","config_qsp":"&amp;","config_cachebust":"enabled","config_cachevar":"","advconfig_loadtype":"","advconfig_wait":"yes","advconfig_optout":"yes","loadrule_join_operator":"all","config_staticparams":"tagUid=8","scope":"all","status":"active","publishedTargets":"dev","config_kvp":"=","config_qs":"?","selectedTargets":{"qa":"true","dev":"true","prod":"true"},"new_flag":"true","notes":"","tag_id":"20067"},"9":{"id":"9","config_requestscriptonce":"enabled","advconfig_bundle":"no","labels":"","config_baseurl":"https://solutions.tealium.net/hosted/i.gif","copiedFromTag":"6","advconfig_src":"","advconfig_send":"yes","sort":"3","publish_revisions":{"svr_save_timestamps":{"dev":"202009181343","prod":"202009181343","qa":"202009181343"},"last_modified":"202009181343"},"config_tagtype":"img","_id":"9","title":"Tealium Generic Tag Copy 3","config_securebaseurl":"","config_cachebust":"enabled","config_qsp":"&amp;","tag_name":"Tealium Generic Tag","loadrule":"all","config_cachevar":"","advconfig_loadtype":"","advconfig_wait":"yes","advconfig_optout":"yes","config_staticparams":"tagUid=9","loadrule_join_operator":"all","scope":"all","status":"active","publishedTargets":"dev","config_kvp":"=","config_qs":"?","selectedTargets":{"prod":"true","dev":"true","qa":"true"},"new_flag":"true","notes":"","tag_id":"20067"},"10":{"id":"10","config_requestscriptonce":"disabled","advconfig_bundle":"no","labels":"","config_baseurl":"https://solutions.tealium.net/hosted/i.gif","copiedFromTag":"6","advconfig_src":"","advconfig_send":"yes","sort":"4","publish_revisions":{"svr_save_timestamps":{"qa":"202009181343","dev":"202009181343","prod":"202009181343"},"last_modified":"202009181343"},"config_tagtype":"img","_id":"10","title":"Tealium Generic Tag Copy 4","config_securebaseurl":"","config_cachevar":"","advconfig_loadtype":"","tag_name":"Tealium Generic Tag","loadrule":"2","config_cachebust":"enabled","config_qsp":"&amp;","advconfig_wait":"yes","advconfig_optout":"yes","config_staticparams":"tagUid=10","loadrule_join_operator":"all","status":"active","scope":"2","publishedTargets":"dev","config_kvp":"=","config_qs":"?","selectedTargets":{"qa":"true","prod":"true","dev":"true"},"notes":"","new_flag":"true","tag_id":"20067"},"11":{"sort":"5","_id":"11","publish_revisions":{"svr_save_timestamps":{"dev":"202009181343","prod":"202009181343","qa":"202009181343"},"last_modified":"202009181343"},"config_tagtype":"img","advconfig_src":"","copiedFromTag":"6","advconfig_send":"yes","config_baseurl":"https://solutions.tealium.net/hosted/i.gif","labels":"","config_requestscriptonce":"disabled","id":"11","advconfig_bundle":"no","new_flag":"true","notes":"","selectedTargets":{"prod":"true","dev":"true","qa":"true"},"tag_id":"20067","config_kvp":"=","config_qs":"?","publishedTargets":"dev","advconfig_optout":"yes","scope":"all","status":"active","config_staticparams":"tagUid=11","loadrule_join_operator":"all","config_securebaseurl":"","title":"Tealium Generic Tag Copy 5","advconfig_wait":"yes","tag_name":"Tealium Generic Tag","loadrule":"all","config_qsp":"&amp;","config_cachebust":"enabled","config_cachevar":"","advconfig_loadtype":""},"15":{"tag_id":"20067","selectedTargets":{"qa":"true","dev":"true","prod":"true"},"notes":"","new_flag":"true","publishedTargets":"dev","config_kvp":"=","config_qs":"?","loadrule_join_operator":"all","config_staticparams":"tagUid=15","status":"active","scope":"all","advconfig_optout":"yes","config_cachevar":"","advconfig_loadtype":"","loadrule":"all","config_cachebust":"enabled","config_qsp":"&amp;","tag_name":"Tealium Generic Tag","advconfig_wait":"yes","title":"Tealium Generic Tag Copy 6","config_securebaseurl":"","publish_revisions":{"svr_save_timestamps":{"qa":"202009181343","dev":"202009181343","prod":"202009181343"},"last_modified":"202009181343"},"config_tagtype":"img","_id":"15","sort":"6","advconfig_send":"yes","copiedFromTag":"14","advconfig_src":"","labels":"","config_baseurl":"https://solutions.tealium.net/hosted/i.gif","advconfig_bundle":"no","id":"15","config_requestscriptonce":"disabled"}},"settings":{"lastdefineid":"238","datacloud_revision":"1598628086246","account":"services-caleb","profileid":"usercentrics-by-tag-no-map","lastcustomizeid":"0","lastloadruleid":"2","revision":"202011040726","datacloud_profile":"main","creation":"202008191408","lastmanageid":"15","library":"NONE","minorrevision":"202011040726"},"createManifest":"false","versionorigin":"202011040724","datacloud_merge":"true","datacloud_profile_name":"main","datacloud_revision":"1625226277606","experiments":[{"id":"load_order_manager","enabled":false}]}
